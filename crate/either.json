{"root":"0:0:2045","crate_version":"1.10.0","includes_private":false,"index":{"0:106:2438":{"id":"0:106:2438","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[222,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7924:146","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12938:2441":{"id":"1:12938:2441","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41272:191","prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2441":{"id":"0:115:2441","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[251,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[162,0],"end":[944,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:147:1950","0:148:1954","0:149:1960","0:150:1965","0:151:335","0:152:1982","0:153:1985","0:154:1988","0:155:1994","0:156:2001","0:159:2008","0:162:1940","0:167:2033","0:173:2045","0:177:2056","0:182:2060","0:185:2064","0:188:907","0:189:923","0:192:924","0:195:2101","0:196:2108","0:199:2117","0:202:2128","0:203:2134","0:204:2140","0:206:2146","0:207:2150","0:208:2154","0:210:2163","0:211:2169","0:212:2173","0:213:2178","0:214:2185"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71:2444":{"id":"0:71:2444","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[120,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:1982":{"id":"0:424:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1263,0],"end":[1267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12999:29997":{"id":"1:12999:29997","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2883:246-0:341:1896":{"id":"a:1:2883:246-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:50:1123":{"id":"0:50:1123","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[50,4],"end":[52,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1345,0],"end":[1353,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:323:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281:2256":{"id":"0:281:2256","crate_id":0,"name":"write_all","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1209,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12916:29979":{"id":"1:12916:29979","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12918:29983","str::split_at_mut":"1:12917:29980"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:199":{"id":"1:13208:199","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12929:26345":{"id":"1:12929:26345","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12942:2448":{"id":"1:12942:2448","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41272:191","prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12985:33357":{"id":"1:12985:33357","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2255":{"id":"0:280:2255","crate_id":0,"name":"write","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1205,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323:757":{"id":"0:323:757","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1352,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:2445":{"id":"0:120:2445","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[265,4],"end":[270,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1258,0],"end":[1262,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:412:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1253,0],"end":[1257,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:408:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:2200":{"id":"0:224:2200","crate_id":0,"name":"factor_err","span":{"filename":"src/lib.rs","begin":[982,4],"end":[987,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Err` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\nassert_eq!(left.factor_err(), Ok(Left(vec![0])));\n\nlet right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\nassert_eq!(right.factor_err(), Ok(Right(String::new())));\n```","links":{"`Result`":"1:41413:226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12970:29994":{"id":"1:12970:29994","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31761:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31816:2711-0:381:1941":{"id":"a:1:31816:2711-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:185:2064":{"id":"0:185:2064","crate_id":0,"name":"right_and_then","span":{"filename":"src/lib.rs","begin":[510,4],"end":[518,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.right_and_then(|x| Right(x * 2)), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:1851":{"id":"0:346:1851","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[51,9],"end":[51,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"L"}}},"0:155:1994":{"id":"0:155:1994","crate_id":0,"name":"flip","span":{"filename":"src/lib.rs","begin":[311,4],"end":[316,5]},"visibility":"public","docs":"Convert `Either<L, R>` to `Either<R, L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(123);\nassert_eq!(left.flip(), Right(123));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.flip(), Left(\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1311,0],"end":[1319,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3108:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"1:3108:1887","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3095:127","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:313:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:335":{"id":"0:412:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1258,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2445":{"id":"0:74:2445","crate_id":0,"name":"position","span":{"filename":"src/iterator.rs","begin":[127,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[302,0],"end":[310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:134:943"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262:2239":{"id":"0:262:2239","crate_id":0,"name":"read","span":{"filename":"src/lib.rs","begin":[1139,4],"end":[1141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:1896":{"id":"0:341:1896","crate_id":0,"name":"Either","span":{"filename":"src/lib.rs","begin":[49,0],"end":[54,1]},"visibility":"public","docs":"The enum `Either` with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\nThe `Either` type is symmetric and treats its variants the same way, without\npreference.\n(For representing success or error, use the regular `Result` enum instead.)","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:344:182","0:347:229"],"impls":["0:144","0:216","0:220","0:225","0:230","0:235","0:240","a:1:41394:2750-0:341:1896","a:1:31759:237-0:341:1896","a:1:2883:246-0:341:1896","a:1:41395:2749-0:341:1896","a:1:31816:2711-0:341:1896","b:1:7932-0:341:1896","b:1:2660-0:341:1896","b:1:2388-0:341:1896","b:1:3496-0:341:1896","b:1:2670-0:341:1896","b:1:2664-0:341:1896","b:1:2385-0:341:1896","b:1:13206-0:341:1896","b:1:2675-0:341:1896","b:5:725-0:341:1896","b:5:5844-0:341:1896","0:270","0:421","0:350","0:377","0:372","0:356","0:254","0:89","0:310","0:305","0:40","0:417","0:401","0:139","0:413","0:290","0:295","0:314","0:76","0:85","0:250","0:364","0:246","0:277","0:405","0:409","0:266","0:353","0:397","0:300","0:320","0:259","0:368","0:393","0:360","0:46","0:284"]}}},"0:288:335":{"id":"0:288:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1225,4],"end":[1227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:2192":{"id":"0:219:2192","crate_id":0,"name":"factor_none","span":{"filename":"src/lib.rs","begin":[959,4],"end":[964,5]},"visibility":"public","docs":"Factors out `None` from an `Either` of [`Option`].\n\n```\nuse either::*;\nlet left: Either<_, Option<String>> = Left(Some(vec![0]));\nassert_eq!(left.factor_none(), Some(Left(vec![0])));\n\nlet right: Either<Option<Vec<u8>>, _> = Right(Some(String::new()));\nassert_eq!(right.factor_none(), Some(Right(String::new())));\n```","links":{"`Option`":"1:41270:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13018:29714":{"id":"1:13018:29714","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2390:25911":{"id":"1:2390:25911","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:341:1896":{"id":"b:1:2385-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2387:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189:923":{"id":"0:189:923","crate_id":0,"name":"iter","span":{"filename":"src/lib.rs","begin":[557,4],"end":[563,5]},"visibility":"public","docs":"Borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter`][Either::factor_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, &[u32]> = Left(vec![2, 3]);\nlet mut right: Either<Vec<u32>, _> = Right(&[4, 5][..]);\nlet mut all = vec![1];\nall.extend(left.iter());\nall.extend(right.iter());\nassert_eq!(all, vec![1, 2, 3, 4, 5]);\n```","links":{"Either::factor_iter":"0:196:2108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:728:25913":{"id":"5:728:25913","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:248":{"id":"0:308:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1304,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12921:7656":{"id":"1:12921:7656","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43123:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1034,0],"end":[1053,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"L"},{"generic":"T"}]}},{"type":{"tuple":[{"generic":"R"},{"generic":"T"}]}}],"bindings":[]}}}},"items":["0:239:2220"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[181,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["cloned","try_reduce","partial_cmp","collect_into","flat_map","enumerate","map","step_by","min_by_key","by_ref","position","eq_by","cycle","try_find","partition_in_place","all","flatten","peekable","count","zip","max","partition","any","for_each","array_chunks","is_sorted","rposition","is_partitioned","map_windows","skip_while","intersperse","max_by","cmp","chain","find","ne","last","sum","is_sorted_by","rev","try_fold","fuse","le","take_while","skip","intersperse_with","max_by_key","eq","lt","is_sorted_by_key","nth","product","size_hint","unzip","take","try_for_each","gt","inspect","map_while","filter","next_chunk","min","__iterator_get_unchecked","cmp_by","fold","copied","reduce","try_collect","scan","filter_map","ge","advance_by","min_by","find_map","collect","partial_cmp_by"],"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:95:174","0:96:1123","0:97:2430","0:98:2431","0:101:2434","0:103:550","0:104:2435","0:105:2436","0:106:2438","0:108:2440","0:111:306","0:113:325","0:115:2441","0:117:2444","0:120:2445"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192:924":{"id":"0:192:924","crate_id":0,"name":"iter_mut","span":{"filename":"src/lib.rs","begin":[586,4],"end":[594,5]},"visibility":"public","docs":"Mutably borrow the inner value as an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_iter_mut`][Either::factor_iter_mut] to iterate different types.\n\n```\nuse either::*;\n\nlet mut left: Either<_, &mut [u32]> = Left(vec![2, 3]);\nfor l in left.iter_mut() {\n    *l *= *l\n}\nassert_eq!(left, Left(vec![4, 9]));\n\nlet mut inner = [4, 5];\nlet mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);\nfor r in right.iter_mut() {\n    *r *= *r\n}\nassert_eq!(inner, [16, 25]);\n```","links":{"Either::factor_iter_mut":"0:199:2117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:1207":{"id":"0:367:1207","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30599:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7932-0:381:1941":{"id":"b:1:7932-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:7934:174","1:7935:2073","1:7936:907"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:41395:2749-0:381:1941":{"id":"a:1:41395:2749-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273:2248":{"id":"0:273:2248","crate_id":0,"name":"fill_buf","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2045":{"id":"0:173:2045","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[437,4],"end":[446,5]},"visibility":"public","docs":"Apply one of two functions depending on contents, unifying their result. If the value is\n`Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\nfunction `g` is applied.\n\n```\nuse either::*;\n\nfn square(n: u32) -> i32 { (n * n) as i32 }\nfn negate(n: i32) -> i32 { -n }\n\nlet left: Either<u32, i32> = Left(4);\nassert_eq!(left.either(square, negate), 16);\n\nlet right: Either<u32, i32> = Right(-4);\nassert_eq!(right.either(square, negate), 4);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2438":{"id":"0:60:2438","crate_id":0,"name":"collect","span":{"filename":"src/iterator.rs","begin":[84,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FromIterator","id":"1:7924:146","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12961:29989":{"id":"1:12961:29989","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924","str::rsplitn":"1:12964:29991"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43257:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:25914":{"id":"5:729:25914","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12958:33353":{"id":"1:12958:33353","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12584:1924","str::split":"1:12946:2951","prim@char":"4:12248:455","str::split_terminator":"1:12955:33352"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43221:7708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:8968":{"id":"5:5597:8968","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:668":{"id":"0:359:668","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12893":{"id":"1:12893","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12894:943","1:12895:2970","1:12896:33345","1:12897:33346","1:12899:33347","1:12902:29695","1:12903:33348","1:12904:334","1:12905:29960","1:12906:27682","1:12908:27683","1:12910:27684","1:12912:1989","1:12914:33349","1:12915:33350","1:12916:29979","1:12917:29980","1:12918:29983","1:12919:29984","1:12921:7656","1:12922:7723","1:12923:2958","1:12924:26807","1:12925:26818","1:12926:2952","1:12927:33351","1:12928:26822","1:12929:26345","1:12932:29995","1:12935:29996","1:12938:2441","1:12942:2448","1:12946:2951","1:12949:26808","1:12952:29987","1:12955:33352","1:12958:33353","1:12961:29989","1:12964:29991","1:12967:29993","1:12970:29994","1:12973:2497","1:12976:33354","1:12979:33355","1:12982:33356","1:12985:33357","1:12987:33358","1:12989:33359","1:12991:33360","1:12992:33361","1:12993:33362","1:12996:33363","1:12999:29997","1:13002:29998","1:13005:33364","1:13008:33365","1:13011:33366","1:13014:2294","1:13016:29713","1:13017:29902","1:13018:29714","1:13019:29710","1:13020:29709","1:13021:29905","1:13022:29906","1:13023:29907","1:13024:33367","1:13026:9015","1:13027:33368"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[29,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7937:2427","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:7937:2427","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7937:2427","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:44:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:1988":{"id":"0:154:1988","crate_id":0,"name":"as_pin_mut","span":{"filename":"src/lib.rs","begin":[286,4],"end":[298,5]},"visibility":"public","docs":"Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360":{"id":"0:360","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,26],"end":[48,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2440:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"1:2440:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2440:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1299,0],"end":[1309,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:3095:127","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:308:248","0:309:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:2444":{"id":"0:117:2444","crate_id":0,"name":"find_map","span":{"filename":"src/iterator.rs","begin":[258,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1198,0],"end":[1218,1]},"visibility":"default","docs":"`Either<L, R>` implements `Write` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3575:1895","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Write","id":"4:3575:1895","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["write_all","is_write_vectored","by_ref","write_vectored","write_fmt","write_all_vectored"],"trait":{"name":"Write","id":"4:3575:1895","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:280:2255","0:281:2256","0:282:2257","0:283:2259"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12924:26807":{"id":"1:12924:26807","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12925:26818"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43427:7714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7935:2073":{"id":"1:7935:2073","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:381:1941":{"id":"0:381:1941","crate_id":0,"name":"IterEither","span":{"filename":"src/iterator.rs","begin":[19,0],"end":[21,1]},"visibility":"public","docs":"Iterator that maps left or right iterators to corresponding `Either`-wrapped items.\n\nThis struct is created by the [`Either::factor_into_iter`],\n[`factor_iter`][Either::factor_iter],\nand [`factor_iter_mut`][Either::factor_iter_mut] methods.","links":{"Either::factor_iter_mut":"0:199:2117","Either::factor_iter":"0:196:2108","`Either::factor_into_iter`":"0:195:2101"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:41394:2750-0:381:1941","a:1:31759:237-0:381:1941","a:1:2883:246-0:381:1941","a:1:41395:2749-0:381:1941","a:1:31816:2711-0:381:1941","b:1:7932-0:381:1941","b:1:2660-0:381:1941","b:1:2388-0:381:1941","b:1:3496-0:381:1941","b:1:2670-0:381:1941","b:1:2664-0:381:1941","b:1:2385-0:381:1941","b:1:2675-0:381:1941","b:5:725-0:381:1941","0:135","0:92","0:131","0:389","0:385","0:122"]}}},"0:212:2173":{"id":"0:212:2173","crate_id":0,"name":"expect_left","span":{"filename":"src/lib.rs","begin":[883,4],"end":[891,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.expect_left(\"value was Right\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.expect_left(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2185":{"id":"0:214:2185","crate_id":0,"name":"either_into","span":{"filename":"src/lib.rs","begin":[934,4],"end":[943,5]},"visibility":"public","docs":"Convert the contained value into `T`\n\n# Examples\n\n```\n# use either::*;\n// Both u16 and u32 can be converted to u64.\nlet left: Either<u16, u32> = Left(3u16);\nassert_eq!(left.either_into::<u64>(), 3u64);\nlet right: Either<u16, u32> = Right(7u32);\nassert_eq!(right.either_into::<u64>(), 7u64);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2213":{"id":"0:234:2213","crate_id":0,"name":"factor_first","span":{"filename":"src/lib.rs","begin":[1026,4],"end":[1031,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the first element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (u32, String)> = Left((123, vec![0]));\nassert_eq!(left.factor_first().0, 123);\n\nlet right: Either<(u32, Vec<u8>), _> = Right((123, String::new()));\nassert_eq!(right.factor_first().0, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:603":{"id":"0:309:603","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1306,4],"end":[1308,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3095:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:34064":{"id":"5:5600:34064","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:29711":{"id":"5:5615:29711","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13020:29709"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1094,0],"end":[1101,1]},"visibility":"default","docs":"Convert from `Result` to `Either` with `Ok => Right` and `Err => Left`.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:249:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1172,0],"end":[1192,1]},"visibility":"default","docs":"Requires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3603:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"BufRead","id":"4:3603:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lines","skip_until","read_line","split","has_data_left","read_until"],"trait":{"name":"BufRead","id":"4:3603:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:273:2248","0:274:2249","0:275:2251","0:276:2253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12918:29983":{"id":"1:12918:29983","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12919:29984"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12895:2970":{"id":"1:12895:2970","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12896:33345":{"id":"1:12896:33345","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,9],"end":[48,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2878:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"1:2878:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2878:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7932-0:341:1896":{"id":"b:1:7932-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:7934:174","1:7935:2073","1:7936:907"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:12991:33360":{"id":"1:12991:33360","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:33361":{"id":"1:12992:33361","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2056":{"id":"0:177:2056","crate_id":0,"name":"either_with","span":{"filename":"src/lib.rs","begin":[467,4],"end":[476,5]},"visibility":"public","docs":"Like [`either`][Self::either], but provide some context to whichever of the\nfunctions ends up being called.\n\n```\n// In this example, the context is a mutable reference\nuse either::*;\n\nlet mut result = Vec::new();\n\nlet values = vec![Left(2), Right(2.7)];\n\nfor value in values {\n    value.either_with(&mut result,\n                      |ctx, integer| ctx.push(integer),\n                      |ctx, real| ctx.push(f64::round(real) as i32));\n}\n\nassert_eq!(result, vec![2, 3]);\n```","links":{"Self::either":"0:173:2045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2150":{"id":"0:207:2150","crate_id":0,"name":"right_or_default","span":{"filename":"src/lib.rs","begin":[772,4],"end":[780,5]},"visibility":"public","docs":"Return right or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.right_or_default(), u32::default());\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.right_or_default(), 42);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1134,0],"end":[1154,1]},"visibility":"default","docs":"`Either<L, R>` implements `Read` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3518:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:3518:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["by_ref","is_read_vectored","read_exact","bytes","read_buf","take","read_to_end","chain","read_buf_exact","read_vectored","read_to_string"],"trait":{"name":"Read","id":"4:3518:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:262:2239","0:263:2241","0:264:2242","0:265:2243"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12926:2952":{"id":"1:12926:2952","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43407:2675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:2206":{"id":"0:229:2206","crate_id":0,"name":"factor_ok","span":{"filename":"src/lib.rs","begin":[1005,4],"end":[1010,5]},"visibility":"public","docs":"Factors out a homogenous type from an `Either` of [`Result`].\n\nHere, the homogeneous type is the `Ok` type of the [`Result`].\n\n```\nuse either::*;\nlet left: Either<_, Result<u32, String>> = Left(Err(vec![0]));\nassert_eq!(left.factor_ok(), Err(Left(vec![0])));\n\nlet right: Either<Result<u32, Vec<u8>>, _> = Right(Err(String::new()));\nassert_eq!(right.factor_ok(), Err(Right(String::new())));\n```","links":{"`Result`":"1:41413:226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12935:29996":{"id":"1:12935:29996","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12964:29991":{"id":"1:12964:29991","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12248:455","str::splitn":"1:12961:29989","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43275:7642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:2701":{"id":"5:5613:2701","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13022:29906":{"id":"1:13022:29906","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:38504"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1220,0],"end":[1228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:288:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2664-0:381:1941":{"id":"b:1:2664-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:148:1954":{"id":"0:148:1954","crate_id":0,"name":"is_right","span":{"filename":"src/lib.rs","begin":[188,4],"end":[190,5]},"visibility":"public","docs":"Return true if the value is the `Right` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_right(), false);\nassert_eq!(values[1].is_right(), true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:341:1896":{"id":"b:1:2670-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:313:605":{"id":"0:313:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1316,4],"end":[1318,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3095:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:2241":{"id":"0:263:2241","crate_id":0,"name":"read_exact","span":{"filename":"src/lib.rs","begin":[1143,4],"end":[1145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:325":{"id":"0:67:325","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[106,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13020:29709":{"id":"1:13020:29709","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:34063","5:5597:8968","5:5600:34064","5:5603:34065","5:5611:34066","5:5612:34067","5:5613:2701","5:5614:29712","5:5615:29711"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,30],"end":[48,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2477:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialOrd","id":"1:2477:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"1:2477:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:367:1207"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10236:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"1:10236:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10236:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:375:824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:1922":{"id":"0:24:1922","crate_id":0,"name":"for_both","span":{"filename":"src/lib.rs","begin":[81,0],"end":[88,1]},"visibility":"public","docs":"Evaluate the provided expression for both [`Either::Left`] and [`Either::Right`].\n\nThis macro is useful in cases where both sides of [`Either`] can be interacted with\nin the same way even though the don't share the same type.\n\nSyntax: `either::for_both!(` *expression* `,` *pattern* `=>` *expression* `)`\n\n# Example\n\n```\nuse either::Either;\n\nfn length(owned_or_borrowed: Either<String, &'static str>) -> usize {\n    either::for_both!(owned_or_borrowed, s => s.len())\n}\n\nfn main() {\n    let borrowed = Either::Right(\"Hello world!\");\n    let owned = Either::Left(\"Hello world!\".to_owned());\n\n    assert_eq!(length(borrowed), 12);\n    assert_eq!(length(owned), 12);\n}\n```","links":{"`Either::Right`":"0:347:229","`Either`":"0:341:1896","`Either::Left`":"0:344:182"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! for_both {\n    ($value:expr, $pattern:pat => $result:expr) => { ... };\n}"}},"0:208:2154":{"id":"0:208:2154","crate_id":0,"name":"right_or_else","span":{"filename":"src/lib.rs","begin":[794,4],"end":[802,5]},"visibility":"public","docs":"Returns right value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.right_or_else(|_| unreachable!()), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:335":{"id":"0:151:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[239,4],"end":[244,5]},"visibility":"public","docs":"Convert `&Either<L, R>` to `Either<&L, &R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.as_ref(), Left(&\"some value\"));\n\nlet right: Either<(), _> = Right(\"some value\");\nassert_eq!(right.as_ref(), Right(&\"some value\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:34065":{"id":"5:5603:34065","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:380:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1252,0],"end":[1252,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:400:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13023:29907":{"id":"1:13023:29907","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:38504"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1269,0],"end":[1277,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:294:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:2060":{"id":"0:182:2060","crate_id":0,"name":"left_and_then","span":{"filename":"src/lib.rs","begin":[489,4],"end":[497,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"S"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7936:907":{"id":"1:7936:907","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2134":{"id":"0:203:2134","crate_id":0,"name":"left_or_default","span":{"filename":"src/lib.rs","begin":[705,4],"end":[713,5]},"visibility":"public","docs":"Return left or a default\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"left\".to_string());\nassert_eq!(left.left_or_default(), \"left\");\n\nlet right: Either<String, u32> = Right(42);\nassert_eq!(right.left_or_default(), String::default());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:1982":{"id":"0:416:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1258,0],"end":[1262,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2446":{"id":"0:79:2446","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[140,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2169":{"id":"0:211:2169","crate_id":0,"name":"unwrap_right","span":{"filename":"src/lib.rs","begin":[854,4],"end":[862,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.unwrap_right(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.unwrap_right();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:2749-0:341:1896":{"id":"a:1:41395:2749-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:55:2434":{"id":"0:55:2434","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[65,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1263,0],"end":[1267,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:424:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13014:2294":{"id":"1:13014:2294","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12545:137","`FromStr`":"1:12544:3152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12544:3152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12544:3152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13002:29998":{"id":"1:13002:29998","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2679:1690":{"id":"1:2679:1690","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2673:138":{"id":"1:2673:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1279,0],"end":[1287,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"generic":"Target"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:299:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:2242":{"id":"0:264:2242","crate_id":0,"name":"read_to_end","span":{"filename":"src/lib.rs","begin":[1147,4],"end":[1149,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7031:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:2186":{"id":"0:253:2186","crate_id":0,"name":"into","span":{"filename":"src/lib.rs","begin":[1106,4],"end":[1111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:459":{"id":"0:388:459","crate_id":0,"name":"clone","span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2249":{"id":"0:274:2249","crate_id":0,"name":"consume","span":{"filename":"src/lib.rs","begin":[1181,4],"end":[1183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["amt",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:2246":{"id":"0:269:2246","crate_id":0,"name":"seek","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["pos",{"resolved_path":{"name":"SeekFrom","id":"4:8425:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:466":{"id":"0:371:466","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30599:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:392:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[18,9],"end":[18,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:388:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2446":{"id":"0:125:2446","crate_id":0,"name":"next_back","span":{"filename":"src/iterator.rs","begin":[278,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:1851":{"id":"0:349:1851","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[53,10],"end":[53,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"a:1:41394:2750-0:381:1941":{"id":"a:1:41394:2750-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13005:33364":{"id":"1:13005:33364","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:1982":{"id":"0:304:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1294,4],"end":[1296,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:33347":{"id":"1:12899:33347","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12897:33346"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:381:1941":{"id":"b:1:3496-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:2440":{"id":"0:108:2440","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[229,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7937:2427","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2674:1692":{"id":"1:2674:1692","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12914:33349":{"id":"1:12914:33349","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12254:1609","str::slice_mut_unchecked":"1:12915:33350","crate::ops::Index":"1:38889:2573"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2430":{"id":"0:97:2430","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:1982":{"id":"0:152:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[264,4],"end":[269,5]},"visibility":"public","docs":"Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.\n\n```\nuse either::*;\n\nfn mutate_left(value: &mut Either<u32, u32>) {\n    if let Some(l) = value.as_mut().left() {\n        *l = 999;\n    }\n}\n\nlet mut left = Left(123);\nlet mut right = Right(123);\nmutate_left(&mut left);\nmutate_left(&mut right);\nassert_eq!(left, Left(999));\nassert_eq!(right, Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}}},{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:1965":{"id":"0:150:1965","crate_id":0,"name":"right","span":{"filename":"src/lib.rs","begin":[221,4],"end":[226,5]},"visibility":"public","docs":"Convert the right side of `Either<L, R>` to an `Option<R>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.right(),  None);\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.right(), Some(321));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22-0:344:182":{"id":"0:22-0:344:182","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,24],"end":[39,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Left","name":"Left","id":"0:344:182","glob":false}}},"a:1:2883:246-0:381:1941":{"id":"a:1:2883:246-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1258,0],"end":[1262,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OsStr","id":"4:2033:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:416:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31816:2711-0:341:1896":{"id":"a:1:31816:2711-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:2711","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1289,0],"end":[1297,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Target","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2631:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"Target"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:304:1982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:265:2243":{"id":"0:265:2243","crate_id":0,"name":"read_to_string","span":{"filename":"src/lib.rs","begin":[1151,4],"end":[1153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:29713":{"id":"1:13016:29713","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2436":{"id":"0:59:2436","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:1982":{"id":"0:408:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1253,0],"end":[1257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:341:1896":{"id":"b:1:2675-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1055,0],"end":[1091,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:242:2224","0:243:994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2675-0:381:1941":{"id":"b:1:2675-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149:1960":{"id":"0:149:1960","crate_id":0,"name":"left","span":{"filename":"src/lib.rs","begin":[203,4],"end":[208,5]},"visibility":"public","docs":"Convert the left side of `Either<L, R>` to an `Option<L>`.\n\n```\nuse either::*;\n\nlet left: Either<_, ()> = Left(\"some value\");\nassert_eq!(left.left(),  Some(\"some value\"));\n\nlet right: Either<(), _> = Right(321);\nassert_eq!(right.left(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:29980":{"id":"1:12917:29980","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12916:29979","str::split_at_mut_checked":"1:12919:29984"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:2146":{"id":"0:206:2146","crate_id":0,"name":"right_or","span":{"filename":"src/lib.rs","begin":[753,4],"end":[758,5]},"visibility":"public","docs":"Return right value or given value\n\nArguments passed to `right_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`right_or_else`][Self::right_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.right_or(\"foo\"), \"right\");\n\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.right_or(\"right\"), \"right\");\n```","links":{"Self::right_or_else":"0:208:2154"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"R"}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1252,0],"end":[1252,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:396:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:404:335":{"id":"0:404:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1253,0],"end":[1257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12955:33352":{"id":"1:12955:33352","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12584:1924","str::split":"1:12946:2951","prim@char":"4:12248:455","`DoubleEndedIterator`":"1:7966:131","str::rsplit_terminator":"1:12958:33353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43203:7707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12973:2497":{"id":"1:12973:2497","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::rmatches":"1:12976:33354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43357:7711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2440":{"id":"0:62:2440","crate_id":0,"name":"partition","span":{"filename":"src/iterator.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"tuple":[{"generic":"B"},{"generic":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:7937:2427","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:2101":{"id":"0:195:2101","crate_id":0,"name":"factor_into_iter","span":{"filename":"src/lib.rs","begin":[612,4],"end":[618,5]},"visibility":"public","docs":"Converts an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`into_iter`][Either::into_iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left(&[\"hello\"]);\nassert_eq!(left.factor_into_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<&[&str], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_into_iter().collect::<Vec<_>>(), vec![Right(0), Right(1)]);\n\n```","links":{"Either::into_iter":"0:188:907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7928:166","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:7928:166","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7934:174":{"id":"1:7934:174","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12967:29993":{"id":"1:12967:29993","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2008":{"id":"0:159:2008","crate_id":0,"name":"map_right","span":{"filename":"src/lib.rs","begin":[352,4],"end":[360,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\nresult in `Right`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_right(|x| x * 2), Left(123));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_right(|x| x * 2), Right(246));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:29712":{"id":"5:5614:29712","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13019:29710"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1253,0],"end":[1257,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::path::Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"4:5347:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:404:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:204:2140":{"id":"0:204:2140","crate_id":0,"name":"left_or_else","span":{"filename":"src/lib.rs","begin":[727,4],"end":[735,5]},"visibility":"public","docs":"Returns left value or computes it from a closure\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<String, u32> = Left(\"3\".to_string());\nassert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n\nlet right: Either<String, u32> = Right(3);\nassert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"L"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:381:1941":{"id":"b:1:2670-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5611:34066":{"id":"5:5611:34066","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2163":{"id":"0:210:2163","crate_id":0,"name":"unwrap_left","span":{"filename":"src/lib.rs","begin":[823,4],"end":[833,5]},"visibility":"public","docs":"Returns the left value\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nassert_eq!(left.unwrap_left(), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Right` value\n\n```should_panic\n# use either::*;\nlet right: Either<(), _> = Right(3);\nright.unwrap_left();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:381:1941":{"id":"b:1:2660-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2663:2186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5846:1667":{"id":"5:5846:1667","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:2251":{"id":"0:275:2251","crate_id":0,"name":"read_until","span":{"filename":"src/lib.rs","begin":[1185,4],"end":[1187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["byte",{"primitive":"u8"}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::vec::Vec","id":"5:7031:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12897:33346":{"id":"1:12897:33346","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1013,0],"end":[1032,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"generic":"L"}]}},{"type":{"tuple":[{"generic":"T"},{"generic":"R"}]}}],"bindings":[]}}}},"items":["0:234:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:2435":{"id":"0:104:2435","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[214,4],"end":[216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:6800":{"id":"5:727:6800","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:167:2033":{"id":"0:167:2033","crate_id":0,"name":"map_either_with","span":{"filename":"src/lib.rs","begin":[410,4],"end":[419,5]},"visibility":"public","docs":"Similar to [`map_either`][Self::map_either], with an added context `ctx` accessible to\nboth functions.\n\n```\nuse either::*;\n\nlet mut sum = 0;\n\n// Both closures want to update the same value, so pass it as context.\nlet mut f = |sum: &mut usize, s: String| { *sum += s.len(); s.to_uppercase() };\nlet mut g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };\n\nlet left: Either<String, usize> = Left(\"loopy\".into());\nassert_eq!(left.map_either_with(&mut sum, &mut f, &mut g), Left(\"LOOPY\".into()));\n\nlet right: Either<String, usize> = Right(42);\nassert_eq!(right.map_either_with(&mut sum, &mut f, &mut g), Right(\"42\".into()));\n\nassert_eq!(sum, 47);\n```","links":{"Self::map_either":"0:162:1940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["ctx",{"generic":"Ctx"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Ctx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"Ctx"},{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2428":{"id":"0:44:2428","crate_id":0,"name":"extend","span":{"filename":"src/iterator.rs","begin":[34,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:27684":{"id":"1:12910:27684","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:1982":{"id":"0:400:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1252,0],"end":[1252,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[312,0],"end":[317,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12925:26818":{"id":"1:12925:26818","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12924:26807"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43436:7715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:174":{"id":"0:95:174","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[186,4],"end":[186,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[43,0],"end":[133,1]},"visibility":"default","docs":"`Either<L, R>` is an iterator if both `L` and `R` are iterators.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["cloned","try_reduce","partial_cmp","collect_into","flat_map","enumerate","map","step_by","min_by_key","by_ref","position","eq_by","cycle","try_find","partition_in_place","all","flatten","peekable","count","zip","max","partition","any","for_each","array_chunks","is_sorted","rposition","is_partitioned","map_windows","skip_while","intersperse","max_by","cmp","chain","find","ne","last","sum","is_sorted_by","rev","try_fold","fuse","le","take_while","skip","intersperse_with","max_by_key","eq","lt","is_sorted_by_key","nth","product","size_hint","unzip","take","try_for_each","gt","inspect","map_while","filter","next_chunk","min","__iterator_get_unchecked","cmp_by","fold","copied","reduce","try_collect","scan","filter_map","ge","advance_by","min_by","find_map","collect","partial_cmp_by"],"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:49:174","0:50:1123","0:51:2430","0:52:2431","0:55:2434","0:57:550","0:58:2435","0:59:2436","0:60:2438","0:62:2440","0:65:306","0:67:325","0:69:2441","0:71:2444","0:74:2445"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13027:33368":{"id":"1:13027:33368","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4678:33368"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43470:7665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2431":{"id":"0:52:2431","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[58,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:2257":{"id":"0:282:2257","crate_id":0,"name":"write_fmt","span":{"filename":"src/lib.rs","begin":[1211,4],"end":[1213,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["fmt",{"resolved_path":{"name":"fmt::Arguments","id":"1:42334:2258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:29984":{"id":"1:12919:29984","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12918:29983"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12927:33351":{"id":"1:12927:33351","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43417:7713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344:182":{"id":"0:344:182","crate_id":0,"name":"Left","span":{"filename":"src/lib.rs","begin":[51,4],"end":[51,11]},"visibility":"default","docs":"A value of type `L`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:346:1851"]},"discriminant":null}}},"0:242:2224":{"id":"0:242:2224","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1067,4],"end":[1069,5]},"visibility":"public","docs":"Extract the value of an either over two equivalent types.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.into_inner(), 123);\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.into_inner(), 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12949:26808":{"id":"1:12949:26808","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12400:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12993:33362":{"id":"1:12993:33362","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12610:9122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[946,0],"end":[965,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:219:2192"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12923:2958":{"id":"1:12923:2958","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43139:2678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2448":{"id":"0:129:2448","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[294,4],"end":[299,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2448":{"id":"0:83:2448","crate_id":0,"name":"rfind","span":{"filename":"src/iterator.rs","begin":[156,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[967,0],"end":[988,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"E"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:224:2200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5596:34063":{"id":"5:5596:34063","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3125","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:3125","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:907":{"id":"0:188:907","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[534,4],"end":[540,5]},"visibility":"public","docs":"Convert the inner value to an iterator.\n\nThis requires the `Left` and `Right` iterators to have the same item type.\nSee [`factor_into_iter`][Either::factor_into_iter] to iterate different types.\n\n```\nuse either::*;\n\nlet left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\nlet mut right: Either<Vec<u32>, _> = Right(vec![]);\nright.extend(left.into_iter());\nassert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n```","links":{"Either::factor_into_iter":"0:195:2101"},"attrs":["#[allow(clippy::should_implement_trait)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7928:166","args":null}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"1:7928:166","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:7928:166","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:341:1896":{"id":"b:1:3496-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5844-0:341:1896":{"id":"b:5:5844-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5842:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:5846:1667"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3498:1705":{"id":"1:3498:1705","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39057:6196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,42],"end":[48,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2471:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Ord","id":"1:2471:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2471:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:371:466"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:318:2263":{"id":"0:318:2263","crate_id":0,"name":"description","span":{"filename":"src/lib.rs","begin":[1335,4],"end":[1337,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2664-0:341:1896":{"id":"b:1:2664-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:2117":{"id":"0:199:2117","crate_id":0,"name":"factor_iter_mut","span":{"filename":"src/lib.rs","begin":[660,4],"end":[668,5]},"visibility":"public","docs":"Mutably borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter_mut`][Either::iter_mut], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet mut left: Either<_, Vec<u8>> = Left([\"hello\"]);\nleft.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");\nassert_eq!(left, Left([\"goodbye\"]));\nlet mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);\nright.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });\nassert_eq!(right, Right(vec![0, -1, -2]));\n\n```","links":{"Either::iter_mut":"0:192:924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:1985":{"id":"0:153:1985","crate_id":0,"name":"as_pin_ref","span":{"filename":"src/lib.rs","begin":[273,4],"end":[282,5]},"visibility":"public","docs":"Convert `Pin<&Either<L, R>>` to `Either<Pin<&L>, Pin<&R>>`,\npinned projections of the inner variants.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1325,0],"end":[1343,1]},"visibility":"default","docs":"`Either` implements `Error` if *both* `L` and `R` implement it.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["cause","provide","description","source","type_id"],"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:317:1943","0:318:2263","0:319:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:299:1982":{"id":"0:299:1982","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1284,4],"end":[1286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Target"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[164,0],"end":[172,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8019:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:88:943"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12989:33359":{"id":"1:12989:33359","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2663:2186":{"id":"1:2663:2186","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:341:1896":{"id":"b:5:725-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:727:6800","5:728:25913","5:729:25914"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1105,0],"end":[1112,1]},"visibility":"default","docs":"Convert from `Either` to `Result` with `Right => Ok` and `Left => Err`.","links":{},"attrs":["#[allow(clippy::from_over_into)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:253:2186"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12905:29960":{"id":"1:12905:29960","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12928:26822":{"id":"1:12928:26822","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43445:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12906:27682":{"id":"1:12906:27682","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13011:33366":{"id":"1:13011:33366","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-0:347:229":{"id":"0:23-0:347:229","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[39,30],"end":[39,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Either::Right","name":"Right","id":"0:347:229","glob":false}}},"1:13024:33367":{"id":"1:13024:33367","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4680:33367"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43452:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:335":{"id":"0:294:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1274,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Target"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:9015":{"id":"1:13026:9015","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4681:9015"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43461:7614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[160,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:142:459","0:143:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:2128":{"id":"0:202:2128","crate_id":0,"name":"left_or","span":{"filename":"src/lib.rs","begin":[686,4],"end":[691,5]},"visibility":"public","docs":"Return left value or given value\n\nArguments passed to `left_or` are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use\n[`left_or_else`][Self::left_or_else], which is lazily evaluated.\n\n# Examples\n\n```\n# use either::*;\nlet left: Either<&str, &str> = Left(\"left\");\nassert_eq!(left.left_or(\"foo\"), \"left\");\n\nlet right: Either<&str, &str> = Right(\"right\");\nassert_eq!(right.left_or(\"left\"), \"left\");\n```","links":{"Self::left_or_else":"0:204:2140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["other",{"generic":"L"}]],"output":{"generic":"L"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31759:237-0:341:1896":{"id":"a:1:31759:237-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:381:1941":{"id":"b:5:725-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["5:727:6800","5:728:25913","5:729:25914"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13021:29905":{"id":"1:13021:29905","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:38504"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1123":{"id":"0:96:1123","crate_id":0,"name":"next","span":{"filename":"src/iterator.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13210:906":{"id":"1:13210:906","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"IntoFuture","id":"1:13202:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2253":{"id":"0:276:2253","crate_id":0,"name":"read_line","span":{"filename":"src/lib.rs","begin":[1189,4],"end":[1191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::string::String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:306":{"id":"0:65:306","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[99,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:824":{"id":"0:375:824","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[48,47],"end":[48,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10244:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:1943":{"id":"0:317:1943","crate_id":0,"name":"source","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1332,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:429":{"id":"0:319:429","crate_id":0,"name":"cause","span":{"filename":"src/lib.rs","begin":[1340,4],"end":[1342,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2045":{"id":"0:0:2045","crate_id":0,"name":"either","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1516,1]},"visibility":"public","docs":"The enum [`Either`] with variants `Left` and `Right` is a general purpose\nsum type with two cases.\n\n[`Either`]: enum.Either.html\n\n**Crate features:**\n\n* `\"use_std\"`\nEnabled by default. Disable to make the library `#![no_std]`.\n\n* `\"serde\"`\nDisabled by default. Enable to `#[derive(Serialize, Deserialize)]` for `Either`\n","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/either/1/\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:22-0:344:182","0:23-0:347:229","0:341:1896","0:138-0:381:1941","0:24:1922","0:25:1936","0:26:1939"],"is_stripped":false}}},"b:1:2388-0:381:1941":{"id":"b:1:2388-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2390:25911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12894:943":{"id":"1:12894:943","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12248:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:306":{"id":"0:111:306","crate_id":0,"name":"all","span":{"filename":"src/iterator.rs","begin":[237,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:229":{"id":"0:347:229","crate_id":0,"name":"Right","span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"A value of type `R`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:349:1851"]},"discriminant":null}}},"1:12903:33348":{"id":"1:12903:33348","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13017:29902":{"id":"1:13017:29902","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39243:8999","Self::is_ascii":"1:13016:29713"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39243:8999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:994":{"id":"0:243:994","crate_id":0,"name":"map","span":{"filename":"src/lib.rs","begin":[1082,4],"end":[1090,5]},"visibility":"public","docs":"Map `f` over the contained value and return the result in the\ncorresponding variant.\n\n```\nuse either::*;\n\nlet value: Either<_, i32> = Right(42);\n\nlet other = value.map(|x| x * 2);\nassert_eq!(other, Right(84));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"M"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:2178":{"id":"0:213:2178","crate_id":0,"name":"expect_right","span":{"filename":"src/lib.rs","begin":[912,4],"end":[920,5]},"visibility":"public","docs":"Returns the right value\n\n# Examples\n\n```\n# use either::*;\nlet right: Either<(), _> = Right(3);\nassert_eq!(right.expect_right(\"value was Left\"), 3);\n```\n\n# Panics\n\nWhen `Either` is a `Left` value\n\n```should_panic\n# use either::*;\nlet left: Either<_, ()> = Left(3);\nleft.expect_right(\"value was Right\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"generic":"R"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:757":{"id":"0:392:757","crate_id":0,"name":"fmt","span":{"filename":"src/iterator.rs","begin":[18,16],"end":[18,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:341:1896":{"id":"b:1:2660-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2663:2186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,15],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2435:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"1:2435:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2435:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:359:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138-0:381:1941":{"id":"0:138-0:381:1941","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::iterator::IterEither","name":"IterEither","id":"0:381:1941","glob":false}}},"0:156:2001":{"id":"0:156:2001","crate_id":0,"name":"map_left","span":{"filename":"src/lib.rs","begin":[330,4],"end":[338,5]},"visibility":"public","docs":"Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\nresult in `Left`.\n\n```\nuse either::*;\n\nlet left: Either<_, u32> = Left(123);\nassert_eq!(left.map_left(|x| x * 2), Left(246));\n\nlet right: Either<u32, _> = Right(123);\nassert_eq!(right.map_left(|x| x * 2), Right(123));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1939":{"id":"0:26:1939","crate_id":0,"name":"try_right","span":{"filename":"src/lib.rs","begin":[124,0],"end":[131,1]},"visibility":"public","docs":"Dual to [`try_left!`], see its documentation for more information.","links":{"`try_left!`":"0:25:1936"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_right {\n    ($expr:expr) => { ... };\n}"}},"0:283:2259":{"id":"0:283:2259","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[1215,4],"end":[1217,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"4:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13008:33365":{"id":"1:13008:33365","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:199":{"id":"0:257:199","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1120,4],"end":[1120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[273,0],"end":[300,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","rfind","advance_back_by","rfold","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:125:2446","0:126:2447","0:129:2448"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12979:33355":{"id":"1:12979:33355","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::rmatch_indices":"1:12982:33356"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43303:7709","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12952:29987":{"id":"1:12952:29987","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::split":"1:12946:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43171:7639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:33358":{"id":"1:12987:33358","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1115,0],"end":[1128,1]},"visibility":"default","docs":"`Either<L, R>` is a future if both `L` and `R` are futures.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:44062:150","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:257:199","0:258:1225"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:134:943":{"id":"0:134:943","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:1950":{"id":"0:147:1950","crate_id":0,"name":"is_left","span":{"filename":"src/lib.rs","begin":[172,4],"end":[177,5]},"visibility":"public","docs":"Return true if the value is the `Left` variant.\n\n```\nuse either::*;\n\nlet values = [Left(1), Right(\"the right value\")];\nassert_eq!(values[0].is_left(), true);\nassert_eq!(values[1].is_left(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2430":{"id":"0:51:2430","crate_id":0,"name":"size_hint","span":{"filename":"src/iterator.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2447":{"id":"0:126:2447","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[287,4],"end":[292,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:334":{"id":"1:12904:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12905:29960","`u8`":"4:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1160,0],"end":[1168,1]},"visibility":"default","docs":"`Either<L, R>` implements `Seek` if both `L` and `R` do.\n\nRequires crate feature `\"use_std\"`","links":{},"attrs":["#[cfg(any(test, feature = \"use_std\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3593:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Seek","id":"4:3593:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["rewind","stream_position","stream_len","seek_relative"],"trait":{"name":"Seek","id":"4:3593:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:269:2246"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5612:34067":{"id":"5:5612:34067","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:3125","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3125","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2434":{"id":"0:101:2434","crate_id":0,"name":"for_each","span":{"filename":"src/iterator.rs","begin":[203,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:459":{"id":"0:142:459","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[146,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2436":{"id":"0:105:2436","crate_id":0,"name":"nth","span":{"filename":"src/iterator.rs","begin":[218,4],"end":[220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2387:2457":{"id":"1:2387:2457","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[174,0],"end":[179,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"iter::FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8384:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:420:335":{"id":"0:420:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1263,0],"end":[1267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:325":{"id":"0:113:325","crate_id":0,"name":"any","span":{"filename":"src/iterator.rs","begin":[244,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12912:1989":{"id":"1:12912:1989","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:165":{"id":"1:13209:165","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"F"}}}},"0:143:461":{"id":"0:143:461","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[153,4],"end":[159,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12976:33354":{"id":"1:12976:33354","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::matches":"1:12973:2497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43375:7712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:7723":{"id":"1:12922:7723","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43129:7705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31759:237-0:381:1941":{"id":"a:1:31759:237-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:249:786":{"id":"0:249:786","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1095,4],"end":[1100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}},{"type":{"generic":"L"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12996:33363":{"id":"1:12996:33363","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:29710":{"id":"1:13019:29710","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:943":{"id":"0:88:943","crate_id":0,"name":"len","span":{"filename":"src/iterator.rs","begin":[169,4],"end":[171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2441":{"id":"0:69:2441","crate_id":0,"name":"find","span":{"filename":"src/iterator.rs","begin":[113,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["predicate",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:757":{"id":"0:380:757","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[48,53],"end":[48,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12982:33356":{"id":"1:12982:33356","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::match_indices":"1:12979:33355"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43321:7710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2431":{"id":"0:98:2431","crate_id":0,"name":"fold","span":{"filename":"src/iterator.rs","begin":[196,4],"end":[201,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:381:1941":{"id":"b:1:2385-0:381:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2387:2457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2666:786":{"id":"1:2666:786","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:550":{"id":"0:57:550","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[72,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2435":{"id":"0:58:2435","crate_id":0,"name":"last","span":{"filename":"src/iterator.rs","begin":[76,4],"end":[78,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:1940":{"id":"0:162:1940","crate_id":0,"name":"map_either","span":{"filename":"src/lib.rs","begin":[379,4],"end":[388,5]},"visibility":"public","docs":"Apply the functions `f` and `g` to the `Left` and `Right` variants\nrespectively. This is equivalent to\n[bimap](https://hackage.haskell.org/package/bifunctors-5/docs/Data-Bifunctor.html)\nin functional programming.\n\n```\nuse either::*;\n\nlet f = |s: String| s.len();\nlet g = |u: u8| u.to_string();\n\nlet left: Either<String, u8> = Left(\"loopy\".into());\nassert_eq!(left.map_either(f, g), Left(5));\n\nlet right: Either<String, u8> = Right(42);\nassert_eq!(right.map_either(f, g), Right(\"42\".into()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}],["g",{"generic":"G"}]],"output":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"M"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"L"}],"output":{"generic":"M"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[{"generic":"R"}],"output":{"generic":"S"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/iterator.rs","begin":[135,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"","id":"1:8075:179","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["nth_back","rfind","advance_back_by","rfold","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"super::Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:79:2446","0:80:2447","0:83:2448"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:341:1896":{"id":"b:1:2388-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2390:25911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12908:27683":{"id":"1:12908:27683","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:33350":{"id":"1:12915:33350","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12254:1609","crate::ops::IndexMut":"1:3158:2574","str::slice_unchecked":"1:12914:33349"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2447":{"id":"0:80:2447","crate_id":0,"name":"rfold","span":{"filename":"src/iterator.rs","begin":[149,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"Acc"}],["f",{"generic":"G"}]],"output":{"generic":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3126:142","args":{"parenthesized":{"inputs":[{"generic":"Acc"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}],"output":{"generic":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:29695":{"id":"1:12902:29695","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12132:2293"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:2220":{"id":"0:239:2220","crate_id":0,"name":"factor_second","span":{"filename":"src/lib.rs","begin":[1047,4],"end":[1052,5]},"visibility":"public","docs":"Factor out a homogeneous type from an either of pairs.\n\nHere, the homogeneous type is the second element of the pairs.\n\n```\nuse either::*;\nlet left: Either<_, (String, u32)> = Left((vec![0], 123));\nassert_eq!(left.factor_second().1, 123);\n\nlet right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\nassert_eq!(right.factor_second().1, 123);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},{"generic":"T"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2108":{"id":"0:196:2108","crate_id":0,"name":"factor_iter","span":{"filename":"src/lib.rs","begin":[634,4],"end":[642,5]},"visibility":"public","docs":"Borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n\nUnlike [`iter`][Either::iter], this does not require the\n`Left` and `Right` iterators to have the same item type.\n\n```\nuse either::*;\nlet left: Either<_, Vec<u8>> = Left([\"hello\"]);\nassert_eq!(left.factor_iter().next(), Some(Left(&\"hello\")));\nlet right: Either<[&str; 2], _> = Right(vec![0, 1]);\nassert_eq!(right.factor_iter().collect::<Vec<_>>(), vec![Right(&0), Right(&1)]);\n\n```","links":{"Either::iter":"0:189:923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterEither","id":"0:381:1941","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"L"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"R"}}},"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"L"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"R"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:174":{"id":"0:49:174","crate_id":0,"name":"Item","span":{"filename":"src/iterator.rs","begin":[48,4],"end":[48,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"L"},"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:2678:138":{"id":"1:2678:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31687:2531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:103:550":{"id":"0:103:550","crate_id":0,"name":"count","span":{"filename":"src/iterator.rs","begin":[210,4],"end":[212,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:13206-0:341:1896":{"id":"b:1:13206-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:44062:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:13202:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:13208:199","1:13209:165","1:13210:906"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"F"}}}},"0:258:1225":{"id":"0:258:1225","crate_id":0,"name":"poll","span":{"filename":"src/lib.rs","begin":[1122,4],"end":[1127,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Pin","id":"1:41405:1888","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}}],"bindings":[]}}}}],["cx",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::task::Context","id":"1:13400:117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::task::Poll","id":"1:44083:207","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:44062:150","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:335":{"id":"0:396:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1252,0],"end":[1252,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12946:2951":{"id":"1:12946:2951","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12584:1924","`DoubleEndedIterator`":"1:7966:131","prim@char":"4:12248:455","str::split_whitespace":"1:12924:26807","str::rsplit":"1:12952:29987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43153:2679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[990,0],"end":[1011,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"L"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"R"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:229:2206"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41394:2750-0:341:1896":{"id":"a:1:41394:2750-0:341:1896","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:1936":{"id":"0:25:1936","crate_id":0,"name":"try_left","span":{"filename":"src/lib.rs","begin":[113,0],"end":[120,1]},"visibility":"public","docs":"Macro for unwrapping the left side of an [`Either`], which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.\n\nSee also [`try_right!`] for its dual, which applies the same just to the\nright side.\n\n# Example\n\n```\nuse either::{Either, Left, Right};\n\nfn twice(wrapper: Either<u32, &str>) -> Either<u32, &str> {\n    let value = either::try_left!(wrapper);\n    Left(value * 2)\n}\n\nfn main() {\n    assert_eq!(twice(Left(2)), Left(4));\n    assert_eq!(twice(Right(\"ups\")), Right(\"ups\"));\n}\n```","links":{"`Either`":"0:341:1896","`try_right!`":"0:26:1939"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! try_left {\n    ($expr:expr) => { ... };\n}"}},"1:12932:29995":{"id":"1:12932:29995","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12248:455","self::pattern":"1:12584:1924"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417":{"id":"0:417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1263,0],"end":[1267,1]},"visibility":"default","docs":"Requires crate feature `use_std`.","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"L"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"::std::ffi::CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CStr","id":"1:39813:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Either","id":"0:341:1896","args":{"angle_bracketed":{"args":[{"type":{"generic":"L"}},{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:420:335"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"1:5910:3048":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:4976:4521":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:4065:14541":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5515:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:2440:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:38809:2586":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:3244:7433":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1547:5038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:844:14483":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:1590:7432":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:503:14451":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5385:3491":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:10161:6663":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:4029:14540":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13387:3694":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:6746:7536":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:38893:2575":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:517:4963":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:9258:7581":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13832:3797":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6609:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:4821:7152":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:10887:34868":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:651:3359":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:29788:8869":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:13438:3100":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:13064:3629":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:623:34877":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:481:32882":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:9207:7573":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13211:3663":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:0:2527":{"crate_id":17,"path":["object"],"kind":"module"},"1:22448:6107":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15769:4315":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:9299:6076":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:21331:14530":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:7706:3129":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7514:14482":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:1098:7142":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10915:34866":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43954:9146":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:1939:2648":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:12262:849":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:41344:2073":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:46355:6497":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7314:5811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:1142:7427":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:38942:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:22199:14268":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4876:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5477:5468":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:43073:7703":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:43675:7658":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:1824:7492":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:39655:7614":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:44083:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1840:8997":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4718:4512":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:45696:6435":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41336:2917":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:39711:7664":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15222:4149":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12399:7253":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:3249:34303":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4386:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:481:7112":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11841:7223":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:687:2917":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"14:0:2524":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5314:5388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:45438:6407":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:5891:7524":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7643:2703":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2049:6103":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5200:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13173:3648":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12201:7235":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4942:5247":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1516:7415":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:42541:7692":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:11168:6066":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11702:7205":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14111:3838":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:40283:3069":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:485:4941":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1929:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:7330:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6098:21648":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:9041:7571":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2205:7451":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8271:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:187:20729":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12887:7270":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:4587:4509":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:9362:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"11:396:8750":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:42287:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:598:34875":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12107:3523":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11051:7163":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:10872:7798":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:43041:7700":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1503:5013":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16223:4425":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:6441:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"8:0:2519":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:43919:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:12851:7269":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:2303:20759":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:21202:26776":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:40492:3032":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:43554:7716":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:22049:14274":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5083:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:8188:7405":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:41697:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:41502:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13485:3713":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:4395:7619":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12225:7237":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4864:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:21214:26776":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:12267:1722":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"14:214:7411":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1923:7435":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5400:5421":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4523:2940":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:45569:6414":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:38889:2573":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"11:1891:3130":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:16187:4418":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:8153:129":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:860:7274":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"4:12270:917":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:4543:2587":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:22227:14269":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"10:36:4851":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:8216:7406":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1723:5144":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5742:7275":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:41658:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3335:2579":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1883:2916":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:1903:7432":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:41064:9057":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6775:5746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5376:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:41992:2928":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7321:2746":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:45808:6439":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45470:6409":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:1607:7435":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12127:3574":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:32422:2548":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11853:7224":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:2203:7145":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6066:7290":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6706:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:42259:26140":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:2427:14517":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5296:5380":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:16079:4390":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:7485:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4108:7615":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2660:4458":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:2876:2769":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:3243:8064":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:9092:2916":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1741:6095":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"0:0:2045":{"crate_id":0,"path":["either"],"kind":"module"},"1:44075:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15616:4272":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:8098:3435":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:867:7138":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:11528:7544":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5052:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:30224:6127":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11324:7177":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5817:6536":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:8259:5972":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11016:7161":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7452:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:5607:7517":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:13528:3123":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7769:4659":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5037:4523":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6435:5593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:597:3488":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:6608:3050":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4985:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11825:7221":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:42753:7633":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:21967:14272":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:1054:7424":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2101:7449":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:12231:32184":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:22589:6124":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:8294:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:6360:6812":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:3406:2585":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13946:3814":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15701:4295":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:3246:8065":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5306:5384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:41353:2746":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:15206:4145":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:7926:7549":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:3669:3391":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12707:7268":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41032:6332":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"9:447:20634":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:21458:6104":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14235:3876":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12342:7246":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:12247:1105":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:10581:32870":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12658:9129":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5367:21645":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:9380:6077":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:43275:7642":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14079:3834":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:4330:7508":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:43171:7639":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:14475:3917":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:5846:7283":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12584:7158":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:578:4997":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14341:3890":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12362:7654":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"0:25:1936":{"crate_id":0,"path":["either","try_left"],"kind":"macro"},"4:4149:14549":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15582:4260":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7621:3141":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:40476:3028":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7366:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11557:7189":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:2443:14522":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:8288:5979":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:31846:2775":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:12621:3597":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:39962:3047":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:8029:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:3413:2685":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:5743:6812":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:9501:3205":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:9354:7543":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6907:3134":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:5623:2660":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:3321:2698":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:2033:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:46317:6490":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13844:3799":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"15:306:8741":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:1340:7424":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7966:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:491:7113":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:1063:7425":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3251:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:515:3362":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6698:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6447:5597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"0:341:1896":{"crate_id":0,"path":["either","Either"],"kind":"enum"},"4:11589:6648":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6880:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12695:7267":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:7355:4630":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5617:5524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7686:7390":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:10948:32785":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:4137:14546":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:673:2916":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:40483:3030":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8075:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4897:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40032:3061":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:9976:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12089:3572":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6962:4480":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:538:3364":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43943:6670":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:41395:2749":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:40009:7680":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:9131:6069":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:7907:14530":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15734:4302":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14912:4085":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:588:14465":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2788:4464":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4424:4504":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15383:4193":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8019:2449":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:2498:20711":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:4035:14539":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:31725:7660":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:4856:4517":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:491:4943":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:41736:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11063:7164":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:4839:14555":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:43112:6667":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2528:4452":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:45519:6412":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:6098:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7695:4656":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:43083:7704":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7473:4649":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:513:7141":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3737:2073":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:15:2255":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:11734:7505":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6504:6597":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10037:2931":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1593:5067":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:7043:14625":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:4668:14584":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10027:2927":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5415:5427":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:22613:8920":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:6581:7532":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:6181:32887":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:31743:2939":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:2379:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12599:7130":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:774:7415":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6636:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:7863:32868":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:8262:7559":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"1:10488:26109":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:6763:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:1603:7431":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14066:3833":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6670:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12043:7227":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7580:7388":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:10279:2921":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:39050:2578":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"14:202:3140":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1559:5046":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:909:7429":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:608:7117":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:941:2916":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:9225:32178":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:5445:14660":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:43470:7665":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:8259:4648":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5796:3059":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:8468:2679":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:11524:7187":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:12269:1710":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:22185:14530":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"4:8137:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:44116:3101":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7928:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:1354:7428":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:4802:14566":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:1585:3128":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:43407:2675":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:9658:757":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:10170:3492":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:3871:3128":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15957:4345":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5219:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4830:4516":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:45787:6438":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11743:7208":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:5277:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:12260:861":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:3329:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11688:7204":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7144:21655":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:6760:7540":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"4:3018:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12900:3618":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:10877:7553":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:8741:3166":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:437:3442":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:43139:2678":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15400:4197":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:12253:1577":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:3934:7506":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:880:7416":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:11837:7548":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:31736:7661":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"11:1910:7433":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:12246:404":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:15748:4309":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14723:3941":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:8282:5978":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:44185:7736":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:7356:3053":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:5158:7512":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:33215:2558":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:621:2650":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:3264:7149":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11661:7202":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14752:3961":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3791:2279":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14529:3923":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12647:7263":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:6667:2073":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6471:5606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6456:21651":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:1887:2073":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:43778:3147":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7132:7366":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13738:3779":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:4266:14564":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:40041:3070":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"9:0:2520":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11313:7175":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11242:7172":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:10686:3540":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:21882:14188":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:356:7480":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11898:3536":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:43461:7614":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:10999:6067":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"4:6305:7526":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11730:7207":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:2338:4437":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6412:21650":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:12272:1320":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:15281:4163":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"0:26:1939":{"crate_id":0,"path":["either","try_right"],"kind":"macro"},"16:6620:4548":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:2554:34843":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:43737:7728":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7633:34853":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:4482:7510":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:4467:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6900:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5686:4470":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7891:3042":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12238:7238":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:39672:6658":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4965:5255":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4952:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11256:7173":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:45548:6413":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12494:3590":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:40023:3060":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:299:7786":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10534:34870":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:46119:6478":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:9674:31650":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:4771:4514":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10317:3497":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13437:3701":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11634:7200":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5064:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10905:7160":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:33078:2556":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2883:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:2274:2239":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:7467:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:41319:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4811:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:7575:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:11511:32865":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11227:7171":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:4920:14554":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10819:2916":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:13276:2537":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:46302:6489":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"15:394:20750":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11915:21816":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10137:21695":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:45231:6388":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4062:4502":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:2355:4439":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11269:21748":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:2918:2772":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:45356:6403":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:42953:7695":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:10911:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:7473:3026":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:3660:2917":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:7804:7610":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6263:7295":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:11606:7800":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:5211:7471":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:726:3382":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9995:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:7428:6633":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6758:4571":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:3575:1895":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:7348:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:45923:6474":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:39800:6328":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7597:7477":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10251:3495":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:8328:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5250:5355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5914:6544":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:46291:6488":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:11534:7607":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:22087:14275":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:9143:14622":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:9339:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3126:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1621:5092":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4959:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2684:4459":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:523:4966":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:31848:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:1574:2916":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:9253:7580":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10350:3498":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:15342:4179":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:21734:14192":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:8535:7795":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10954:21729":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2756:6001":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11443:3528":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:2477:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:11404:7606":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:5008:923":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:7098:7363":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13766:3786":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:11056:32876":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:45079:6373":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:700:2073":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10661:7156":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11567:7190":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11128:3481":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:7979:14470":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:2151:7425":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:5538:7516":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7516:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:2287:34295":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:7306:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2607:2532":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:39070:6197":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2640:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:6948:4479":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13146:3640":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5636:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1189:8759":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:4087:14543":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:2469:3128":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:31817:2588":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:31729:4648":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:10218:3494":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:8341:5991":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:12034:8371":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:3475:4495":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:8175:7402":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:10901:6006":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:11130:7643":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7389:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1153:8758":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:15039:4106":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:39829:26320":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:41453:2916":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:4843:14558":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:7887:3043":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:41894:7632":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11214:7170":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:43712:7727":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43873:7816":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:15151:4131":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:6388:14626":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:1582:7430":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:43726:9136":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2628:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:39057:6196":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:11799:7216":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:46148:6479":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8155:7401":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15301:4170":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:10939:32787":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12189:7234":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12150:3575":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:12264:836":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:4992:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11595:3531":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13089:3630":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14545:3925":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:279:34488":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:12251:1223":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:6417:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7559:7387":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:43747:7732":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:6940:3136":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:14091:3835":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12969:3621":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:2382:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:6540:3130":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7497:4650":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7429:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6729:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:38980:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:3486:2660":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:4308:2916":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11042:7162":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:43123:3149":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:10930:2674":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:14587:3932":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10524:7154":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8791:2916":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:0:2526":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6597:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:21339:14189":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16032:3667":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:41816:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:6692:14617":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1639:5104":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10284:2922":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"7:78:20627":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9984:21717":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6542:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5225:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:44124:3102":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4155:9016":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12371:3619":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:10920:129":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"11:811:3128":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:39781:9042":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5290:5377":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:44137:3099":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:6768:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:8462:2678":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:4800:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:37486:2564":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:5750:7518":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6398:4469":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:3584:32762":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:1968:2649":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:31816:2711":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:15822:4324":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10671:34865":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:16249:4429":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:43257:7641":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11293:21749":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:6813:6600":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:1575:7446":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3237:2916":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:7910:21659":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7085:7360":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12768:21699":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:725:14530":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:4870:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:45335:6402":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7690:3128":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:6082:6812":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13785:3791":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15176:4139":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:44173:6368":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7111:6615":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:96:8730":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6811:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:43054:7701":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5031:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:22432:7807":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13473:3710":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13363:3690":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:39991:3057":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:832:7429":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:8392:2703":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:5347:4527":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14325:3888":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:13473:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5960:6551":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:2124:7367":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11647:7201":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:123:7785":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2572:4454":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:9114:6068":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10039:2932":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11537:7188":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:856:7420":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10666:14530":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11605:3532":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:883:7423":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15426:4203":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6802:7346":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:2326:7424":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:32236:2549":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:5864:7523":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:39911:3044":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:80:8729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:22496:6111":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5502:5477":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:32960:2555":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1463:2916":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:8351:5993":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15356:4186":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11023:7639":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1771:1261":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:8093:4707":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"9:392:20635":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:44065:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13877:3807":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:507:3359":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9497:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:1107:7426":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:3473:7150":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:41210:7507":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:42971:7697":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13855:3800":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6442:6594":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:44062:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:8265:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5260:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:42510:2923":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:8073:4706":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2438:4448":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:45388:6405":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:4250:8761":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:4738:5854":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:3240:8013":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:3597:7151":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7528:7383":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:4841:14557":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10473:26692":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:12323:7652":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6491:5619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:21278:14530":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:4120:7616":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:7585:3177":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:43303:7709":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13526:3723":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:1885:3205":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:11240:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:6562:5660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:21246:26772":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12388:7252":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:45713:6436":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11621:7198":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14868:4054":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:40469:7628":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:6927:4587":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:9100:7572":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:4736:5852":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:3536:2668":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5122:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2374:4445":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6782:21653":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:43869:7815":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1671:5122":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:867:7415":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:43583:7724":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:1826:7493":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:6629:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:4141:14547":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15410:4200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2764:2653":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:45096:6376":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:40075:3063":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"15:288:8737":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7509:7375":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:39844:3179":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:924:14485":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:39020:2576":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14575:3585":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:21351:6104":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:9212:117":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5598:5510":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4031:2660":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:15434:4204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5423:5432":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12454:7256":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:1007:7367":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5719:2660":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46177:6480":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:3518:1892":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:11026:21731":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12300:21840":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15760:4311":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12485:21842":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"13:109:34845":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3354:26118":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"15:327:20744":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:645:14467":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"3:0:2517":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:39683:26173":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3283:34304":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:5347:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:13292:3678":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"9:424:20636":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:828:7441":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:178:20701":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:9058:6065":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:9344:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"9:502:4911":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2878:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:3323:2699":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"15:0:2525":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5546:5490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7823:21658":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:2140:7424":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:4279:8763":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:5061:2660":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:35610:2563":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"0:24:1922":{"crate_id":0,"path":["either","for_both"],"kind":"macro"},"18:113:8733":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2644:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15445:4208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1707:5139":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3278:7432":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6524:5632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11764:7211":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:532:4972":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1663:5121":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:21192:2787":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:21333:14186":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15313:4171":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14189:3866":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:754:7137":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:8181:2690":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:2936:20787":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:1040:7367":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:39767:7668":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12597:3596":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:40124:3067":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3119:2569":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7014:21654":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:7378:7476":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5472:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13999:3823":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5336:5393":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:9807:21702":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5075:4524":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:6419:3071":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5361:5399":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:12259:717":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:8492:14537":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:12249:1755":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:542:6794":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13024:21723":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:30239:2937":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10982:21730":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7428:21656":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4824:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:8583:5839":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9175:3146":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:9047:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:15126:4122":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:4802:4515":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:13224:26866":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:533:14455":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:15624:4273":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:659:7118":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:7398:34287":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:32608:2551":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:3123:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12557:3512":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:8164:7555":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:10020:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:10911:7636":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7379:34860":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7549:7386":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4743:4513":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:7537:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:44146:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"0:344:182":{"crate_id":0,"path":["either","Either","Left"],"kind":"variant"},"1:42271:4683":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:31687:2531":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:11694:7504":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:8808:3169":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:39931:3045":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"7:31:20620":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14246:3878":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5927:6545":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5643:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6480:4471":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15992:4375":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5002:5276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:22471:6652":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:39243:8999":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:10720:34871":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:8014:7551":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:564:4989":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"13:226:4844":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6353:4538":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:7546:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:11466:4908":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:6738:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:6650:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5536:5484":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:39940:2676":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:589:3367":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14847:4044":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11674:7203":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11075:3512":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9781:21712":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6746:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:8546:7568":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:4468:4505":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:4500:34490":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:4073:3130":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:45601:6416":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:12252:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:12929:3619":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:8012:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13986:3822":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12408:3584":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:39748:7666":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:5912:3130":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6714:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:39904:2707":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:8475:2675":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:5400:3492":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12328:7242":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:43321:7710":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:45502:6411":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14038:3828":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:13418:3103":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15214:4147":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:10025:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:13674:3750":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5329:5392":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:11561:6091":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7359:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6991:34852":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7075:34497":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:41413:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:42962:7696":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:21447:14530":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10044:21718":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7602:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6120:21649":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:3740:34488":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12808:3615":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:8173:7556":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:7844:32877":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:38230:2568":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:1676:8368":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1565:5048":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:12265:1734":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:5244:5353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6427:7327":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15418:4201":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6433:7328":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:4641:4511":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:6749:34488":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3108:1887":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:16151:4409":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:46090:6477":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:2708:4460":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7529:3175":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13046:3626":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:1066:20715":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:46198:6481":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5466:5463":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6543:6599":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:3036:34148":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:15778:4317":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"9:357:20649":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:16269:3699":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:43893:7821":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15569:4254":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:2966:2572":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:40525:3038":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:12199:6649":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:22540:26157":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:3329:4494":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:43099:3150":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15463:4211":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4787:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:10982:32186":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:30218:3121":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10828:34869":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:872:7139":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"4:12261:843":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:10390:9100":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6621:5693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:43760:6668":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10018:21698":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5382:5409":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7456:2073":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:39813:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:41580:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:31759:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:8159:7499":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2323:20785":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5665:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13753:3784":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:12254:1609":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"18:735:25899":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:43375:7712":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12530:7261":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:41176:26321":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2878:4468":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:9194:6072":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:11755:7506":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7703:3029":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:42313:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:42502:7690":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5581:5503":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:40000:3058":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12100:9087":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5756:7279":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10029:2928":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:13723:3775":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:256:7138":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10710:7157":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7168:6073":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:15646:4279":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:3842:4499":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4273:6814":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:8401:2705":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:6505:5630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:45049:6369":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:4127:14545":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10997:3509":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6049:14677":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13797:3793":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:4590:14567":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12671:7265":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:479:4938":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:21280:14190":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:531:7114":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15023:4103":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14298:3884":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:23064:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:2591:2688":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:9279:32180":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5781:4474":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:13400:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:10035:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8393:3041":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:4734:5850":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:10848:7596":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:43901:6085":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:40:3127":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6028:7471":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:1496:5010":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:521:25901":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11189:3516":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:8108:7553":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:10538:7571":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:294:3125":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2768:4463":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4924:5239":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:9669:7552":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:689:7127":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:9662:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:2175:21774":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:951:7423":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14855:4047":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:22073:14530":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:8487:7567":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:718:3379":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6756:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:7857:4668":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14414:3903":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12278:7241":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4891:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6940:4589":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:7412:2073":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:6815:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14025:3826":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:2637:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:2423:2073":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:710:7413":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13553:3732":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:41775:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2401:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:46236:6483":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4502:4506":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1628:5096":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:1975:744":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"5:669:7440":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:11823:32203":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:42991:7699":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:3778:4497":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:16212:4423":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:3806:7449":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15333:4178":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2297:8983":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:22504:6112":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5046:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:5857:7519":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:1887:7495":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:12258:701":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:11341:7180":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4979:5263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:102:7784":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6821:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11773:3601":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:8481:7565":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4352:4503":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12792:3456":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:16093:4394":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10284:3496":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:10289:7587":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:31760:2710":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4932:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5995:6555":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1325:7425":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11715:7206":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:42013:2930":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4316:2938":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1653:5115":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:12248:455":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:7348:2073":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5266:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13375:3693":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:8528:7507":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:698:7128":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:11222:6086":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:45210:6387":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:7250:8444":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"14:7:7407":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:39755:9041":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:2925:2774":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12422:7254":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7604:4486":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4885:5218":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:15799:4320":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:1896:3128":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7799:4476":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12362:7251":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5236:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:45846:6441":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11662:7646":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:6874:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:41478:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5344:5394":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10185:3493":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11102:7167":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6460:5598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:40134:3052":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22311:6817":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:3014:20788":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10236:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:4:1186":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:39874:3195":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7356:7475":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:41396:3092":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:5722:4475":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:9218:7575":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6379:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14503:3921":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4459:7804":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:3614:4496":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9755:21694":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16069:4389":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:6617:6813":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5390:5414":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:9084:6067":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:8317:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6664:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7388:6632":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:7052:7357":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6619:7805":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:7539:4483":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6300:7312":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:2037:7144":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15197:4144":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:581:2787":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:5070:14597":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:12433:3585":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1648:2660":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:46393:6499":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43569:7721":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5449:14661":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13308:3682":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11116:7642":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6895:4583":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:9684:27046":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8562:6047":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:9824:2948":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:11671:8766":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:2548:4847":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:414:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:7100:34495":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15473:4216":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:33388:2559":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14260:3880":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:2279:2243":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:7061:4597":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:43028:3044":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:41619:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:2499:1890":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:12263:855":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:40259:2677":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:22582:7810":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12286:7649":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:1809:665":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:45417:6406":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:5189:7512":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1525:7416":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1494:2073":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:2304:7367":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:42232:6347":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6689:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:7755:4478":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1534:7429":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:45306:6393":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10843:2917":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:45825:6440":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:8197:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7357:3054":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"14:160:7407":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:868:14484":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:42006:2929":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:2418:4447":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:1072:7428":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5671:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7421:8768":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14212:3875":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:11155:6065":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:9266:6073":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13344:3689":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:2838:4466":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:46245:6484":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12213:7236":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:559:4987":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13412:3699":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:42242:2937":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:2569:3126":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8431:29658":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4966:2706":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"18:0:2528":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1062:34488":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2712:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:41384:2747":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2944:2550":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12659:7264":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:22417:6106":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:3593:1893":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"13:0:2518":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5557:5496":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13187:3649":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11629:7645":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:41461:2917":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"14:220:4797":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5483:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:10399:2678":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7937:2427":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:22602:6653":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:8703:3164":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:12543:7262":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:5370:5405":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6657:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10950:7637":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:2728:4461":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:32842:2553":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:6471:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"14:31:7407":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4132:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:13455:3709":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:918:7414":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5146:5315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:5678:14605":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:4837:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:150:6792":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:2961:2571":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:22555:26152":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:945:7422":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:21229:26778":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:4148:2917":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:10429:115":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:10439:3501":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:12215:32117":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:9437:32176":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11510:7186":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:9327:7529":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:21456:14187":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:16259:3694":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:3095:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3341:2581":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5283:5375":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13424:3700":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:9322:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7656:21657":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:2453:14527":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:3366:2695":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10573:34864":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:3028:5998":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13774:3788":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5528:5479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"14:165:20722":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:7129:32872":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:2634:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:3025:6800":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1566:20716":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5445:5448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:8267:2692":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:261:7139":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3018:2561":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6678:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:10959:7551":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:3364:2694":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:45111:6377":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11865:7225":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:9173:14623":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2295:8982":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:2471:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:2307:7794":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6915:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:2030:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:1051:7425":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:9349:7542":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:8726:3165":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5181:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9737:21696":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:14131:3839":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4560:4508":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1585:5062":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:765:25900":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12993:21722":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:25464:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15596:4266":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:12255:1695":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:43436:7715":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:8306:5982":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7984:5954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11755:7210":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15608:4269":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7570:4484":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12818:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:12572:3523":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:497:4946":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:16165:4412":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14271:3881":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4747:9035":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12508:3594":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14284:3883":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7631:3142":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:635:3378":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:328:7789":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15138:4125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:40507:3034":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:5401:34488":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13594:3743":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:38905:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:42734:6358":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:13509:3715":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6519:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:1596:7433":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:10890:6642":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:10031:2929":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:2674:26692":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5677:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8384:2450":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:38845:2583":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:21729:14530":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"4:859:2073":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"10:44:4852":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13814:3796":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:362:7482":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:33019:2554":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7503:3126":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:2525:5995":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:30599:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:8202:4490":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6648:7341":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1478:2917":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:4238:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8387:2918":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:4410:7509":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:586:5001":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:217:7439":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:46256:6485":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:3899:4500":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:10967:7517":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:42549:7693":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:11062:32879":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:563:3366":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:11045:32884":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11115:7168":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:16050:3677":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12056:3569":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11706:8995":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2458:4449":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:15273:4162":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:5005:14591":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:1862:7494":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:40085:3064":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:5769:7282":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14356:3894":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:10446:31651":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:41250:6343":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40110:3066":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:15249:4153":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:6689:7533":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:9071:6066":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:9246:7579":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7618:4652":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6665:21652":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:1724:34488":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:16138:4403":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:8226:21660":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:22099:26415":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:2696:2681":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:6577:3030":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:37651:2567":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:2195:14451":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14489:3918":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:4986:7153":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:43600:7725":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6606:7339":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:45277:6391":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7339:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:43063:7702":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:1169:34150":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2612:4456":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:40:3664":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14463:3916":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6721:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14788:3992":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11392:7182":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:43129:7705":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:545:4979":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:5522:7515":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:4799:14593":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:43897:7822":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:39774:7669":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:46370:6498":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:41405:1888":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:45263:6390":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7648:7389":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"0:347:229":{"crate_id":0,"path":["either","Either","Right"],"kind":"variant"},"17:1207:7143":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6026:6561":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:4093:14544":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:2542:4846":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:22364:6818":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:41328:2916":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:1544:7413":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6872:6614":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15190:4142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:8540:14565":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:8425:1894":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6231:7292":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1692:5132":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:903:3128":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:45758:6437":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:7461:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4909:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15078:4115":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5160:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:6257:3103":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:12266:1716":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:11583:7196":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:43648:7726":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:8655:3163":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:15289:4164":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10612:7155":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11877:3534":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14516:3922":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:43533:9135":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10759:3523":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12724:21720":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10033:2930":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6976:4592":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:46276:6487":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:3832:7505":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:42902:7694":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12132:2293":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:893:3130":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15102:4120":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15116:4121":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11405:7183":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4103:34488":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14436:3914":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7924:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:9158:14621":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6532:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11811:6092":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:3158:2574":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:2808:4465":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:15678:4294":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1686:5131":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:8413:2674":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:12273:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:1854:6096":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:482:20633":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:39721:6659":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:2188:130":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:16176:4417":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:12268:1728":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:9064:2748":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12318:3582":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11089:7166":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10877:7159":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:43865:7814":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43221:7708":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7306:34861":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:44162:6674":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:12271:1794":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"6:1680:5128":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2383:2916":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:7813:7391":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2888:2770":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:2271:7498":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"11:2403:2917":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:43881:7818":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:14449:3915":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:10268:7494":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15368:4189":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9886:21714":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:2441:14521":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:2478:4450":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:3279:2696":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:613:34876":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:41010:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:6407:14627":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:5014:14592":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:430:8752":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6317:7315":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11812:7219":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6160:20758":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:15456:4209":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13972:3542":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:39971:3055":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10769:34863":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15266:4161":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43885:7819":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:22140:14276":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:16198:4419":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"11:364:8748":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5039:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2929:2547":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4916:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10244:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:403:7140":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5307:4526":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:8781:3167":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"9:330:4888":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:2369:7438":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:2606:14530":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6574:4489":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:3129:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:21880:14530":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:38960:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:31761:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:836:2916":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:40062:3049":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13538:3726":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13272:3677":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:10287:7588":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:3304:7435":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:22011:14273":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:45487:6410":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4469:2939":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:15521:4253":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:5415:130":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:45586:6415":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7446:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:4258:8762":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:726:8907":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:41232:6342":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:10646:2694":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:5488:7513":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:8118:7396":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14311:3885":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14372:3895":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:2269:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:10676:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11142:3523":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7006:7347":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5457:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:45164:6384":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6385:4541":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:538:4975":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1490:5007":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:8125:6641":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:7999:14504":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:6342:34859":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:2234:7148":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:3603:1891":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:4228:8760":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:30186:3120":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:12610:9122":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12824:21721":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:43452:7666":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:3032:34149":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:1863:6099":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12544:3152":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12516:7259":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:16105:4396":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:3925:4501":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:40517:3036":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:45373:6404":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:8579:7570":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3324:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:5502:7514":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:6614:7806":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12478:3589":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15720:4300":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11467:3530":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10068:21701":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6079:6564":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5624:5527":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:16235:4428":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6047:7284":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:45646:6433":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:4614:4510":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7558:26320":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:3829:7504":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10419:3500":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:7412:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2394:4446":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:553:4984":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4390:7618":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:9415:7584":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:39740:7614":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13252:3667":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3647:2916":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:45292:6392":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:43445:7655":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:7951:3540":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:46219:6482":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2631:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:41092:6341":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2998:4491":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:3270:7434":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5102:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9977:1895":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:43889:7820":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:1160:7428":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:45181:6385":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:1602:7434":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:39000:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:8103:7552":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6494:7329":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5212:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1699:5135":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:41198:6666":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:22482:26307":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:7561:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7448:2073":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:11270:6087":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:12220:14472":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:11575:6646":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11144:7644":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:39698:6327":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:33561:2560":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:22:772":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:5736:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5802:21646":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:2425:6098":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:1828:3128":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:41394:2750":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1535:5029":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:4897:7511":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6634:4477":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:914:7413":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6278:7297":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:5006:4522":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6788:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5489:5471":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:6335:7324":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:39856:3181":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:10643:2698":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13606:3746":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:11830:7548":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:21770:26782":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1526:5023":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6749:7345":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:11205:6077":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:2281:642":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:2548:4453":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4907:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:22232:14267":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:8247:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:706:7130":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11061:7640":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15376:4192":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3603:3130":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:3020:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:41999:2927":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6586:34488":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:41855:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:473:4935":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:13251:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11419:3523":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4268:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7590:4485":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:6408:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13235:3664":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5112:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:14147:3844":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:1581:3130":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:16121:4401":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:5700:4473":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:434:8753":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:8115:6006":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:39818:3180":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:875:7422":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5630:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:837:7417":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6409:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:41048:6334":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:8257:7558":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:643:3359":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:45064:6372":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:1309:7367":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13581:3742":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4242:7617":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13325:3684":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3396:3128":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:9671:21697":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15931:3649":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14386:3897":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5174:5317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3077:2582":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:2660:2689":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:3767:14538":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14933:4090":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:2231:7193":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:12289:3577":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:45196:6386":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12605:9123":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:4514:9025":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:14968:4091":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:42494:2924":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11367:3512":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:800:3130":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:8445:2676":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:41541:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:5708:3134":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:4568:14566":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:15058:4107":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12353:7250":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14177:3863":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:3494:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:13015:3585":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14402:3901":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:10355:7914":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12949:3582":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:849:2917":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5134:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:8006:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14012:3825":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:8455:2677":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11179:32783":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7741:4488":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2508:4451":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:10640:2696":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:43203:7707":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:46265:6486":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:928:14483":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:8797:3168":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:4531:4507":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:4079:14542":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:39953:3046":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:21260:26786":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4928:26743":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11166:3514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:15010:4098":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"12:0:2523":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6532:7330":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:42531:3164":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:10988:7638":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2636:4457":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:787:7416":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5107:4525":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5352:5395":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:7584:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14986:4096":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2748:4462":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12683:7266":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11788:7215":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:465:4930":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9916:21715":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11574:7193":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14876:4055":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:45128:6378":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:1025:7424":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5415:4528":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7888:7392":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5653:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:22154:8982":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:12443:3588":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:46340:6496":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:21758:6105":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:31750:7662":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:14051:3830":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:5936:7525":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12464:21841":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"9:53:20652":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:5675:5760":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:637:7485":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:922:7417":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:39884:3194":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:2562:4849":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:6273:32886":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:8136:7398":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:46432:6514":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:12346:7653":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:39981:3056":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40053:3062":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42981:7698":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7368:3130":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1555:7414":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:43427:7714":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:557:7484":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7397:34862":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:10456:26721":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:8301:4719":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3314:2577":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2902:20786":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:42334:2258":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"10:0:2521":{"crate_id":10,"path":["adler"],"kind":"module"},"1:43153:2679":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:12863:3617":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:37541:2565":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42296:2937":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:12584:1924":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:4437:34490":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:680:7125":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:2112:7450":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5565:5498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15324:4175":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:43877:7817":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:9492:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:46045:6476":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3369:2584":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:5235:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:1580:5060":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:42749:7813":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:742:7414":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13959:3817":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6588:7331":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15944:3663":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:3026:34153":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:37596:2566":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:7399:8764":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:10867:7796":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13568:3738":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5831:6539":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:2352:7425":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:14994:4097":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:41469:2073":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:1734:641":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:5014:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13399:3697":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5588:5505":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:39732:7665":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:43357:7711":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:11187:6085":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:4940:4520":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5191:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1485:5005":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:40094:3065":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7545:3178":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:46000:6475":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:7644:32123":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"18:670:7124":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10622:34867":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12076:7229":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:30626:2787":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11354:7181":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:8605:6048":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12590:3146":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:7931:6005":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13899:3808":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9679:29621":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:3281:2697":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12251:7239":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:21231:26781":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:9398:7583":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14599:3939":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:1578:2073":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12264:7240":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:42519:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15655:4281":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:8300:5981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:9858:21713":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:6930:3135":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:45675:6434":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11547:3434":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15635:4278":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:40269:3068":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6466:4545":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4174:9017":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:2087:2279":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13116:3636":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2934:2552":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3029:3386":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:12116:7647":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:2985:7503":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11102:7641":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6478:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12175:7230":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7251:2976":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:2443:3130":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:3196:4436":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4570:2941":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2723:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:11600:7799":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:3456:2704":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:8638:14601":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:351:8745":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:5553:115":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:15814:4321":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10818:7158":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:33734:2562":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13922:3813":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:0:1601":{"crate_id":4,"path":["std"],"kind":"module"},"1:2956:2570":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2592:4455":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11493:7184":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11153:7158":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:8554:7565":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:7293:8370":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:40498:2704":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:9108:2073":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:41270:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:7793:3488":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:640:7487":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:39661:7663":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:9335:2660":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:12400:7636":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:22520:26150":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5320:5389":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:2736:2691":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4882:4518":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:1917:7434":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:45248:6389":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:22101:8982":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:43417:7713":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10155:3491":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:30250:26177":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:4724:14544":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5863:21647":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:2536:4845":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9938:21716":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14977:4095":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12030:7226":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:2234:7791":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14560:3929":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:21248:26784":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15092:4119":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:1446:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7727:4487":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6560:4472":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:7908:6004":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2854:4467":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6849:6612":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7573:3176":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11497:7185":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:13202:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:573:3359":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5436:5442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7339:3124":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:38920:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:10868:2679":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:939:7420":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13497:3714":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:45455:6408":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5897:4531":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:8189:2279":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10092:21719":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1510:5015":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:1087:34842":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4913:4519":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2435:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:3810:4498":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15390:4194":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:45143:6379":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15168:4136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:570:4992":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15836:4327":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4971:5258":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:7993:14471":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"11:0:2522":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"9:238:3164":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1517:5018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:6153:2660":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:8253:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5020:5285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:43002:6359":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:32901:2557":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}