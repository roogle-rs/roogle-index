{"root":"0:0:2519","crate_version":"1.0.86","includes_private":false,"index":{"1:14006:33943":{"id":"1:14006:33943","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13907:31638":{"id":"1:13907:31638","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14018:33559":{"id":"1:14018:33559","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:40012"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3091:1852":{"id":"1:3091:1852","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:787:2939":{"id":"4:787:2939","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13903:31636":{"id":"1:13903:31636","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:2511":{"id":"0:532:2511","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[127,4],"end":[150,5]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:149","crate::anyhow":"0:353:2519"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13974:33933":{"id":"1:13974:33933","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::rmatch_indices":"1:13977:33934"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44940:3961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:149":{"id":"0:479:149","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:33020:248-0:479:149","a:1:42880:3486-0:479:149","a:1:3335:3674-0:479:149","a:1:3300:260-0:479:149","a:1:42881:10642-0:479:149","a:1:33079:3676-0:479:149","b:1:3081-0:479:149","b:1:3084-0:479:149","b:1:2772-0:479:149","b:1:3087-0:479:149","b:1:3077-0:479:149","b:1:3943-0:479:149","b:1:3092-0:479:149","b:1:2775-0:479:149","b:4:5975-0:479:149","0:219","0:221","0:225","0:288","0:292","0:294","0:286","0:213","0:290","0:223","0:216"]}}},"0:207:3238":{"id":"0:207:3238","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13916:8448":{"id":"1:13916:8448","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44760:3568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13953:33931":{"id":"1:13953:33931","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13578:3574","str::split":"1:13941:3054","prim@char":"5:12456:490","str::split_terminator":"1:13950:33930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44858:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14022:33944":{"id":"1:14022:33944","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5147:33944"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45107:3966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:149":{"id":"1:3095:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32944:2974","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:42881:10642-0:533:2596":{"id":"a:1:42881:10642-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42881:10642","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13988:33939":{"id":"1:13988:33939","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13604:3942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3084-0:479:149":{"id":"b:1:3084-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3086:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:2734":{"id":"0:179:2734","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:788:27898":{"id":"4:788:27898","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:2596":{"id":"0:533:2596","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2509"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:33020:248-0:533:2596","a:1:42880:3486-0:533:2596","a:1:3335:3674-0:533:2596","a:1:3300:260-0:533:2596","a:1:42881:10642-0:533:2596","a:1:33079:3676-0:533:2596","b:1:2804-0:533:2596","b:1:3081-0:533:2596","b:1:2772-0:533:2596","b:1:3087-0:533:2596","b:1:3077-0:533:2596","b:1:3943-0:533:2596","b:1:8442-0:533:2596","b:1:3092-0:533:2596","b:1:2775-0:533:2596","b:4:784-0:533:2596","0:33","0:35","0:31","0:26","0:536"]}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3548:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:653"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:118","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:32944:2974","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2510","0:74:2708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13991:33940":{"id":"1:13991:33940","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14000:33941":{"id":"1:14000:33941","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13987:33938":{"id":"1:13987:33938","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:494":{"id":"0:538:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14019:2995":{"id":"1:14019:2995","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5149:2995"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45089:3964","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3213":{"id":"0:203:3213","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13890:2920":{"id":"1:13890:2920","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13901:2934":{"id":"1:13901:2934","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42789:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3535:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:262","0:218:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:857":{"id":"0:215:857","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:786:2951":{"id":"4:786:2951","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3092-0:533:2596":{"id":"b:1:3092-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:2708":{"id":"0:74:2708","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3576:154","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13933:3891":{"id":"1:13933:3891","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42789:202","prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14009:3033":{"id":"1:14009:3033","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13539:148","`FromStr`":"1:13538:3571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13538:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13538:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:857":{"id":"0:287:857","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13894:33925":{"id":"1:13894:33925","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13892:33924"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:533:2596":{"id":"a:1:3300:260-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2775-0:479:149":{"id":"b:1:2775-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:27897"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3086:857":{"id":"1:3086:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14012:33551":{"id":"1:14012:33551","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40688:10555","Self::is_ascii":"1:14011:33550"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40688:10555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5742:33703":{"id":"4:5742:33703","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:14015:33555"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3087-0:533:2596":{"id":"b:1:3087-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13888":{"id":"1:13888","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13889:1024","1:13890:2920","1:13891:9992","1:13892:33924","1:13894:33925","1:13897:2937","1:13898:33926","1:13899:350","1:13900:3013","1:13901:2934","1:13903:31636","1:13905:31637","1:13907:31638","1:13909:33927","1:13910:33928","1:13911:32400","1:13912:32401","1:13913:10252","1:13914:32404","1:13916:8448","1:13917:8459","1:13918:2942","1:13919:10254","1:13920:10251","1:13921:8814","1:13922:33929","1:13923:9896","1:13924:29926","1:13927:3266","1:13930:32415","1:13933:3891","1:13937:3924","1:13941:3054","1:13944:10253","1:13947:32407","1:13950:33930","1:13953:33931","1:13956:32409","1:13959:32411","1:13962:32413","1:13965:32414","1:13968:3395","1:13971:33932","1:13974:33933","1:13977:33934","1:13980:33935","1:13982:33936","1:13984:3272","1:13986:33937","1:13987:33938","1:13988:33939","1:13991:33940","1:13994:2956","1:13997:32416","1:14000:33941","1:14003:33942","1:14006:33943","1:14009:3033","1:14011:33550","1:14012:33551","1:14013:33553","1:14014:33554","1:14015:33555","1:14016:33557","1:14017:33558","1:14018:33559","1:14019:2995","1:14021:10571","1:14022:33944"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42880:3486-0:479:149":{"id":"a:1:42880:3486-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42880:3486","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:533:2596":{"id":"b:1:2772-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2774:2858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:538:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:479:149":{"id":"b:1:2772-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:2858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:2978":{"id":"0:53:2978","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"4:5977:1825":{"id":"4:5977:1825","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1208","0:179:2734","0:196:2510","0:198:2045","0:199:2509","0:200:3203","0:201:990","0:203:3213","0:205:3210","0:207:3238"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:5975-0:479:149":{"id":"b:4:5975-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5973:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5977:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:3027":{"id":"0:351:3027","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:149","crate::anyhow":"0:353:2519"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13899:350":{"id":"1:13899:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13900:3013","`u8`":"5:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13909:33927":{"id":"1:13909:33927","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12462:1765","str::slice_mut_unchecked":"1:13910:33928","crate::ops::Index":"1:40335:3514"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14016:33557":{"id":"1:14016:33557","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:40012"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:3288":{"id":"0:325:3288","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:1:3087-0:479:149":{"id":"b:1:3087-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3090:149","1:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3096:1850":{"id":"1:3096:1850","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1208":{"id":"0:25:1208","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14021:10571":{"id":"1:14021:10571","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5150:10571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45098:3965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:351":{"id":"0:295:351","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5724:3585":{"id":"4:5724:3585","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8529:2971","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:1024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13950:33930":{"id":"1:13950:33930","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13578:3574","str::split":"1:13941:3054","prim@char":"5:12456:490","`DoubleEndedIterator`":"1:8476:133","str::rsplit_terminator":"1:13953:33931"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44840:3956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3945:1865":{"id":"1:3945:1865","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40504:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:353:2519":{"id":"0:353:2519","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[200,0],"end":[219,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:149"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13892:33924":{"id":"1:13892:33924","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2517":{"id":"0:52:2517","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:2978"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13922:33929":{"id":"1:13922:33929","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:45054:3952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:2969":{"id":"0:32:2969","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8584:189","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5730:34647":{"id":"4:5730:34647","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13920:10251":{"id":"1:13920:10251","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13919:10254"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45073:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["take","min_by","gt","rposition","reduce","partition","flatten","collect","peekable","zip","count","is_sorted_by","sum","rev","max","cmp","try_reduce","partition_in_place","map_windows","ne","skip_while","last","intersperse","is_sorted_by_key","product","unzip","min","find","by_ref","is_partitioned","fuse","take_while","intersperse_with","next_chunk","eq","__iterator_get_unchecked","cmp_by","copied","map","max_by_key","find_map","try_fold","inspect","map_while","for_each","advance_by","chain","partial_cmp_by","cloned","enumerate","max_by","try_find","try_for_each","partial_cmp","try_collect","scan","filter","nth","eq_by","skip","all","min_by_key","cycle","position","le","fold","ge","collect_into","lt","flat_map","filter_map","size_hint","step_by","any","is_sorted","array_chunks"],"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:184","0:29:1222","0:30:2968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13921:8814":{"id":"1:13921:8814","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:45044:3950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13941:3054":{"id":"1:13941:3054","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::split_whitespace":"1:13919:10254","str::rsplit":"1:13947:32407"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44790:3955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:784-0:533:2596":{"id":"b:4:784-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:786:2951","4:787:2939","4:788:27898"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:28:184":{"id":"0:28:184","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"1:13994:2956":{"id":"1:13994:2956","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13898:33926":{"id":"1:13898:33926","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13982:33936":{"id":"1:13982:33936","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3081-0:479:149":{"id":"b:1:3081-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:693":{"id":"0:226:693","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13923:9896":{"id":"1:13923:9896","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45082:3963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5738:34648":{"id":"4:5738:34648","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3080:2946":{"id":"1:3080:2946","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13977:33934":{"id":"1:13977:33934","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::match_indices":"1:13974:33933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44958:3962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2777:27897":{"id":"1:2777:27897","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8442-0:533:2596":{"id":"b:1:8442-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8438:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8444:184","1:8445:2966","1:8446:982"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:33079:3676-0:479:149":{"id":"a:1:33079:3676-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33079:3676","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:118","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2510","0:67:2708"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2774:2858":{"id":"1:2774:2858","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13912:32401":{"id":"1:13912:32401","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13911:32400","str::split_at_mut_checked":"1:13914:32404"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13917:8459":{"id":"1:13917:8459","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12456:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44766:3949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13905:31637":{"id":"1:13905:31637","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11659:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13965:32414":{"id":"1:13965:32414","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13968:3395":{"id":"1:13968:3395","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::rmatches":"1:13971:33932"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44994:3959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3203":{"id":"0:200:3203","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2509"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42881:10642-0:479:149":{"id":"a:1:42881:10642-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42881:10642","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72:2510":{"id":"0:72:2510","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13980:33935":{"id":"1:13980:33935","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13997:32416":{"id":"1:13997:32416","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:827":{"id":"0:222:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13911:32400":{"id":"1:13911:32400","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13913:10252","str::split_at_mut":"1:13912:32401"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14015:33555":{"id":"1:14015:33555","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:3674-0:479:149":{"id":"a:1:3335:3674-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42880:3486-0:533:2596":{"id":"a:1:42880:3486-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42880:3486","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:177:1208":{"id":"0:177:1208","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3300:260-0:479:149":{"id":"a:1:3300:260-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:291:857":{"id":"0:291:857","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33020:248-0:533:2596":{"id":"a:1:33020:248-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:217:262":{"id":"0:217:262","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"0:484:118":{"id":"0:484:118","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:149"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2510","0:489:2708"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:70"]}}},"1:13930:32415":{"id":"1:13930:32415","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13927:3266":{"id":"1:13927:3266","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13944:10253":{"id":"1:13944:10253","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13368:3968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3090:149":{"id":"1:3090:149","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2775-0:533:2596":{"id":"b:1:2775-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2777:27897"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:2708":{"id":"0:67:2708","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3576:154","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14011:33550":{"id":"1:14011:33550","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5727:34646":{"id":"4:5727:34646","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13914:32404":{"id":"1:13914:32404","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13913:10252"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3210":{"id":"0:205:3210","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:827":{"id":"0:224:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10713:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10694:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:2510":{"id":"0:487:2510","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13924:29926":{"id":"1:13924:29926","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:218:651":{"id":"0:218:651","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3535:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5723:34645":{"id":"4:5723:34645","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:479:149":{"id":"b:1:3943-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:1024":{"id":"0:34:1024","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13919:10254":{"id":"1:13919:10254","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13920:10251"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45064:3951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5739:34649":{"id":"4:5739:34649","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:3088","`String`":"4:7802:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8444:184":{"id":"1:8444:184","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8584:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:65:2510":{"id":"0:65:2510","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13900:3013":{"id":"1:13900:3013","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12475:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13918:2942":{"id":"1:13918:2942","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44776:2883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1222":{"id":"0:29:1222","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8584:189","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:857":{"id":"0:289:857","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3943-0:533:2596":{"id":"b:1:3943-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:33021:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3941:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3945:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:293:351":{"id":"0:293:351","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2519":{"id":"0:0:2519","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[730,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the [`std::error::Error`] trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, almost all of the same API is available and works the same\nway. To depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:149","`std::error::Error`":"1:3140:149"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.85\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2519","0:479:149","0:533:2596","0:481:237","0:484:118","0:492:204","0:351:3027","0:353:2519","0:532:2511"],"is_stripped":false}}},"1:13889:1024":{"id":"1:13889:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12456:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2806:9595":{"id":"1:2806:9595","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:481:237":{"id":"0:481:237","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:118"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:43052:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"0:334:266":{"id":"0:334:266","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:13986:33937":{"id":"1:13986:33937","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:533:2596":{"id":"b:1:3077-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3080:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:14003:33942":{"id":"1:14003:33942","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:14014:33554":{"id":"1:14014:33554","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:204":{"id":"0:492:204","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2509":{"id":"0:199:2509","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2804-0:533:2596":{"id":"b:1:2804-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2802:3597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2806:9595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:220:653":{"id":"0:220:653","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3535:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13937:3924":{"id":"1:13937:3924","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42789:202","prim@char":"5:12456:490","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3045:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:351"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:196:2510":{"id":"0:196:2510","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:118"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3335:3674-0:533:2596":{"id":"a:1:3335:3674-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3335:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:201:990":{"id":"0:201:990","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10749:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3088","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:2968":{"id":"0:30:2968","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2708":{"id":"0:489:2708","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10754:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3300:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3576:154","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13891:9992":{"id":"1:13891:9992","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13947:32407":{"id":"1:13947:32407","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::split":"1:13941:3054"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44808:3953","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13956:32409":{"id":"1:13956:32409","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12456:490","self::pattern":"1:13578:3574","str::rsplitn":"1:13959:32411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44894:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13959:32411":{"id":"1:13959:32411","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12456:490","str::splitn":"1:13956:32409","self::pattern":"1:13578:3574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44912:3957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13962:32413":{"id":"1:13962:32413","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2704":{"id":"0:107:2704","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:1:3092-0:479:149":{"id":"b:1:3092-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:149","1:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:33079:3676-0:533:2596":{"id":"a:1:33079:3676-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33079:3676","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13913:10252":{"id":"1:13913:10252","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13914:32404"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42787:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5741:33702":{"id":"4:5741:33702","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:14014:33554"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3083:857":{"id":"1:3083:857","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13897:2937":{"id":"1:13897:2937","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:13100:2947"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3077-0:479:149":{"id":"b:1:3077-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3080:2946"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13971:33932":{"id":"1:13971:33932","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13578:3574","`DoubleEndedIterator`":"1:8476:133","prim@char":"5:12456:490","str::matches":"1:13968:3395"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:45012:3960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13584:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13599:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8476:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13910:33928":{"id":"1:13910:33928","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12462:1765","crate::ops::IndexMut":"1:3605:3515","str::slice_unchecked":"1:13909:33927"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:14017:33558":{"id":"1:14017:33558","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:40012"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:3290":{"id":"0:343:3290","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"4:5722":{"id":"4:5722","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5723:34645","4:5724:3585","4:5727:34646","4:5730:34647","4:5738:34648","4:5739:34649","4:5740:10562","4:5741:33702","4:5742:33703"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8446:982":{"id":"1:8446:982","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13984:3272":{"id":"1:13984:3272","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8445:2966":{"id":"1:8445:2966","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"4:5740:10562":{"id":"4:5740:10562","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7802:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7802:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2045":{"id":"0:198:2045","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:663:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3564:3241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:693"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:478-0:353:2519":{"id":"0:478-0:353:2519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2519","glob":false}}},"b:1:3081-0:533:2596":{"id":"b:1:3081-0:533:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:33020:248-0:479:149":{"id":"a:1:33020:248-0:479:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:33020:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:14013:33553":{"id":"1:14013:33553","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:11285:8025":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:15829:5964":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:7806:9207":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"11:102:6761":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:0:3425":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6731:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12191:5313":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:7263:5023":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:40688:10555":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12008:5191":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:2148:7913":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:4902:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13662:5444":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5413:30484":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4780:16211":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1049:9042":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1597:6995":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:679:2875":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5019:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12648:5362":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:43011:225":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"6:5057:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6084:6339":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:8585:9027":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:9501:8012":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:45534:3934":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12149:5309":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12335:8790":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:23181:2704":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:10662:8843":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:14520:5626":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:16385:6127":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10938:37089":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1974:2512":{"crate_id":5,"path":["std","error"],"kind":"module"},"6:8031:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13145:8804":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:5220:10589":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:9349:9114":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"7:79:22221":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:16341:6120":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6188:6350":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8612:6298":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11606:5292":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:2406:8782":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3695:6304":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10387:9215":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4875:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:4680:16193":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:23303:15839":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14859:5692":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14114:5546":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5405:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:43966:2727":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14560:5632":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7469:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5009:2865":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4929:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4844:6315":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7402:4955":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:6210:4932":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46791:8494":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:11843:8042":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14672:5647":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:3569:4932":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"5:881:3684":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:517:6892":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3373:3561":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:4956:6319":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3054:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:14796:5684":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:23831:8132":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:5381:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:16798:6231":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15931:5992":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1643:7032":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:8494:5133":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:4186:2966":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41549:8365":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10778:8925":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5139:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:553:6912":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:531:5099":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:13093:1765":{"crate_id":1,"path":["core","str"],"kind":"module"},"1:45788:30066":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:5727:5253":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13451:5424":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3780:3669":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:39042:3662":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:785:6769":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6691:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:23195:15846":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6700:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15090:5731":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:7900:3521":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:5812:16241":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:2754:9060":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:11891:4969":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14460:5618":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:11368:8027":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:11042:9106":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:15602:5911":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:33109:3598":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:5742:5254":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:3338:6770":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5570:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:8254:130":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11833:3684":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:45716:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"14:0:3423":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:40335:3514":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:5493:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:23075:15843":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:7058:6453":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:1889:3520":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:32986:8645":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:3403:9064":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4914:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13427:5422":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:48128:8616":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:15973:6003":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:46827:8500":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:31807:5105":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:16362:6123":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:47977:8600":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1684:7056":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:44912:3957":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14612:5639":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:789:121":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:45224:8460":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:45836:3609":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:11798:8038":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:3916:9071":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10967:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:8260:7922":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:47133:8525":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16714:6212":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12018:8940":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:8343:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:1250:8851":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:11005:8022":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"4:7114:3527":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5007:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7282:6505":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:44958:3962":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:16332:6118":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6781:6421":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3677:16126":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"17:11515:8929":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6337:6370":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3110:6299":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6440:23236":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:12455:1204":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"4:1370:6539":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:44994:3959":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14438:5617":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:538:5102":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10167:23297":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:2559:6779":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7386:6514":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5288:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2840:6269":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:5836:3526":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1085:37068":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:507:5094":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3687:16146":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"5:9402:8010":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:6043:3522":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"6:7563:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1489:6933":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13398:5421":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:1785:4975":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12044:8946":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:40447:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"14:160:9031":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:8741:16224":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4404:6311":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:44776:2883":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:9356:8901":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:12428:2860":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:3343:32302":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10928:8762":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:772:6768":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10749:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:3364:6773":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:780:263":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1641:6771":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:798:3522":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:0:1757":{"crate_id":5,"path":["std"],"kind":"module"},"17:10368:23303":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:8043:37079":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5482:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14692:5648":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7487:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:2368:8057":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7561:3522":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4881:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5676:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:6401:8080":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1625:7020":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:6931:4975":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:47421:8553":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:1117:9046":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:3576:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:1595:8829":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14947:5705":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3140:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:14573:5634":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6507:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15769:5948":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:46940:8507":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:33764:3645":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:47182:8528":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:45107:3966":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:47309:8549":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7716:37084":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:41401:9165":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:16750:6221":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:16187:6076":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:43108:2966":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:41540:8364":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"14:187:9211":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6852:6429":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:5195:16220":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"1:44126:8430":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:33022:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:7532:3517":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"17:16209:6082":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:8673:9106":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:41212:3964":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11998:8939":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:1230:9357":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5420:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4699:8913":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10597:5256":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:32990:6587":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:11952:8856":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1563:6974":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:1555:2966":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:10779:9064":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14902:5698":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4414:9073":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:8353:7911":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:9217:8002":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:8521:16127":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"1:47935:8598":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5451:9153":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5387:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:2668:3625":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:45848:8484":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:589:5106":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12952:5388":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:8884:7990":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:48049:8606":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:45506:3933":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:13983:5509":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:4349:16191":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:6832:16253":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15410:5849":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:5687:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"5:8206:8834":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3913:9070":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:985:4983":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2415:22346":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:5305:8803":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:40352:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2796:6267":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5629:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:15836:5965":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4579:9148":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1888:3522":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:8894:3684":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:44134:8432":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:44163:8434":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:41526:8361":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:41421:9166":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:40407:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"3:0:3416":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:46955:8508":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4792:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:41106:8339":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2403:3607":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:16822:5502":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:23119:15844":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:13890:5497":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7765:6570":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3403:3600":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:7044:6285":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:990:9039":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:12456:490":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"4:1524:3684":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11831:5277":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10218:23298":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:41373:10605":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12306:5320":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"11:1893:3520":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:16739:6220":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:2326:150":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:3300:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:7748:35003":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:41776:8377":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2142:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11075:37092":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:8290:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15036:5725":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:41993:8382":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:22540:2704":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41570:8367":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6173:6348":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:351:8818":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3350:9062":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:10822:4962":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2228:6774":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:45210:8457":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12524:8792":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1619:3684":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:23336:15838":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:963:8828":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:15679:5926":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:22850:3998":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:896:8972":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"13:110:37071":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2530:6255":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:45734:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:3092:3085":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5241:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:44142:8433":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10532:3555":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:5576:16041":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"5:12242:4974":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:43878:8428":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:47906:8597":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:8015:2704":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7462:8997":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:1627:221":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13818:5485":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3548:3091":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:1002:3684":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:8711:6672":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:5143:4932":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8438:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:16311:6112":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:2440:3522":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15431:5859":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:6542:231":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12699:8963":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6144:23234":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12840:5375":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:4939:16181":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:3096:9358":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11539:5277":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:2732:4926":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:42715:8407":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:9382:34960":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6544:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"18:581:5105":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6942:6440":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:11277:34963":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7919:9018":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:4815:16170":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:39676:3664":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:6407:4943":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:47036:8520":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11964:4004":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:43363:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5648:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:48060:8607":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:12471:918":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"5:11837:8041":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3564:3241":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2467:6247":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6876:6434":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:706:3944":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:546:6235":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:1711:7067":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:43890:6631":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:12057:2861":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:11975:9072":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10713:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5349:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:7969:6594":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:8016:7915":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6716:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:11857:3685":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:4499:4997":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7030:6451":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:689:5122":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11579:8771":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:12477:1883":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"16:4267:6310":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:885:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11617:8766":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11630:5279":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:48023:8604":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:5285:9076":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14269:5583":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:4119:2944":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:396:4916":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:7986:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12347:8955":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:16264:6098":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:41579:8368":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:22307:30986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7731:8413":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:7361:7758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:212:3610":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:46894:8504":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10630:5257":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:14220:5558":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:1907:6771":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:7605:2966":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:3866:9136":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:22862:30980":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:1386:9042":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:16036:6019":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11173:37094":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6028:6278":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10768:3540":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:5741:9083":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"6:6917:7722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1930:8638":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:16283:6103":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1690:7059":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7433:4956":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3458:3657":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:8900:7995":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"17:16701:6206":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:4298:4932":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:33020:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:5593:7429":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:948:3520":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5117:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10487:23307":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"4:7825:3560":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3075:237":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"16:5689:6336":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:34449:3650":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12225:5317":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"9:480:22226":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7971:10623":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:16786:6228":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:22552:8093":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:7613:221":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:46873:8503":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:903:8921":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:3042:4931":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:9744:150":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:42977:8419":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"16:8546:6660":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4184:6308":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:4225:16173":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:959:8827":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12583:5360":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:5548:132":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"16:2880:6271":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12066:5301":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10754:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2029:4932":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"0:484:118":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"1:23798:8129":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:22341:30990":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:40389:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:47359:8551":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:1401:9041":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:3088:8054":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5311:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44840:3956":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12687:8796":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13921:5501":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:8117:9096":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:12480:993":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"5:12423:8910":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:46712:8485":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:8598:9030":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:8273:9098":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:2148:9042":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12392:5325":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:42042:8387":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:3456:3520":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:23209:3624":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:16179:6075":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:45064:3951":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12676:4017":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:42000:2866":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:2380:3684":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:35007:3656":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9536:9155":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"11:830:8829":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11015:8088":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:42015:8384":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:31139:10378":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:5426:5006":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"5:8054:4962":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"5:534:4921":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3048:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:5144:6324":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:564:6917":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6953:6441":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:13100:2947":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:47803:8594":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:13068:3993":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15785:5952":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11163:5292":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:8654:7972":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12280:8788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:8028:6596":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6876:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:8677:7762":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:43100:3685":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:15689:5927":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:45767:9168":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15621:5912":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:45704:8479":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:15812:5956":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:8233:23246":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6794:6422":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:44615:4007":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6738:37080":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45595:10712":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7911:2863":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:2013:3262":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"17:13385:5419":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3446:9066":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:46844:8501":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:23207:29994":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:10411:8849":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:10115:23295":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5186:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5379:6332":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1632:7024":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:155:4910":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:45241:8461":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:22373:15761":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14284:5587":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:34248:3562":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:3987:5156":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:16728:6215":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5127:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:3720:8794":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2793:9061":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10418:23305":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:32944:2974":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:5586:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:908:8922":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"18:765:27498":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:651:5094":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:889:4978":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3602:7968":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"16:7337:6510":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:2648:9059":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:41147:28128":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:13084:3995":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:12466:760":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"5:380:9052":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:45538:3935":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"15:0:3424":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:45419:3946":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15905:5982":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:41517:8360":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15557:5902":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:8629:7971":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6658:8859":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:11090:8001":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:40339:3665":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"13:0:3417":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:12439:2862":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:12467:763":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:15963:6000":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8447:3679":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2652:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:894:3685":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:23246:15847":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:5088:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14975:5711":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3313:35585":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:15887:5978":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:43851:8420":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10296:23301":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7844:9210":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:6564:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:768:165":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:9203:8844":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:23625:28125":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12860:5380":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:23886:8137":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:5205:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:8758:7982":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"17:12931:5386":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:4978:5032":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:14773:5683":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:15701:5930":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4053:3522":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12409:23413":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:575:4922":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"5:5128:16214":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:43252:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1696:7060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2859:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:3341:3635":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13945:5505":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:9457:4954":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:5366:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:12475:1895":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"1:41651:8374":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2551:37069":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:9297:8006":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11222:8766":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:11826:9092":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6599:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:44587:4002":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:47509:8557":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:43326:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:43178:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:14491:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:5107:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:2266:8051":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12723:8798":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12906:5383":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:8626:6665":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:13578:3574":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:1626:3522":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:43117:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4233:16175":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:42009:8383":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:5973:264":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:2766:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13306:5415":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2816:3846":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:31422:3545":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:41363:2883":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:22983:15759":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5428:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:14335:5598":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14963:5709":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2950:6274":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:47019:8519":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11864:8937":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:9234:8003":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:11412:9128":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10549:5254":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:6711:2866":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"1:10366:827":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:11646:2704":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"14:220:6752":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5477:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:7815:3559":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:29:526":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"17:13838:5486":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12249:8950":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:1623:2966":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5044:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5341:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"11:835:9034":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:33111:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:45530:3940":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:8844:16236":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"16:5172:6325":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7340:9206":{"crate_id":5,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:16377:6124":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:8588:16165":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"1:11659:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13028:8801":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:12869:5424":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12714:3008":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:4208:3685":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:12472:924":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"4:2162:9136":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5224:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15475:5890":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:46727:8488":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6381:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5441:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5040:3548":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:479:6867":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:3774:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6159:6345":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:5478:214":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"1:8894:3686":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7789:37082":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15549:5901":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:8296:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:12482:1456":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"17:12028:8941":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:8031:9094":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"5:11478:3003":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:31369:3090":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7586:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:506:5198":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5334:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10784:8926":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:8308:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:10705:4961":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12359:8791":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:16019:6012":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:41508:8358":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16555:6178":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:6462:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:7431:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:42034:8385":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6302:6368":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:2554:3354":{"crate_id":5,"path":["std","io"],"kind":"module"},"6:7341:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11985:8787":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:8640:9105":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6473:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:23645:28116":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:4018:9072":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:11073:34955":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1871:8831":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"6:473:6864":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12082:5303":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4489:4932":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:45709:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:12798:23437":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12605:5292":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1703:7063":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1564:22306":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:8512:7965":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"6:6411:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:43513:8917":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12762:8965":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:22353:30992":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:8289:7913":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:10988:7920":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:43920:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:687:2880":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2282:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:925:6769":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15286:5746":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14627:5642":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7110:5039":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:13266:23310":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:10413:9115":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6042:6281":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6502:22345":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:2521:16125":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"17:16026:6014":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:3085:2951":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4816:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:15531:5896":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15739:5944":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8529:2971":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:4569:9075":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11678:8775":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:6840:2966":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13592:5434":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11169:5042":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:16132:6057":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:10998:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:4633:10572":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:43032:223":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"11:2366:9051":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:7696:3518":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:613:37099":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:884:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:15315:5766":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:33080:3677":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7495:6530":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:491:6872":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:6713:3522":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:682:2878":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:11050:9096":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:42727:7970":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:2295:8053":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5348:6331":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:23707:8123":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:7368:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:7:9031":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:16399:6130":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14405:5609":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5471:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:45401:3945":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11465:5273":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:11851:8778":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7016:6449":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:42693:28120":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:10392:8915":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:4857:9150":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:41307:8350":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:2121:6539":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:13593:3944":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:23416:8094":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7578:8007":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:16775:6226":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:1123:4975":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:6580:16057":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:42549:8391":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10141:23296":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:42767:8409":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:42565:8393":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13222:23309":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:12459:1348":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"1:3769:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5375:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3851:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:2816:8061":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3295:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:2660:6261":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:34834:3655":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:9430:4947":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:6822:23238":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:23469:8095":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:465:6859":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5196:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:10776:9062":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:41391:5033":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13041:8969":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:44366:8440":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:2590:6258":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:15148:5740":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:2137:9041":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7604:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3181:2976":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:5449:6334":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3573:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:7884:3520":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13095:5396":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:7454:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:22828:15763":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15997:6007":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:42840:8413":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"11:1900:6770":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:46926:8506":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:23289:2704":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:22295:30986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:4896:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:8732:9107":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:42749:8408":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:3061:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12787:5364":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:41800:8379":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8891:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:47488:8556":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:9150:210":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:11026:34965":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6808:6277":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:113:8755":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:7124:3528":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:5060:6321":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:43055:204":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"5:9756:4960":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:3570:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:41558:8366":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:2585:8058":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:11568:4967":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:5655:9081":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7838:23244":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"9:236:8434":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:47604:8560":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:12462:1765":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"1:23537:8097":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2466:3520":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:4984:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:698:2966":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:3707:3684":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:10782:9066":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:45289:8462":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7212:6490":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6205:23235":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6098:8973":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:2400:3685":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6256:6360":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13055:5277":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:317:8921":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6631:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:42911:3605":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:16668:6199":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:40367:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:14586:5635":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1675:7050":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7350:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2666:3624":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:12886:5381":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:22823:2704":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:2545:6777":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2772:6266":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7332:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5603:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:1932:8833":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"16:2550:6256":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:4827:7775":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:13970:5508":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6123:6282":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:3297:3684":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:1158:9046":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:3851:7913":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14872:5693":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:7790:5005":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6239:6355":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:38932:3660":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4614:3596":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11706:8776":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:8330:7906":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:42527:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8105:6600":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:41162:8343":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13157:8970":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:15050:5726":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43611:3536":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:10570:9356":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:7766:8072":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:8228:7921":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"1:4567:9147":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:6439:8902":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1657:7043":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:500:6841":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:40255:3672":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14043:5522":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:33011:8204":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:4562:4932":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:11253:7999":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:545:6907":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11882:3955":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"11:873:9039":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:3310:35586":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6970:6280":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:41479:8355":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:47118:8524":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:5870:231":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3496:16153":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11475:23323":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:41320:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14416:5610":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:1586:6769":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:434:8822":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:9483:8011":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:8900:10630":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11114:8765":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:47338:8550":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:7215:278":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3941:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:10963:8015":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13757:5471":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11386:23321":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:16297:6105":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"7:32:22214":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:532:6901":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14019:5518":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13082:8766":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:6904:6437":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:3587:6303":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:8249:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5198:6326":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:5809:7683":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"17:12920:5384":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:16832:5507":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:10206:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12673:8959":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:10392:8832":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:7854:10597":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:6910:8081":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10843:5263":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14807:5686":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:1580:9047":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5541:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8082:2852":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:43289:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:2508:16123":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"1:2112:3587":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7305:6506":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:45799:9169":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:42919:8417":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:2209:3613":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:16198:6081":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5362:215":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"5:4829:7777":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:5635:9080":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6391:4940":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:45712:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2820:6268":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1884:2966":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:8265:7925":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:41325:8351":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:33976:3648":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13692:5448":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:44625:4008":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5255:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5507:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:16613:5485":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:40497:3668":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:1616:8828":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"0:481:237":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"17:13322:23311":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:4484:279":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:9452:4953":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:9261:16257":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1500:6938":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:33004:3086":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:2328:9058":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"1:45367:10702":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2900:6272":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:46998:8518":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:45054:3952":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:8483:6653":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7901:5243":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:9438:4932":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:8298:6616":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2105:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:12043:35325":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4805:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2896:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:45316:8463":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:754:5137":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:598:37098":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:23576:8105":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15844:5966":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4997:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:40504:3089":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4937:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6902:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:0:323":{"crate_id":4,"path":["alloc"],"kind":"module"},"0:479:149":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"17:11065:8764":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:3307:37007":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:7751:10619":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11016:8763":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:26749:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:44858:3954":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13909:5498":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14533:5330":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:4997:4933":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:663:2851":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12371:5323":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:12468:779":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"6:6758:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:14997:5722":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15160:5744":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12260:23412":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"5:4702:16194":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10752:122":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13014:8967":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:4333:8840":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6680:8982":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:8622:7970":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12158:4003":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4931:3086":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:1898:10509":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:23553:8101":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:44707:4010":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:11954:9071":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:13314:3971":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:4362:8842":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14055:5523":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:44940:3961":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:46859:8502":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5271:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:16761:6222":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:16632:6192":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"9:53:8879":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:14832:5689":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:7591:32297":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:16507:5471":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:5131:8802":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"5:5671:9082":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14072:5531":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:3448:9067":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6652:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:11786:8034":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:14335:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14312:5594":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"4:1605:8827":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:10479:9240":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:680:5119":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:42880:3486":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10442:23306":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:2498:16118":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"6:5265:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:6127:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1514:6943":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7907:6589":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:44808:3953":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10274:23300":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:42581:10638":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:7581:8067":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:7308:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:23853:8134":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:23331:15840":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15024:5724":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:23718:10403":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41185:8345":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11306:5044":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:16812:6232":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14738:5672":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12108:5306":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:14514:4940":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15496:5895":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:9686:3566":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12983:23439":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:41786:8378":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:5527:4975":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14299:5592":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:4869:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14127:5550":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11010:10674":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:41627:5116":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:12454:434":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:12625:5361":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8390:10632":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:45174:10701":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1539:6957":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2480:3613":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"5:967:9034":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12204:5314":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15714:5936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4987:3547":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:8911:7996":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10793:5138":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"5:7185:16261":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5417:6333":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5357:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:2990:6276":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10762:3538":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:2482:16113":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4694:6312":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11448:8928":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:43439:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14933:5703":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:842:16084":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:1589:6990":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14483:5622":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12130:3957":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5249:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:8240:151":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"16:6914:6438":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:12473:930":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"16:2684:6262":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:11017:7965":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"10:44:6783":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:2349:9042":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:80:8751":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:9276:16259":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:1085:6539":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9573:8914":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:1880:3684":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:39:3519":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5621:9077":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:22371:2704":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:938:3522":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6749:6418":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6493:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6770:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"14:214:6750":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4990:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:515:5097":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:4941:16183":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:14220:9160":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:8503:6654":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:881:9040":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:43141:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"15:288:8808":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:485:6870":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:7707:16024":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2450:6245":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:8267:6612":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:8363:9100":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2486:6253":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:31407:3590":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13537:5386":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13719:5456":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:3539:8384":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10756:3535":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:44383:4022":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"13:229:6760":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:3786:3671":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:13254:3972":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:45073:3967":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:12479:1871":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"6:6449:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3535:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14099:5540":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7949:6291":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10764:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:1577:6768":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:2435:22373":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:5884:7914":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7192:23241":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:2640:6260":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:47681:8592":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:15981:6004":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:47150:8526":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:14652:5644":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:13368:3968":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12776:8800":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6696:8985":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:23820:8131":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:45378:8465":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4778:3546":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:3694:193":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:4910:827":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"17:15418:5852":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11080:1731":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:47249:8531":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11299:5043":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"16:2748:6265":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12992:5391":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:44749:3948":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7830:9209":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:45082:3963":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:34382:3651":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15351:5797":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:46774:8493":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15946:5996":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:9315:118":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:23897:8138":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:45542:8025":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1064:22305":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:8558:2883":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"16:5649:6335":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:8223:6604":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:45388:8469":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"10:36:6782":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:23260:3624":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:5682:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:1140:9045":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:8102:16099":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"1:2854:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6368:6376":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5520:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:34315:3653":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14599:5637":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:45353:8464":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:630:16081":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15077:5730":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12216:5316":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:42787:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:15731:5941":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13547:8857":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:48098:8614":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:47956:8599":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:297:3088":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"17:15064:5729":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:44717:4011":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:43215:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:22444:8093":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11026:37090":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:386:9053":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7358:6287":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:1220:8773":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3759:3667":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:23842:8133":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:586:6929":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:4902:16193":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4947:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:45514:3938":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:44173:8438":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:11792:8845":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:623:37097":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4120:6306":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5224:6327":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6269:6361":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:11812:8039":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:47165:8527":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13491:5426":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4241:6309":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:954:8829":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:48014:8603":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3335:3674":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:22424:2704":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:14243:8364":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"9:176:8889":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:3014:22374":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:521:27499":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:24349:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6890:6279":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"9:445:22227":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14886:5696":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5991:9084":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:23687:8119":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12116:3958":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:8699:7973":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:8066:23245":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15540:5900":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:47232:8530":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:31780:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:1636:8852":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:3309:32303":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2208:3639":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:0:3062":{"crate_id":17,"path":["object"],"kind":"module"},"6:570:6920":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:4311:8839":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12135:5308":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"10:0:3420":{"crate_id":10,"path":["adler"],"kind":"module"},"5:9447:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:430:8821":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12176:5311":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:22322:30982":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:16084:6056":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1635:6770":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:47877:8596":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:47471:8555":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:44605:4001":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:996:9040":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:735:27497":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14084:5534":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:643:5094":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:44181:8439":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:7414:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:726:5131":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:8541:2596":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"6:538:6904":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:23809:8130":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:23660:28121":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:16642:6193":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5622:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:44790:3955":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:14845:5691":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:43928:3545":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:9195:3684":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:11266:8000":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:23787:8128":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:9161:7999":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"17:16520:6148":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:7883:6383":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4957:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:47554:8558":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:912:6768":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10663:5258":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5255:6328":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:3330:6772":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:809:3520":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:8165:6286":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4591:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:4929:6318":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:14507:5623":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:599:9054":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:43625:3537":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:13570:23313":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6666:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"0:351:3027":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"17:583:8924":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11421:8769":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1023:9041":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6111:6343":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:6232:231":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5301:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11281:8767":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11958:8786":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6823:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:9187:8001":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:13070:5292":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:47211:8529":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10766:3539":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:5877:4944":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1869:8830":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"16:6588:6413":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15753:5946":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:6751:4950":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:854:9037":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6765:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:11319:37091":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:23157:15845":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:7738:8069":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2802:3597":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"6:8273:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6829:9089":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:698:5123":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6534:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4902:6317":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3814:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6740:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:3659:2975":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"4:1539:3685":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10246:23299":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6843:6428":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:41611:8371":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:43618:3535":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:439:196":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12816:5368":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:9310:8899":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:7722:5000":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:45526:3939":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:16494:5457":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"11:685:3685":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:2323:9041":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:6599:1973":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"16:7980:6292":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12749:8799":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:9586:8638":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:984:9037":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10332:23302":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3305:3342":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7577:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:2256:4921":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15864:5973":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:42987:221":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:3799:28325":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15989:6006":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10977:37087":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:6315:4937":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:4899:16215":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:9144:8843":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5395:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:40291:3603":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:41204:3965":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:8565:6663":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:8373:16158":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:5114:16213":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:11124:37088":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:6216:4944":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:608:8920":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:31433:28123":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:12481:1957":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:12234:5401":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:40427:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15573:5903":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:5998:9087":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5641:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11757:23343":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12851:5379":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4976:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6900:4951":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:11134:4964":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:491:5093":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11878:5292":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:3268:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:23601:8107":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:44894:3958":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:35180:3658":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12976:5390":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:11303:8011":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15010:5723":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:96:8752":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:0:3421":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:7855:10598":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:46969:8509":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:47264:8532":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5069:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3889:5148":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:23875:8136":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:3025:3533":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:322:8922":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:123:4912":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:881:10390":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:7542:6538":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:45518:3937":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2496:16117":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"17:14708:5653":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:7778:8074":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:1214:8850":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:44379:8441":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:2173:9137":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:13604:3942":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10760:3537":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:11152:4966":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:2718:4928":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:708:8827":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5635:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:2539:6776":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:44688:4009":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:10694:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:43632:3538":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11805:8777":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5562:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:2620:6259":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:45522:3941":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3129:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:8394:10631":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1099:9041":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:31401:2998":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10975:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:11914:9070":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:14393:5607":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2083:209":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:44675:4014":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:16218:6084":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7372:6288":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:2227:8779":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6421:6237":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:4370:3684":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:46806:8495":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:4133:3522":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13169:8805":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:47758:8593":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:7424:23242":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:8014:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:4943:16184":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4152:6307":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7416:8996":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:47101:8523":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13781:5472":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12035:6774":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:46911:8505":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:41986:8381":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:1727:7072":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:8571:3950":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"17:16595:5475":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:5020:16180":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:41175:8344":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:1920:6773":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:904:2966":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12537:8956":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1907:8832":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3605:3515":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6813:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8143:5133":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:7938:6590":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:8528:6657":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13006:5394":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:5392:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:4921:5031":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:47848:8595":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:6527:5010":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"15:394:22337":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15136:5386":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:41602:8370":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:8281:9099":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11926:5299":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:8302:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11925:3968":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3051:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:13933:5502":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:8218:7920":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"0:0:2519":{"crate_id":0,"path":["anyhow"],"kind":"module"},"5:8564:3955":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"5:2020:810":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"4:6180:9359":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:22550:15758":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4730:8078":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:1487:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:33552:3646":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6443:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:16159:6069":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10696:5259":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1108:9042":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15896:5981":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:48034:8605":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1630:3520":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:45825:8483":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11902:5297":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1530:6951":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:726:9134":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:10958:8013":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:22426:15757":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6680:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:47994:8601":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:3800:4975":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6777:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:9174:8000":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12550:5357":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"9:0:3419":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:8583:8838":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4495:9074":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:8008:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:8284:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:3441:6302":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:41448:8853":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:8577:8836":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6462:23237":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6623:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:7316:7734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:13652:10695":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7521:6536":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6882:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:14308:28258":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5085:6322":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11309:8768":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11553:8770":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:8938:9213":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5450:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6521:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:16241:6097":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11503:5276":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:15106:5733":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6408:6379":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7508:6533":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:23522:8096":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11720:5282":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:2890:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:11291:37093":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12163:5310":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:9751:8834":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:14640:5643":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1984:3556":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"5:4113:2950":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11401:5270":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:16171:6072":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:523:6895":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:1415:9046":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:3668:9212":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6984:6297":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13958:5507":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"0:353:2519":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"5:12469:758":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"5:8806:8434":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"5:6070:3487":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13798:5475":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11788:8933":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:8151:6296":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:41498:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4964:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14358:5603":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6573:6410":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12122:5307":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15655:5924":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2792:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:11971:8938":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:47051:8521":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7159:6477":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:7549:8066":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2704:6263":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:14626:3516":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:7288:5026":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:507:4920":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3408:3601":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:6672:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:14571:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:6561:16055":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"16:5318:6330":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:2301:6539":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:6287:8079":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6526:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:10285:8404":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:282:4975":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5036:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:33021:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:8201:5192":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"6:7518:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5325:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10031:23293":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:12461:1731":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"17:15760:5947":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3400:3599":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5151:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4810:6314":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:6159:5004":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7350:6512":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:9465:173":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"6:5051:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13193:8971":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:6025:8898":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16323:6114":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:12031:8045":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"11:1105:9044":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:3045:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:42823:3685":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:41292:8348":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:12407:9131":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:4999:228":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43476:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10803:2883":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:1914:6772":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12736:8964":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:48003:8602":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6611:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13733:5457":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:22324:30988":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:8096:3485":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"14:40:5472":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:41258:8347":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:9442:245":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12711:8797":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7818:9208":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:4149:16167":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:11034:34972":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:3503:8793":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:44766:3949":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14152:5554":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:8179:6602":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:34661:3654":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4766:6313":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14140:5551":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"0:532:2511":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"9:390:22228":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11818:8936":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2920:6273":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:46759:8492":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:42881:10642":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:11320:8026":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:1601:9048":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5230:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:22339:30994":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:14203:9157":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:2966:6275":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:22432:15760":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:2348:34867":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"9:328:6820":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:635:5118":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:8000:6293":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:45510:3936":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:41470:8046":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13181:8806":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:10939:9123":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:48113:8615":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1521:6946":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7223:6491":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8427:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14346:5601":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:973:16084":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10564:5255":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:16145:6063":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:41488:8356":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6998:6442":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:8368:8907":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"17:11566:8931":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:4575:4997":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:13291:3974":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:3308:6244":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:42959:8418":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"16:6731:8858":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:12643:4016":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:12483:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"14:31:9031":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:1339:8774":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:8255:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6064:6283":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13119:5397":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6659:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:6886:8903":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:8584:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:13814:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:9328:34950":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2769:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:44697:4012":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10695:2975":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:42024:5040":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11733:23342":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:7391:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3352:9063":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:15586:5908":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:44736:3569":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13554:5429":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:5316:9076":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:34516:3652":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:41457:2596":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:13584:3566":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:41100:3965":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"15:327:8875":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:42609:8400":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7401:37077":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:8199:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13871:5492":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:328:6765":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:8648:8836":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:3834:6305":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8203:4935":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5282:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10758:3536":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"11:2533:6775":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:15852:5967":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"11:740:8828":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10394:23304":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:9211:2966":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:8503:7964":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"17:12319:8953":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3293:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:7554:23243":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:7802:256":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:8261:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"15:306:8813":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:16684:6204":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:6494:4944":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5319:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3405:9065":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:8669:6587":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:9425:198":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40515:8210":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:7463:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1491:167":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:13330:3973":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:44760:3568":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:6605:197":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:8551:8377":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"11:2566:3518":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:5113:6323":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:48075:8608":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:4211:16171":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:8137:6295":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:47583:8559":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:2378:23368":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:2245:132":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5462:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:472:8923":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:45012:3960":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:4529:4932":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:929:4981":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10823:5262":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:42871:9167":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12962:23438":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:563:5104":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13635:5438":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3851:16166":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:497:6875":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7956:4958":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:22981:2704":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7500:8846":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:12478:1889":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"5:1647:6772":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:1494:6935":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1507:6941":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:42806:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:5658:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6437:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1584:6988":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5025:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:45726:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:9773:130":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:8211:7919":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:2331:3218":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"17:10516:23308":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5217:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7990:6595":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6640:8981":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:45089:3964":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11691:8932":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5488:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:23587:28110":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:481:5092":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"0:533:2596":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"5:12476:1877":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"6:4921:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:10553:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11432:23322":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13471:5368":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6866:23239":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:8319:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:3077:149":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"16:5282:6329":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5709:23233":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11653:5281":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:0:3422":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7471:6529":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1569:6976":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:22285:5105":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6748:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:6389:8975":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:11146:4965":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:4873:6316":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14375:5606":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:670:8761":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6708:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:3720:3685":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:41351:8352":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:559:6915":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:8267:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:8636:23248":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:299:6762":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:4177:16170":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:10968:7919":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15939:5995":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:44596:4000":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10534:5253":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:578:6925":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"9:355:22242":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4970:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8476:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11443:5045":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:45195:8451":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15876:5974":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5757:6337":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7807:37083":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:23609:8108":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:23694:8122":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:7099:8086":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13361:5418":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:40467:3666":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:44662:4013":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2086:208":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7749:3865":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:43400:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3057:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45560:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:14534:5047":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:4829:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15953:5997":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2206:3638":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11777:5289":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:43906:28146":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:41336:10619":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5551:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:7105:8085":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:45584:8476":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:44151:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43092:3684":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:5179:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:23739:2704":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:2420:2966":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:4163:16168":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12570:8958":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:47376:8552":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:6759:4975":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14327:5596":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:41219:10594":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12002:4018":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:4330:4932":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:45098:3965":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:6285:4932":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2335:16110":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"5:9321:2867":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:5105:16212":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:15:2888":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:3854:8795":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:3388:3647":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3378:3649":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7259:6504":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:6:840":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"1:23776:8127":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:12474:911":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"5:4825:7773":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:3304:6771":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:8058:9025":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:2215:3637":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:46742:8489":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"14:165:22311":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1854:719":{"crate_id":5,"path":["std","env"],"kind":"module"},"6:6638:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2724:6264":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:10201:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:8209:6284":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4848:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:12056:5300":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:5302:5004":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"17:14750:5674":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7168:6478":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13854:5490":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:10979:8019":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:14360:9161":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7448:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15665:5925":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:11722:8434":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"5:4221:16172":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:659:8757":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:7090:3526":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:41641:8373":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:45775:8480":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6713:8987":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:12037:3953":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7920:8854":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:2860:6270":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:573:5094":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:44636:4015":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3141:5143":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:48190:8633":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4842:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:1652:6773":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:15919:5989":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:41428:4013":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:667:5243":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:41299:8349":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:3696:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:41196:3966":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6419:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13610:5437":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13515:23312":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13205:8807":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5165:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:8014:6294":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:8320:23247":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:7571:4986":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:43058:148":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"5:12457:1917":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:33079:3676":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:14547:5631":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:7541:2966":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:33:1776":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"6:7539:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6625:6416":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:8096:9026":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:13538:3571":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2570:6257":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:9246:16258":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:43861:3545":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:1674:4918":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:41136:8340":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6723:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:5670:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:364:4914":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6837:8874":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15641:5920":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6790:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:3553:3604":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:4341:8841":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:42902:10650":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12941:5387":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10097:23294":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5295:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:15121:5737":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"8:0:3418":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12897:5382":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1551:6966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12293:8951":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14917:5702":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:7649:2966":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:12463:1855":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"5:6957:244":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:2437:8785":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11592:5236":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:43052:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:13290:5212":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:12050:2861":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:12460:349":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:4852:9149":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3024:2704":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:45809:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:8829:7985":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:7621:8068":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:13599:3943":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"14:202:3558":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11527:8930":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14821:5688":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14031:5521":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:3086:31888":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:2506:6254":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:42815:3684":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:718:5128":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:4171:16169":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3517:3602":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:47080:8522":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:16656:6197":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12095:5305":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:0:3426":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:4983:6320":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:39097:3663":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7959:6593":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10729:5260":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13349:5417":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:37056:3659":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14001:5517":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1667:7049":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:23864:8135":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:11338:173":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:3931:3520":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:42831:2966":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:5533:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3048:22375":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:7641:2966":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11232:23323":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12826:5370":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:1005:6539":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:12144:4005":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:32997:9164":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:3620:9069":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:9369:8007":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11358:23320":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"9:422:22229":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:492:204":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"6:7548:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11457:5272":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:16008:6011":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5494:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:43945:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:41592:8369":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:45044:3950":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"11:671:3684":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:3126:22376":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:15777:5950":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:48151:8617":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12075:4006":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:9361:8908":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7075:23240":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:8036:7916":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6480:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:5572:16040":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:4163:4975":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:8634:16192":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:11058:9083":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:4890:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:6715:9088":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15439:5860":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:44536:8855":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:47450:8554":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:38987:3661":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:12470:936":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"5:12074:4973":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}