{"root":"0:0:2133","crate_version":"1.0.81","includes_private":false,"index":{"0:220:619":{"id":"0:220:619","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2875-0:523:2210":{"id":"b:1:2875-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2878:2556"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13113":{"id":"1:13113","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13114:981","1:13115:2529","1:13116:9568","1:13117:31892","1:13119:31893","1:13122:2547","1:13123:31894","1:13124:334","1:13125:2623","1:13126:2543","1:13128:29530","1:13130:29531","1:13132:29532","1:13134:31895","1:13135:31896","1:13136:31897","1:13137:31898","1:13138:9825","1:13139:31899","1:13141:7505","1:13142:7516","1:13143:2552","1:13144:9827","1:13145:9824","1:13146:7922","1:13147:31901","1:13148:9474","1:13149:30129","1:13152:2879","1:13155:31902","1:13158:3504","1:13162:3537","1:13166:2887","1:13169:9826","1:13172:31903","1:13175:31904","1:13178:31905","1:13181:31906","1:13184:31907","1:13187:31908","1:13190:31909","1:13193:3007","1:13196:31910","1:13199:31911","1:13202:31912","1:13205:31913","1:13207:31914","1:13209:2885","1:13211:31915","1:13212:31916","1:13213:31917","1:13216:31918","1:13219:2566","1:13222:31919","1:13225:31920","1:13228:31921","1:13231:31922","1:13234:2643","1:13236:31923","1:13237:31924","1:13238:31925","1:13239:31926","1:13240:31927","1:13241:31928","1:13242:31929","1:13243:31930","1:13244:2605","1:13246:10132","1:13247:31931"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:523:2210":{"id":"0:523:2210","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2123"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:41633:10204-0:523:2210","a:1:31974:236-0:523:2210","a:1:41632:3098-0:523:2210","a:1:32031:3291-0:523:2210","a:1:3133:3289-0:523:2210","a:1:3098:246-0:523:2210","b:1:2885-0:523:2210","b:1:2879-0:523:2210","b:1:2890-0:523:2210","b:1:2605-0:523:2210","b:1:2875-0:523:2210","b:1:2602-0:523:2210","b:1:3714-0:523:2210","b:1:8162-0:523:2210","b:4:727-0:523:2210","0:31","0:33","0:526","0:35","0:26"]}}},"1:13207:31914":{"id":"1:13207:31914","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2878:2556":{"id":"1:2878:2556","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31974:236-0:523:2210":{"id":"a:1:31974:236-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13158:3504":{"id":"1:13158:3504","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41540:190","prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13181:31906":{"id":"1:13181:31906","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186","str::rsplitn":"1:13184:31907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43524:3570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13169:9826":{"id":"1:13169:9826","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12620:3580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13175:31904":{"id":"1:13175:31904","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12804:3186","str::split":"1:13166:2887","prim@char":"5:12325:458","`DoubleEndedIterator`":"1:8196:129","str::rsplit_terminator":"1:13178:31905"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43470:3568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2851":{"id":"0:207:2851","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:727-0:523:2210":{"id":"b:4:727-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:729:2561","4:730:2549","4:731:27448"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:5854-0:479:136":{"id":"b:4:5854-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:287:817":{"id":"0:287:817","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2579":{"id":"0:32:2579","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8304:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13123:31894":{"id":"1:13123:31894","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13138:9825":{"id":"1:13138:9825","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13139:31899"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13148:9474":{"id":"1:13148:9474","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43712:3575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13166:2887":{"id":"1:13166:2887","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::split_whitespace":"1:13144:9827","str::rsplit":"1:13172:31903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43420:3567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32031:3291-0:479:136":{"id":"a:1:32031:3291-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32031:3291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:217:248":{"id":"0:217:248","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:115","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:31902:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2124","0:74:2322"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5623:32655":{"id":"4:5623:32655","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13240:31927"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:252":{"id":"0:334:252","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3319:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13128:29530":{"id":"1:13128:29530","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8166:940":{"id":"1:8166:940","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:29532":{"id":"1:13132:29532","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2588":{"id":"0:53:2588","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:3714-0:523:2210":{"id":"b:1:3714-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:291:817":{"id":"0:291:817","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3306:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:248","0:218:617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2879-0:479:136":{"id":"b:1:2879-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2884:817":{"id":"1:2884:817","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2322":{"id":"0:489:2322","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:0:2133":{"id":"0:0:2133","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[702,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the `std::error::Error` trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, the same API is almost all available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:136"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.81\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2133","0:479:136","0:523:2210","0:481:225","0:484:115","0:492:192","0:351:2637","0:352:2125","0:353:2133"],"is_stripped":false}}},"1:13149:30129":{"id":"1:13149:30129","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3714-0:479:136":{"id":"b:1:3714-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2879-0:523:2210":{"id":"b:1:2879-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13115:2529":{"id":"1:13115:2529","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8165:2576":{"id":"1:8165:2576","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:13193:3007":{"id":"1:13193:3007","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::rmatches":"1:13196:31910"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43624:3571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13234:2643":{"id":"1:13234:2643","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12765:135","`FromStr`":"1:12764:3183"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12764:3183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12764:3183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:2605":{"id":"1:13244:2605","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4893:2605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43719:3576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:31913":{"id":"1:13205:31913","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32031:3291-0:523:2210":{"id":"a:1:32031:3291-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32031:3291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13239:31926":{"id":"1:13239:31926","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5608:32650":{"id":"4:5608:32650","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5621:10187":{"id":"4:5621:10187","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2131":{"id":"0:52:2131","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:2588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:289:817":{"id":"0:289:817","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2322":{"id":"0:74:2322","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3098:246-0:523:2210":{"id":"a:1:3098:246-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13146:7922":{"id":"1:13146:7922","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43674:3562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2578":{"id":"0:30:2578","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2602-0:523:2210":{"id":"b:1:2602-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2604:2467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2888:136":{"id":"1:2888:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"4:5611:32651":{"id":"4:5611:32651","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1161","0:179:2348","0:196:2124","0:198:2122","0:199:2123","0:200:2815","0:201:2822","0:203:2826","0:205:2823","0:207:2851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3133:3289-0:523:2210":{"id":"a:1:3133:3289-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3133:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13236:31923":{"id":"1:13236:31923","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:729:2561":{"id":"4:729:2561","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:481:225":{"id":"0:481:225","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:115"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"1:13126:2543":{"id":"1:13126:2543","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:617":{"id":"0:218:617","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:523:2210":{"id":"b:1:2890-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2893:136","1:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:658":{"id":"0:226:658","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:462":{"id":"0:528:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5604:32649":{"id":"4:5604:32649","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:981":{"id":"0:34:981","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2122":{"id":"0:198:2122","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:624:2460","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2124":{"id":"0:196:2124","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:115"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:2902":{"id":"0:325:2902","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:479:136":{"id":"b:1:2605-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:27443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41633:10204-0:523:2210":{"id":"a:1:41633:10204-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41633:10204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8249:2581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:981"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:528:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3716:1797":{"id":"1:3716:1797","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39273:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41632:3098-0:523:2210":{"id":"a:1:41632:3098-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41632:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:353:2133":{"id":"0:353:2133","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[190,0],"end":[209,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:136"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13130:29531":{"id":"1:13130:29531","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13135:31896":{"id":"1:13135:31896","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12331:1699","crate::ops::IndexMut":"1:3374:3126","str::slice_unchecked":"1:13134:31895"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["skip","copied","max_by_key","find_map","try_fold","inspect","map_while","for_each","gt","advance_by","partial_cmp_by","ge","cloned","enumerate","max_by","all","try_find","try_for_each","try_collect","scan","filter","last","nth","map","chain","any","eq_by","cycle","take","min_by_key","position","fold","eq","by_ref","collect_into","flat_map","filter_map","step_by","is_sorted","array_chunks","min_by","ne","count","rposition","reduce","partition","flatten","peekable","zip","is_sorted_by","sum","partial_cmp","rev","max","try_reduce","partition_in_place","map_windows","skip_while","intersperse","le","is_sorted_by_key","product","lt","unzip","min","find","is_partitioned","fuse","collect","take_while","intersperse_with","cmp","next_chunk","size_hint","__iterator_get_unchecked","cmp_by"],"trait":{"name":"Iterator","id":"1:8304:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:172","0:29:1175","0:30:2578"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13136:31897":{"id":"1:13136:31897","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13138:9825","str::split_at_mut":"1:13137:31898"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:787":{"id":"0:222:787","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13172:31903":{"id":"1:13172:31903","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::split":"1:13166:2887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43438:3565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13187:31908":{"id":"1:13187:31908","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:2885":{"id":"1:13209:2885","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2815":{"id":"0:200:2815","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2123"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2124":{"id":"0:72:2124","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13142:7516":{"id":"1:13142:7516","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43396:3561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13178:31905":{"id":"1:13178:31905","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12804:3186","str::split":"1:13166:2887","prim@char":"5:12325:458","str::split_terminator":"1:13175:31904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43488:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:335":{"id":"0:295:335","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13231:31922":{"id":"1:13231:31922","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2875-0:479:136":{"id":"b:1:2875-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2878:2556"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:2637":{"id":"0:351:2637","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:136","crate::anyhow":"0:353:2133"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13119:31893":{"id":"1:13119:31893","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13117:31892"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13114:981":{"id":"1:13114:981","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13238:31925":{"id":"1:13238:31925","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13228:31921":{"id":"1:13228:31921","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:31929":{"id":"1:13242:31929","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:975:40091"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13117:31892":{"id":"1:13117:31892","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2893:136":{"id":"1:2893:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31902:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:115","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2124","0:67:2322"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13237:31924":{"id":"1:13237:31924","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39459:10119","Self::is_ascii":"1:13236:31923"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39459:10119","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13246:10132":{"id":"1:13246:10132","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4894:10132"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43728:3577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13134:31895":{"id":"1:13134:31895","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12331:1699","str::slice_mut_unchecked":"1:13135:31896","crate::ops::Index":"1:39104:3125"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:9824":{"id":"1:13145:9824","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13144:9827"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43703:3579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:2552":{"id":"1:13143:2552","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43406:2492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2822":{"id":"0:201:2822","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:479:136":{"id":"b:1:2890-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2881:817":{"id":"1:2881:817","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478-0:353:2133":{"id":"0:478-0:353:2133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2133","glob":false}}},"4:5620:32653":{"id":"4:5620:32653","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:295:2699","`String`":"4:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:31912":{"id":"1:13202:31912","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::match_indices":"1:13199:31911"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43588:3574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:115":{"id":"0:484:115","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:136"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2124","0:489:2322"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2318","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:70","0:62"]}}},"0:224:787":{"id":"0:224:787","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2124":{"id":"0:65:2124","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:31902":{"id":"1:13155:31902","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:730:2549":{"id":"4:730:2549","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:731:27448":{"id":"4:731:27448","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13125:2623":{"id":"1:13125:2623","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:31920":{"id":"1:13225:31920","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13240:31927":{"id":"1:13240:31927","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:31917":{"id":"1:13213:31917","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12830:3555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2894:1782":{"id":"1:2894:1782","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2123":{"id":"0:199:2123","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13137:31898":{"id":"1:13137:31898","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13136:31897","str::split_at_mut_checked":"1:13139:31899"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5856:1757":{"id":"4:5856:1757","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13144:9827":{"id":"1:13144:9827","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13145:9824"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43694:3563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:31916":{"id":"1:13212:31916","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2885-0:479:136":{"id":"b:1:2885-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2888:136","1:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1161"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2889:1784":{"id":"1:2889:1784","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13184:31907":{"id":"1:13184:31907","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12325:458","str::splitn":"1:13181:31906","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43542:3569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41633:10204-0:479:136":{"id":"a:1:41633:10204-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41633:10204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3098:246-0:479:136":{"id":"a:1:3098:246-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:107:2318":{"id":"0:107:2318","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:29:1175":{"id":"0:29:1175","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8304:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:523:2210":{"id":"b:1:2605-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2607:27443"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487:2124":{"id":"0:487:2124","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2885-0:523:2210":{"id":"b:1:2885-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2888:136","1:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3133:3289-0:479:136":{"id":"a:1:3133:3289-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3133:3289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2602-0:479:136":{"id":"b:1:2602-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31975:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2604:2467"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13196:31910":{"id":"1:13196:31910","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::matches":"1:13193:3007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43642:3572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13211:31915":{"id":"1:13211:31915","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5622:32654":{"id":"4:5622:32654","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13239:31926"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13116:9568":{"id":"1:13116:9568","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:31918":{"id":"1:13216:31918","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2905":{"id":"0:343:2905","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"a:1:41632:3098-0:479:136":{"id":"a:1:41632:3098-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41632:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:203:2826":{"id":"0:203:2826","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:136":{"id":"0:479:136","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:41633:10204-0:479:136","a:1:31974:236-0:479:136","a:1:41632:3098-0:479:136","a:1:32031:3291-0:479:136","a:1:3133:3289-0:479:136","a:1:3098:246-0:479:136","b:1:2885-0:479:136","b:1:2882-0:479:136","b:1:2879-0:479:136","b:1:2890-0:479:136","b:1:2605-0:479:136","b:1:2875-0:479:136","b:1:2602-0:479:136","b:1:3714-0:479:136","b:4:5854-0:479:136","0:292","0:213","0:294","0:290","0:219","0:288","0:223","0:216","0:221","0:286","0:225"]}}},"1:13219:2566":{"id":"1:13219:2566","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5603":{"id":"4:5603","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5604:32649","4:5605:3197","4:5608:32650","4:5611:32651","4:5619:32652","4:5620:32653","4:5621:10187","4:5622:32654","4:5623:32655"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13222:31919":{"id":"1:13222:31919","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13147:31901":{"id":"1:13147:31901","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43684:3564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5605:3197":{"id":"4:5605:3197","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2843:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2843:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2348":{"id":"0:179:2348","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13243:31930":{"id":"1:13243:31930","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:975:40091"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13247:31931":{"id":"1:13247:31931","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4891:31931"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43737:3578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:295:2699","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5619:32652":{"id":"4:5619:32652","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1161":{"id":"0:177:1161","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:335":{"id":"0:293:335","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:192":{"id":"0:492:192","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2125":{"id":"0:352:2125","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[120,0],"end":[143,1]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:136","crate::anyhow":"0:353:2133"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:25:1161":{"id":"0:25:1161","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8162-0:523:2210":{"id":"b:1:8162-0:523:2210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8304:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8164:172","1:8165:2576","1:8166:940"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13190:31909":{"id":"1:13190:31909","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:817":{"id":"0:215:817","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8196:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2579"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28:172":{"id":"0:28:172","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2938:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"1:13124:334":{"id":"1:13124:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13125:2623","`u8`":"5:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13162:3537":{"id":"1:13162:3537","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41540:190","prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12825:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13199:31911":{"id":"1:13199:31911","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12804:3186","`DoubleEndedIterator`":"1:8196:129","prim@char":"5:12325:458","str::rmatch_indices":"1:13202:31912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43570:3573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13241:31928":{"id":"1:13241:31928","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:975:40091"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2823":{"id":"0:205:2823","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13122:2547":{"id":"1:13122:2547","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12352:2557"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2607:27443":{"id":"1:2607:27443","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13139:31899":{"id":"1:13139:31899","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13138:9825"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13141:7505":{"id":"1:13141:7505","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43390:3180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:2879":{"id":"1:13152:2879","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12325:458","self::pattern":"1:12804:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12810:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2882-0:479:136":{"id":"b:1:2882-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2852:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2884:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3335:2854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2604:2467":{"id":"1:2604:2467","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2322":{"id":"0:67:2322","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8164:172":{"id":"1:8164:172","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8304:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:1:31974:236-0:479:136":{"id":"a:1:31974:236-0:479:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"0:523:2210":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"16:7695:5621":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:11915:22963":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10419:4293":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9897:8527":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:0:1691":{"crate_id":5,"path":["std"],"kind":"module"},"1:44419:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15720:5125":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:2666:3947":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:10313:7957":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:5788:6975":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:507:4133":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12621:4422":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:10068:22848":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3098:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"14:160:8299":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7306:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:3037:8946":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:43406:2492":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3669:4184":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5742:5362":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:42529:5652":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"13:229:5821":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6849:5525":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:44166:3548":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14298:4710":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:11300:7087":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:22705:7167":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15390:5019":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12213:7905":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6026:5399":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:1891:3133":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6872:5526":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:4044:2560":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6433:5447":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5039:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:41360:7462":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11063:8195":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:45792:7584":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2478:5282":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:673:3299":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3949:8340":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6636:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:39963:3576":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7891:3977":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6471:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2280:137":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:7978:6977":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:12320:3606":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:8200:127":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15039:4932":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:22333:30015":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:7111:5557":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:1098:7880":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:7392:3133":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:8460:7026":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:23478:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:6402:15618":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"5:11610:7953":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:10315:8377":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:6629:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5677:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14723:4767":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2652:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4487:7140":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43318:3623":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13485:4541":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:3029:7114":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15734:5127":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5107:5357":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:10455:113":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:6398:3963":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:43802:10266":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46492:7654":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2688:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:5852:250":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:31944:5608":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:6729:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:9369:186":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:41300:7453":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:9688:137":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:5307:5358":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:45821:7585":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:883:8308":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:4925:216":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"5:8472:15687":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14449:4741":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15822:5149":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:11770:8338":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2748:5294":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:3473:7902":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3171:3211":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:5960:5391":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5472:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:1527:5830":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:10920:7080":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:7604:5318":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:491:5933":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5581:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6880:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:542:5259":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:2140:8309":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6491:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:2878:5300":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:12345:1821":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:12251:7907":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:1566:21865":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:3597:7903":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6435:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:3014:21935":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:392:21786":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:16151:5234":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:1496:5999":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:16198:5244":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:6606:5470":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2592:5287":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1676:3937":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4787:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1653:6104":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5174:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:1207:7881":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"0:352:2125":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"6:1593:6056":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:8844:7056":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"6:1490:5996":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:6440:1904":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"17:11367:4304":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12422:4408":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:45646:7576":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12352:2557":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:12111:3993":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:44356:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13292:4506":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:44435:7539":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:7480:2576":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13412:4527":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7006:8262":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14436:4740":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7539:5315":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:46575:7661":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6353:5440":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:14341:4716":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5160:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:43438:3565":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7436:2576":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15289:4989":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6398:5301":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:12348:1888":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"5:11497:3987":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12399:4406":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:43226:3614":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:10472:8944":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:5536:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:11198:7061":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:44331:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:22545:7156":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:16032:4495":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:39871:3577":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:497:5936":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12388:4405":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:21954:15327":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"0:0:2133":{"crate_id":0,"path":["anyhow"],"kind":"module"},"16:7727:5319":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:437:4235":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:4108:15728":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:10239:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"14:7:8299":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11788:8216":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:7582:10180":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:867:8189":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:6749:5498":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:30841:4144":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11773:4426":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13526:4551":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6505:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:5540:8348":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"11:434:7930":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:9293:8376":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5385:4284":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14516:4748":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11102:8196":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4347:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:8788:15793":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"4:3305:5834":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3712:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"18:659:7864":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7509:8285":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:40392:7435":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11493:8203":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:8197:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13814:4624":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:22321:15410":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:3635:181":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12127:4385":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:4747:15728":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7428:22803":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11497:7893":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1526:6012":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3335:2854":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44458:7540":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:45919:7605":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5006:5354":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:46518:7656":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:4269:3951":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:9155:2576":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15102:4946":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:608:8188":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:7569:7129":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3531:3282":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:1075:8314":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3599:8524":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4876:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:10195:2585":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:22374:15411":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15778:5142":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7633:36455":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1926:658":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:11755:4344":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"4:1496:2576":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:4673:4045":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:41654:10213":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10503:7150":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1723:6133":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13024:22870":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:12297:2469":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5290:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6160:21905":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:46613:7668":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:43524:3570":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:706:3557":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2660:5290":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:597:4281":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13738:4607":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4837:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43728:3577":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5191:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15324:5000":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:2684:5291":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3159:3262":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:8309:8122":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:11665:8360":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6317:8253":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:40009:7408":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:40793:7449":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11089:3567":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3345:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:43823:7508":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10769:36466":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9283:8129":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:896:3133":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7061:5550":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:0:3032":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:4281:15749":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:10941:138":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:12768:22846":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:10187:7466":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:589:4145":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2768:5295":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1577:3299":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:43266:3629":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:12308:2471":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4885:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:5457:15607":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"6:7485:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:256:8189":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:15168:4962":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:1356:8314":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:22716:27922":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:726:153":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13387:4522":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:7933:3954":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7910:22806":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:7655:3171":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15266:4986":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11702:4337":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:2612:5288":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:3144:3172":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:40230:7416":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:2352:8310":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4683:2697":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"9:0:3030":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:45483:7559":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"7:78:21778":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:40737:7443":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:7584:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:12346:1803":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"1:5853:3951":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:8220:8365":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:42250:3147":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:8155:5684":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:11086:3985":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:2548:5838":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2338:5269":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5665:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:10666:8330":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:6763:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:15126:4948":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:8211:6986":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12464:22988":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2822:2318":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5390:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11189:4308":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5588:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:43703:3579":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11850:3630":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:12330:1665":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"16:6574:5321":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12342:4399":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:742:7936":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:45661:7577":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7570:5316":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5774:219":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:22433:15403":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14912:4911":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:4531:5339":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:9190:15815":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5802:22793":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10818:7873":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:2369:8319":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:532:5962":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:2469:3131":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12863:4443":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:7730:3132":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7873:4172":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:41663:3219":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:9671:22844":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:41278:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6524:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:40775:4054":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15313:4996":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:2374:5277":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:447:21785":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15646:5104":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:11092:3986":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:2175:22921":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:635:4157":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1663:6110":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:1557:7936":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:22816:7181":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:10042:3166":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:30814:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:16269:4527":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"3:0:3027":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:46119:7613":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:43917:7519":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:41877:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:3648:3299":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:44016:7526":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1978:770":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"1:12804:3186":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:364:3933":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:46666:7671":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:1923:5834":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"14:0:3034":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:2044:196":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:2041:197":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:45384:7549":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:830:3997":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:5526:8345":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:10194:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:7461:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:700:2576":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:2304:5560":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:10185:4286":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8202:5322":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:15456:5034":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:2199:128":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:14386:4723":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7823:22805":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:45874:7588":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1051:8310":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:800:3133":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2499:3240":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:22651:7158":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:7380:7126":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:4104:3994":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4530:3157":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13844:4627":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:10675:4058":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:40268:7422":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9876:787":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:16176:5242":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10828:36474":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:43255:3622":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5897:5378":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3022:225":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13723:4603":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:40114:2492":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:4784:3159":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:4612:15751":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12189:7904":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6714:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:16259:4522":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:6730:15810":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6775:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:8253:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14325:4714":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:481:4131":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4800:6148":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:22461:15404":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:22419:2318":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4:1239":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"14:187:8523":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15116:4947":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3618:15705":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"1:2026:3253":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:40221:7106":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:35825:3274":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:43624:3571":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14968:4917":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:9131:7062":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"17:11115:7878":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3339:8333":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3468:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5200:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:3872:3131":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:2599:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11467:4326":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5181:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13325:4512":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:22466:15402":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:2757:7121":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:9105:7060":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6597:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9715:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5075:5356":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:872:8190":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:12289:4388":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3380:8334":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3952:2576":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:2234:7892":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2049:3252":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:10997:8351":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:8188:8298":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:2989:3950":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10155:4284":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:8828:7051":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"6:4864:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:42152:8132":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:8206:6983":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:2450:15678":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"4:4309:3299":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13538:4554":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:3807:8402":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5352:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:46564:7660":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11743:4341":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10251:4288":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:6164:3951":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:6343:8117":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:10213:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11547:4227":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:40142:4047":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:21552:15321":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:7472:2576":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:12326:1849":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"17:15957:5170":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"4:40:3130":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:21450:30902":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:45728:7580":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:8282:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13753:4612":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6738:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:11075:3984":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:14752:4787":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:2114:8403":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:21467:30914":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7014:22801":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:732:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:943:3299":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:16212:5248":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:396:3935":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:844:15644":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:8534:7946":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3842:5331":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:33293:3267":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43852:7517":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1025:8309":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:40343:7431":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:14414:4729":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15273:4987":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13922:4640":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4913:5351":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:8773:7046":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12353:4403":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12887:4444":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4835:787":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"1:10692:3945":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5306:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12572:4319":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:4346:8341":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:46421:7651":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:46705:7687":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43642:3572":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5624:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:8167:3294":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10218:4287":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:6136:219":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:39136:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"11:710:7935":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12825:3556":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11595:4327":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4897:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:538:4141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14356:4720":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:4152:15730":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:11185:7060":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:41622:8428":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:4273:7949":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11764:4345":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:5453:15606":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"15:0:3035":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11293:22896":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11016:7876":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:31975:2903":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:12530:7909":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5643:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6698:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:9161:7063":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:3792:6974":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:45469:7558":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:5713:6744":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"1:45369:7548":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5846:5373":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2124:5560":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2902:21933":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13046:4454":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:3661:3300":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:37701:3275":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:15:2497":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:15206:4970":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5483:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:3250:36439":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7306:36462":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:44006:7522":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:4944:15738":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:860:8240":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:41632:3098":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:7359:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:41444:27916":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:553:5973":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:2309:7117":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:856:8305":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:12323:405":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:15356:5011":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:45454:7557":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8304:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:41760:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:9254:8114":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14111:4665":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:46471:7653":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12707:7915":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15616:5097":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6874:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:8029:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5565:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:38445:3279":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:613:36480":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6746:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:5038:15771":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:11282:3620":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10248:3147":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:6849:4053":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6140:7142":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:45565:7564":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:15222:4974":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:5716:15798":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"17:14463:4742":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:7586:10159":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:485:5931":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:41671:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:46273:7647":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:9445:7073":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:42752:7487":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:8314:15716":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12278:7908":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14091:4662":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:912:7937":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:40058:7411":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:9241:7067":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7546:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15410:5025":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:44142:3551":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12671:7913":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:12331:1699":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"17:14066:4660":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:44146:3550":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:21433:30908":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:1057:8309":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:40527:7439":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:39216:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14788:4818":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:6619:8356":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"13:110:36450":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:9700:3980":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:8660:8525":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:31951:8425":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:45608:7574":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10256:3150":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46538:7658":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:4634:15752":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6460:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:10989:8363":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:11647:4333":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3337:8332":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:417:184":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:40249:7419":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:22754:27923":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:6763:3994":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:774:5829":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:45416:7551":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:11345:8390":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:42264:3148":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7575:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11026:22878":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4932:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13553:4560":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:718:4167":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:43570:3573":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6466:5453":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6620:5472":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:8838:3299":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"6:5244:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10707:4063":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:6798:3970":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:5781:3963":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4830:5348":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:45536:7562":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:732:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:5477:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:723:249":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:32823:3263":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:1155:7958":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13399:4525":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3289:8331":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:3245:5832":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10534:36467":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:3844:8338":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:7119:4041":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14575:4410":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:430:7929":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:43007:7498":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:45775:7583":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:37866:3278":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:521:27048":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12454:4413":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:31965:7266":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:6681:2576":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:22949:7193":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:43470:3568":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5653:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:16105:5221":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:22971:7195":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:4965:6243":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:46060:7610":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:11831:8340":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5361:6385":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11674:4335":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6900:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:7422:34293":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:2151:8310":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:7910:3979":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:43488:3566":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:45743:7581":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6853:232":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:43347:3625":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4909:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:735:27046":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1910:5832":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:40744:7444":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3091:3210":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:1829:7939":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"16:5415:5360":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:43235:3615":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:5217:4021":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"4:6421:15620":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"18:581:4144":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:8439:4172":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:4728:4046":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15176:4965":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16249:5254":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:30407:2701":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6756:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:29:494":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"17:9886:22861":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:3847:8339":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12345:1699":{"crate_id":1,"path":["core","str"],"kind":"module"},"1:42571:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:11244:3565":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:545:5968":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6120:3963":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11365:3617":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:44162:3547":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10622:36473":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:3033:2696":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15624:5098":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11715:4338":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15151:4957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6588:5462":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11661:4334":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:12349:1397":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:5902:8355":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7330:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:9695:7942":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:16050:4505":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:6706:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:12329:333":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"5:7338:3975":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:925:8302":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7799:5308":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:40172:8427":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:1639:6093":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5831:5371":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:5029:15770":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:11593:34755":{"crate_id":5,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:41566:3299":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:14876:4881":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16187:5243":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6532:5460":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:8341:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:42257:3146":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5502:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:4867:15742":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"9:238:7491":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"15:288:7916":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:31976:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:2448:15677":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:43337:3624":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12824:22868":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5995:5393":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:12332:1787":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:33603:3270":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:8300:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:4156:15731":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12647:7912":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6263:5438":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6948:5311":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:2207:7111":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5064:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2636:5289":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:3029:4179":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:40071:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:1066:21864":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:12620:3580":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:5576:8350":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9858:22860":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:8136:5681":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:11270:161":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:7372:2576":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:8046:15659":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"17:13089:4458":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:4823:15773":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10710:7872":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:811:3131":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:12969:4449":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1043:5560":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:30445:3202":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5336:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:6927:5531":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3374:3126":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5046:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:44410:8433":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:42517:29525":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:1465:3299":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:8061:8363":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12949:4392":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7769:5623":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8158:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15418:5026":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:9346:7071":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:7527:3129":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5122:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14545:4751":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5415:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:921:7936":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:8630:6823":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:10672:8334":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:30460:3156":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:5560:8349":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3586:3214":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:8855:7057":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:44150:3554":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:4142:15729":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4389:10133":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:15333:5003":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:365:8321":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:8685:15781":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:46081:7611":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8121:10194":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:22730:7169":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:12324:1157":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"6:8265:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:3382:8335":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:4062:5334":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11877:4346":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:43420:3567":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:10455:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:11898:4348":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:515:4136":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"9:502:5902":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:42113:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11142:4319":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:12810:3177":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:43245:3621":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8613:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:16235:5253":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:9755:22841":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:8216:5686":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13116:4464":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1680:6117":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12201:8229":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:8317:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13344:4517":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15608:5094":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:22960:7194":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:12318:4392":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11634:4332":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:9938:22863":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15092:4945":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1593:5831":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:6600:3994":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11730:4340":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"15:394:21897":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:1588:3131":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12566:3583":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:5645:8351":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"6:1510:6004":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:43684:3564":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:10669:8332":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:8626:8373":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:2843:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:6768:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:43694:3563":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6758:5499":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:3209:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:41799:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6532:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10915:36469":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43379:3560":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4609:8416":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6657:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:13494:8422":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:10907:6980":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14271:4707":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2236:3221":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:3608:15686":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:42992:7497":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:13797:4621":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14475:4743":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4979:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"10:0:3031":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15214:4972":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:46031:7609":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6504:5457":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12494:4416":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:6219:3956":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5002:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"0:484:115":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"16:3196:5268":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:591:15641":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15799:5145":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:23004:7198":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:45352:7545":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:8294:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14489:4744":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11075:4304":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:42500:3156":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15010:4924":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:40291:7426":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5598:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:4501:8343":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:1850:3951":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:9984:22864":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12107:4319":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5102:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12851:4442":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:3250:34317":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:2526:7118":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:40309:7428":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:40199:7961":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7467:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7321:7475":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12819:3557":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2231:5835":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:7444:209":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:5227:8344":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:12347:950":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"1:10258:3151":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:23026:7200":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:15400:5022":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15836:5152":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:0:492":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:3502:3951":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:261:8190":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:2823:3144":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2728:5293":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:2536:5836":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:12343:1809":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"6:6788:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10018:22845":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6542:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1932:2126":{"crate_id":5,"path":["std","error"],"kind":"module"},"1:33949:3273":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:0:3036":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:37811:3277":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7559:5615":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:40208:2210":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3174:3212":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:3925:5333":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10246:3146":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:14933:4916":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13594:4571":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10573:36468":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:31:21771":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14131:4666":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:22927:7191":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:11040:3299":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12516:8233":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:7429:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:1536:7937":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2289:15670":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"6:7516:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"9:53:8094":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:43217:3616":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6379:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5212:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4964:10150":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:8587:15750":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"9:330:5881":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11537:8205":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8622:10193":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:9527:7731":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:9710:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:4986:7911":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:43366:3181":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:40277:7423":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:5273:203":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"16:4856:5349":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:7585:10158":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:7656:22804":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3623:3218":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:563:4143":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:1546:7935":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6821:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:22335:3239":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:10897:7074":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:11351:3619":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:4080:15725":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:12328:1295":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"17:13272:4505":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:5158:29515":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3244:35792":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:39947:3578":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:5929:8113":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:44446:3224":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6727:8357":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6560:5304":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:45322:7541":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14311:4711":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:25878:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6838:7148":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4811:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:1568:209":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:2562:5840":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1865:7940":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13581:4570":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2938:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:7590:5317":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:8012:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14994:4923":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:42799:7495":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:8575:7031":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4718:5344":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:13656:4069":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"4:3027:31891":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11574:5835":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:33057:3173":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7412:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:13469:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9807:22849":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5466:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:2203:7889":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:44170:7085":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:43390:3180":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11166:4306":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6621:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12508:4419":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14147:4671":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:7412:7127":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5436:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:8607:7033":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:5382:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2355:5271":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1686:6120":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:16069:5214":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:15635:5103":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:40378:4155":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:42768:7490":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13146:4468":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:15368:5014":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6634:5309":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:44397:7536":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5283:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14212:4701":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7085:5551":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4600:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:3133:3289":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:12338:876":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"6:1547:6027":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:44134:3546":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:7580:5616":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5347:5359":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:31:8299":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3899:5332":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:1171:8945":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:4468:3951":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5781:5306":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:33430:3269":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10954:22876":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:870:4000":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:41677:135":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"5:7689:34752":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:39236:3281":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:4294:7950":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:12350:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"1:40239:7417":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7973:8361":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"17:11865:7899":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:32061:3209":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:1888:7731":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:15342:5004":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10284:4289":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6409:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:45948:7606":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4456:8128":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:8162:6981":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:45401:7550":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:299:5823":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:102:5822":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:8351:6972":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:9386:233":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:40124:10166":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:21988:30915":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:33234:3265":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:40321:7429":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7755:5310":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5376:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1066:8310":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:5052:15772":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13674:4578":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7052:8263":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7888:5637":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2808:5297":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:2103:8402":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9916:22862":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2285:2831":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"6:5671:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:39108:3280":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:5108:15777":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"1:12830:3555":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:9220:15816":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11853:8221":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15197:4969":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2657:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:2303:21906":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:9088:7951":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7650:7962":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:45760:7582":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7452:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:8522:3562":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"1:41518:7471":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:2849:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:8117:10195":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:3279:5831":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:41736:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15023:4929":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:39887:7401":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1599:5832":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:12342:1827":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"6:538:5965":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:21678:7155":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:826:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13946:4641":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:11887:7105":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"1:44338:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:44188:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:39273:2700":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:3782:15724":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:32451:3261":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11256:4309":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:6060:8947":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:1428:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11567:8207":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:5922:3133":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"5:4427:8342":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:43327:3626":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:22938:7192":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:2542:5837":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:3026:2561":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:1518:5829":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:9300:8116":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:96:7859":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:9178:7064":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4865:15741":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:1903:5831":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:7561:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5112:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:39060:3216":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:13038:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:40102:7413":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5370:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3541:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:9326:34618":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:41574:3300":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:45690:7578":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:2423:2576":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:6689:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:22868:2318":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:6976:5535":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4102:15727":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:8304:8367":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:0:307":{"crate_id":4,"path":["alloc"],"kind":"module"},"18:670:7868":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11354:8201":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:7363:3128":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1971:2875":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"16:8226:22807":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4094:15726":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7379:36458":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10905:7875":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:45504:7560":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:21479:30905":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:46392:7650":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:41994:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:8236:6974":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:15582:5085":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:7295:8503":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5266:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11621:4330":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6441:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:1887:2576":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13473:4538":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15678:5119":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3475:5327":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:1628:6085":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:9205:15814":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4992:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:42074:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:8228:8366":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6670:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:3590:2585":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"17:10170:4285":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12043:8222":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6802:5511":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5329:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6480:5303":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:3264:7901":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:8150:7942":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:32032:3292":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15426:5028":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:926:4002":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:40:4492":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3810:5330":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:11209:34763":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:22201:15407":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:41727:2576":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:45711:7579":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:11906:2470":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10092:22866":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7686:8294":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:40259:7420":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:11651:7099":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2680:3945":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:4826:15751":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12408:4407":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6543:5461":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10565:1665":{"crate_id":1,"path":["core","slice"],"kind":"module"},"17:13568:4566":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:15249:4978":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:15473:5041":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:870:5829":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:12340:888":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:3229:3272":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6079:5261":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:5238:961":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:0:3037":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:3271:5833":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13375:4521":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2418:5279":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:8026:2461":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13252:4495":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:1577:7960":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:11012:34736":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:13636:3959":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:14587:4758":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:12292:8125":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:10294:7940":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12485:22989":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:40179:3627":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7549:5614":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5146:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12792:4249":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7098:5554":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:43944:7520":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:44047:3178":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:4424:5336":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11419:4319":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15058:4933":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5020:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6649:7143":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:42271:3149":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:687:3300":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:42033:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14177:4690":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7444:7954":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:218:3225":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3324:3217":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:14529:4749":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:5385:202":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"6:5445:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:598:36478":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:39913:7404":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7741:5320":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13308:4510":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:8175:8295":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5260:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12371:4447":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:40537:7440":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6494:5456":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:2289:34295":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:328:5826":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:43396:3561":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8196:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:39926:7405":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:40087:10180":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6412:22797":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:42490:7479":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:2458:5281":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:39176:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14560:4755":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:10607:3981":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13606:4574":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10661:7871":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:16079:5215":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:39196:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"14:165:21871":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43292:3627":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5219:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:32031:3291":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12300:22987":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14012:4652":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4468:5337":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:564:5978":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7366:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5528:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:41633:10204":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:4050:2554":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10252:3149":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14246:4704":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:536:3941":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"5:954:8308":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12597:4421":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4942:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:9427:7072":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"17:12225:7906":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11128:4274":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3546:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:2438:5280":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:11676:7101":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11510:8204":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2040:7136":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3472:7446":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2394:5278":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:1726:3994":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1896:3131":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"9:482:21784":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:479:136":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"1:40785:7447":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4924:6227":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5617:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13235:4492":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:12582:3585":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10250:3148":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"11:351:7926":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:21465:30910":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12443:4412":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11688:4336":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:883:5830":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5636:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15138:4951":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"10:44:5844":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6811:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"0:492:192":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"10:36:5843":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3429:15713":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11324:8198":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:6957:3139":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:3551:8337":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:651:4133":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5236:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:31940:7838":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:42592:2340":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:465:5920":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5250:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:506:3940":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:3329:5326":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:40050:7410":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:1565:6037":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"14:202:3169":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:4438:4016":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6962:5312":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11605:4328":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:586:5990":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3140:3250":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:46450:7652":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:44334:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10671:36472":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:44154:3552":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:8582:7032":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:7266:3974":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:39898:27914":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:643:4133":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12030:7900":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1621:6081":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6784:8118":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:11042:8193":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"15:327:8090":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5031:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13173:4476":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:14051:4657":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:7632:242":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"17:14372:4721":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13877:4635":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:643:2487":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:43011:3637":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7954:2318":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15992:5200":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:11252:7086":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:14402:4727":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11812:8217":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:0:550":{"crate_id":1,"path":["core"],"kind":"module"},"5:6311:3962":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12433:4410":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2618:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:2323:21932":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:32063:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:3778:5329":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:11571:8391":{"crate_id":5,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:4604:8415":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:5717:3137":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:8288:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:44348:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13999:4650":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7537:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:22666:7159":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5756:8241":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:5863:22794":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:12341:869":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"15:306:7921":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5914:5383":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:178:8104":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:2569:3129":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:46363:7649":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13363:4518":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4952:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6991:36457":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11153:7873":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:4771:5346":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:40152:8426":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:7597:7132":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:10878:8385":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1581:2576":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13437:4529":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9394:3177":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3093:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:9396:3972":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:2197:3940":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10242:119":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:46643:7670":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:0:2671":{"crate_id":17,"path":["object"],"kind":"module"},"16:7168:7068":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1559:6035":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6120:22796":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:40043:7409":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:43542:3569":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:6039:4021":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12764:3183":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:13693:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7480:3478":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:1603:8316":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1605:5833":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:5974:3099":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:5591:113":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"17:11313:4316":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13774:4616":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:37756:3276":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:8247:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12264:8231":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4757:6834":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:9147:7952":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:531:4138":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2483:659":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13899:4636":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:41719:3300":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:6047:8243":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:6295:3959":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:9313:7068":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:21949:2318":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12543:8235":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:41538:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11341:7884":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15944:4491":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:11235:7072":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10609:4056":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:3558:3286":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:4560:5340":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40076:7412":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14599:4765":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:6655:3969":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11583:8212":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2508:5283":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:21497:2318":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:3149:3264":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43869:7518":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:16121:5226":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10254:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12478:4415":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12543:3586":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:3571:29994":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:280:3994":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:32637:3260":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:39459:10119":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:1883:3299":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10137:22842":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5817:5368":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11323:3570":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:6509:185":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:21558:15324":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:8515:3567":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"18:623:36477":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:8118:5678":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2859:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6066:5402":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:39121:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:2282:8326":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13959:4644":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15301:4995":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:22993:7197":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5296:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15569:5079":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:22283:15409":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:4863:15739":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:9259:115":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5722:5307":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:41500:7470":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:30439:2608":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13455:4537":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7648:8293":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:21411:4144":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:9902:8130":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:30471:27921":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:7081:15818":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13855:4628":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:41711:3299":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:6940:5533":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11924:2618":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6650:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6427:8089":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:6924:3137":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5423:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:3614:5328":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:39286:7272":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12056:4380":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6026:7141":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:39970:10155":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:1449:155":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:4423:264":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:15521:5078":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:123:3931":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"13:0:3028":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:787:5830":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15434:5029":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10350:4291":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4959:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:2037:7886":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:9272:34402":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41582:2576":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:2855:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:22847:9975":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:40300:7427":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"9:424:21787":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:8306:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:13748:3127":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:42789:7491":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:11269:22895":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:10463:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41916:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1933:3199":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:13618:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:14260:4706":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:1142:8313":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4824:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:8502:7439":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"5:10931:6981":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:4614:5342":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5225:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:39936:7406":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12336:3608":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:2506:2968":{"crate_id":5,"path":["std","io"],"kind":"module"},"5:917:7935":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:6446:219":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:43712:3575":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:21976:3611":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4940:5352":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:8616:3301":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:42554:3156":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:3397:3131":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:10895:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:16093:5219":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:40751:2475":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:7452:7128":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5037:5355":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:12335:724":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"1:2115:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:45437:7556":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"12:0:3033":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10885:2318":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:906:3131":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5546:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:113:7862":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:10960:7026":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:1707:6128":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1580:6049":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:4074:3133":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:10969:34765":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2708:5292":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:12339:882":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:8702:7043":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"16:6098:22795":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15748:5134":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:3284:34316":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:40330:7430":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7857:5633":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:7621:4022":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:41466:7469":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:7645:3170":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10244:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:11557:8206":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10399:2492":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2694:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3319:2703":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:8155:6980":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13785:4619":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5052:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6456:22798":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:15655:5106":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:22823:7184":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:4821:7910":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:7397:36460":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:2598:8327":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:42545:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:3247:36440":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11337:3569":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2548:5285":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11214:7882":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13015:4410":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:1917:5833":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:44389:8432":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13972:4353":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:8301:5693":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:2236:7113":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5014:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:21421:30908":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6665:22799":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11064:3300":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3306:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12362:4404":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15760:5136":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14977:4921":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"0:481:225":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"16:4976:5353":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:12336:740":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"6:7446:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12929:4447":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6335:8073":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:10902:7076":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:40551:7441":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6609:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:11899:36225":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4323:8413":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:46318:7648":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:513:8192":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5557:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5949:3951":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:22598:7157":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3179:3213":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:9118:7061":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2434:15673":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:11747:3989":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:10564:7951":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12238:8230":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:150:3929":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:44212:7533":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13211:4491":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:2572:5286":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3819:3133":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4737:3158":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:13497:4542":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12175:8225":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:4243:7947":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1107:8312":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7132:5559":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:4502:4016":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:837:8302":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:1191:7959":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:931:15644":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:5064:3951":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:680:4158":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4870:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12150:4386":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:30190:9927":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:4971:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1827:7938":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"5:4712:15769":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:42807:7496":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:43305:3628":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:689:4161":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:1007:5560":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:6554:3133":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:31974:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2979:2586":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"11:2554:36447":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:41591:7475":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:10759:4319":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13986:4649":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:16223:5250":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:560:8322":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10524:7869":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14868:4880":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:44029:3558":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:2326:8309":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:765:27047":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:12337:894":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"17:10877:7874":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:41955:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:41838:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12724:22867":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:9305:8123":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:43166:7963":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:9401:3973":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:570:5981":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15814:5146":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:8448:7025":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"5:1584:3133":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10887:36470":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9781:22859":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:4352:5335":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:22738:7170":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:45337:7544":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:41674:192":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"16:6385:5443":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:9409:161":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"5:7841:4281":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6782:22800":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:39266:3283":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40766:7446":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5367:22792":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:33776:3271":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4370:3208":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12089:4383":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:5453:128":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"1:5196:8419":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:5686:5302":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:21550:2318":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2852:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:2403:3300":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:7984:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:7314:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:8184:138":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"9:357:21800":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2927:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:6007:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7389:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1671:6111":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7602:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:698:4162":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:359:8320":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:22245:15408":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:2089:6974":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15463:5036":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:45859:7587":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:31902:2584":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"11:1582:8315":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:648:2489":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:3238:3299":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:5895:8352":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4882:5350":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15376:5017":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:21448:30913":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:39104:3125":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:33:1710":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"6:5277:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:41557:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:7497:5610":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6442:5448":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:6:800":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"4:1064:3994":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:9265:2476":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6417:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:11407:2613":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"0:353:2133":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"5:6615:2475":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"16:5769:5366":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1699:6124":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:46509:7655":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5320:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12076:8224":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:8006:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:8652:7034":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:2432:3228":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"5:484:3939":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:1963:1338":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:11132:3580":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:11914:2470":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11171:3618":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:754:4176":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:7538:15590":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:43981:7521":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39158:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:7701:10184":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:22774:27917":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:14189:4692":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:640:2484":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:8492:2210":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"17:12328:4394":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:2702:8328":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6721:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:7528:5611":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:21499:15325":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:5927:5384":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4335:8414":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5400:4285":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:11604:7094":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:3287:8330":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12683:7914":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11841:7898":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5400:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:13442:27783":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:42777:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:7553:4017":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:40402:7436":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:832:7937":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13187:4477":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11443:4324":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16165:5237":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:8154:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:8750:7491":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:22307:2318":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12557:4304":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:948:8307":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11405:8202":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4265:7948":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:22388:3239":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"16:2838:5298":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:1342:8309":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:31958:2697":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4759:6836":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:4802:5347":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5314:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2936:21934":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1585:6051":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:40362:7433":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10317:4290":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1087:36448":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4921:3952":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:22916:7190":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12659:8236":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:43719:3576":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:7094:4037":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5344:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:4985:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4246:3951":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:43674:3562":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:9382:3951":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11242:7883":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"14:220:5773":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:43588:3574":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10720:36471":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12695:8237":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:46628:7669":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:8509:2492":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"17:10982:22877":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:473:5925":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12993:22869":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:3741:3994":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:214:5771":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:45986:7608":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:22682:7163":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1503:6002":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1942:3167":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:3552:3284":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:41478:7031":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13832:4625":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14038:4655":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6300:8249":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:45629:7575":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11227:8197":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11051:8194":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6664:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:22982:7196":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:15596:5091":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:46098:7612":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:80:7858":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3024:136":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"5:12344:1815":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"5:852:3300":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:11029:7062":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:41316:7455":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"0:351:2637":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"6:8259:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2497:3239":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14847:4870":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:5196:8344":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2443:3133":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15931:4477":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:11209:3632":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1692:6121":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2854:5299":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:9139:3299":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:4743:5345":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:4587:5341":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:22905:7189":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:4757:2474":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12878:10260":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6278:8074":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:7609:7134":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:10381:8629":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:479:5928":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:7339:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:42760:7489":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13509:4543":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:559:5976":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4891:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:33116:3268":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:39955:3577":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:14079:4661":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10044:22865":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:8539:15723":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"1:45521:7561":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:839:3299":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:9391:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14284:4709":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13064:4457":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14235:4702":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:491:4132":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2788:5296":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6678:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:2741:8329":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2846:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:6231:5433":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:4164:15733":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:10714:3982":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2383:3299":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:43838:7514":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:517:5953":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12808:4440":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:39024:3287":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:15701:5120":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:44158:3553":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11089:7877":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:1311:5560":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:578:5986":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:39877:7400":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3342:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:45842:7586":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:11810:8339":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:16138:5228":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:942:8305":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5137:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:11637:7098":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:9094:198":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"6:5515:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:8145:4228":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:46196:7646":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:22107:2318":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10612:7870":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:11217:7085":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:14025:4653":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:43995:10267":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:10950:127":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:4761:6838":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:729:9962":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:6915:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6519:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7955:6976":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1812:682":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:14986:4922":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13766:4614":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:8093:5675":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:403:8191":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46590:7662":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:46549:7659":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:8328:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1535:6018":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:21676:15322":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:10498:10236":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:7048:263":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7813:5625":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5083:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5457:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1485:5994":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7618:5617":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:21570:7155":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:7355:5591":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4641:5343":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:44138:3549":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:44223:10277":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:8073:5674":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:12325:458":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:22836:7185":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:43737:3578":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:624:2460":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:5409:3994":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:7348:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:2460:15683":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"17:11392:7885":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15769:5140":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:8040:3097":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:12276:8397":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14855:4873":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:40353:7432":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:46529:7657":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15445:5033":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:1890:7941":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1517:6007":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5134:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14503:4747":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6478:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:45969:7607":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:8528:7944":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:4149:3300":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:7714:3131":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:12506:3584":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4916:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:40760:7445":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7473:5406":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2998:5323":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5700:5305":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:22109:15323":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6447:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8249:2581":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:7851:2472":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6813:5512":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2528:5284":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:1480:3300":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:11682:7102":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:573:4133":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11799:7895":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:1327:8310":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6895:5527":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3103:2956":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12900:4446":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4502:5338":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3339:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12584:7873":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:11883:3631":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:7402:4005":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6844:7147":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:22:802":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:1830:3131":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15281:4988":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"8:0:3029":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:862:2576":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:8271:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15078:4941":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:6947:3138":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15190:4967":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1610:5834":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5489:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:9737:22843":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"11:1160:8314":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:45579:7565":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:8172:6982":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"1:41332:10201":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:3288:3215":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:3533:7029":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"6:523:5956":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:33175:3266":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10439:4294":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10997:4302":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15383:5018":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:23015:7199":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:295:2699":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13424:4528":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11825:8219":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:21666:2318":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:45550:7563":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5630:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:8259:5608":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6648:5474":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6342:36461":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:875:8307":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:726:4170":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11524:7894":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7998:3982":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"4:671:8400":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2596:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:10978:34759":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:8593:8372":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:9374:3966":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:6562:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:4239:3951":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:22789:27924":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:8601:7944":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7144:22802":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}