{"root":"0:0:2034","crate_version":"1.0.80","includes_private":false,"index":{"0:226:641":{"id":"0:226:641","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:727:2457":{"id":"4:727:2457","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:31816:3190-0:523:2111":{"id":"a:1:31816:3190-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:3190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:28:174":{"id":"0:28:174","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"1:12905:2519":{"id":"1:12905:2519","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12908:29547":{"id":"1:12908:29547","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:479:138":{"id":"b:1:2675-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13014:2539":{"id":"1:13014:2539","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12545:137","`FromStr`":"1:12544:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12544:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12544:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2025":{"id":"0:196:2025","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:117"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31759:237-0:523:2111":{"id":"a:1:31759:237-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:41395:10433-0:523:2111":{"id":"a:1:41395:10433-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:10433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"4:5597:3094":{"id":"4:5597:3094","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13023:31735":{"id":"1:13023:31735","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:40236"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12985:31718":{"id":"1:12985:31718","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5611:32456":{"id":"4:5611:32456","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:248":{"id":"0:217:248","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"1:12927:31706":{"id":"1:12927:31706","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43417:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:117","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:31687:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2025","0:74:2223"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:757":{"id":"0:224:757","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:252":{"id":"0:334:252","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3108:2599","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2025":{"id":"0:72:2025","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2719":{"id":"0:205:2719","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:7396":{"id":"1:12921:7396","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43123:3076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:2775":{"id":"1:12932:2775","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12949:10054":{"id":"1:12949:10054","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12400:3479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12961:31711":{"id":"1:12961:31711","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082","str::rsplitn":"1:12964:31712"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43257:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:31731":{"id":"1:13019:31731","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3095:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:248","0:218:603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:2223":{"id":"0:74:2223","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:728:2445":{"id":"4:728:2445","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13017:31729":{"id":"1:13017:31729","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39243:10348","Self::is_ascii":"1:13016:31728"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39243:10348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:193":{"id":"0:492:193","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:7826":{"id":"1:12926:7826","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43407:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:523:2111":{"id":"b:4:725-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:727:2457","4:728:2445","4:729:27675"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12916:31702":{"id":"1:12916:31702","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12918:10053","str::split_at_mut":"1:12917:31703"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:7407":{"id":"1:12922:7407","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43129:3460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12970:31714":{"id":"1:12970:31714","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3498:1705":{"id":"1:3498:1705","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39057:2596","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12979:31716":{"id":"1:12979:31716","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::rmatch_indices":"1:12982:31717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43303:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5615:32459":{"id":"4:5615:32459","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13020:31732"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12946:2783":{"id":"1:12946:2783","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::split_whitespace":"1:12924:10055","str::rsplit":"1:12952:31708"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43153:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:31703":{"id":"1:12917:31703","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12916:31702","str::split_at_mut_checked":"1:12919:31704"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2664-0:479:138":{"id":"b:1:2664-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31816:3190-0:479:138":{"id":"a:1:31816:3190-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:31816:3190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65:2025":{"id":"0:65:2025","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12964:31712":{"id":"1:12964:31712","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12254:455","str::splitn":"1:12961:31711","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43275:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1109":{"id":"0:177:1109","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13022:31734":{"id":"1:13022:31734","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:40236"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2801":{"id":"0:343:2801","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:13027:31736":{"id":"1:13027:31736","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4678:31736"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43470:3477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1109","0:179:2249","0:196:2025","0:198:2023","0:199:2024","0:200:2711","0:201:2718","0:203:2722","0:205:2719","0:207:2747"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:523:2111":{"id":"b:1:2388-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2390:27669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:352:2026":{"id":"0:352:2026","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[120,0],"end":[143,1]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:138","crate::anyhow":"0:353:2034"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:291:786":{"id":"0:291:786","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5613:10413":{"id":"4:5613:10413","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2664-0:523:2111":{"id":"b:1:2664-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:757":{"id":"0:222:757","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:523:2111":{"id":"b:1:2660-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2663:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12893":{"id":"1:12893","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12894:943","1:12895:2425","1:12896:9801","1:12897:31697","1:12899:31698","1:12902:2443","1:12903:31699","1:12904:334","1:12905:2519","1:12906:2439","1:12908:29547","1:12910:29548","1:12912:29549","1:12914:31700","1:12915:31701","1:12916:31702","1:12917:31703","1:12918:10053","1:12919:31704","1:12921:7396","1:12922:7407","1:12923:2448","1:12924:10055","1:12925:10052","1:12926:7826","1:12927:31706","1:12928:9707","1:12929:28260","1:12932:2775","1:12935:31707","1:12938:3403","1:12942:3436","1:12946:2783","1:12949:10054","1:12952:31708","1:12955:31709","1:12958:31710","1:12961:31711","1:12964:31712","1:12967:31713","1:12970:31714","1:12973:2903","1:12976:31715","1:12979:31716","1:12982:31717","1:12985:31718","1:12987:31719","1:12989:2781","1:12991:31720","1:12992:31721","1:12993:31722","1:12996:31723","1:12999:2462","1:13002:31724","1:13005:31725","1:13008:31726","1:13011:31727","1:13014:2539","1:13016:31728","1:13017:31729","1:13018:31730","1:13019:31731","1:13020:31732","1:13021:31733","1:13022:31734","1:13023:31735","1:13024:2501","1:13026:10361","1:13027:31736"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2388-0:479:138":{"id":"b:1:2388-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2390:27669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41394:2993-0:523:2111":{"id":"a:1:41394:2993-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12923:2448":{"id":"1:12923:2448","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43139:2388","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12955:31709":{"id":"1:12955:31709","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12584:3082","str::split":"1:12946:2783","prim@char":"5:12254:455","`DoubleEndedIterator`":"1:7966:131","str::rsplit_terminator":"1:12958:31710"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43203:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7932-0:523:2111":{"id":"b:1:7932-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7928:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:7934:174","1:7935:2472","1:7936:907"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:34:943":{"id":"0:34:943","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2883:246-0:479:138":{"id":"a:1:2883:246-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8019:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:943"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12992:31721":{"id":"1:12992:31721","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2032":{"id":"0:52:2032","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:2484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:528:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:2223":{"id":"0:67:2223","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:603":{"id":"0:218:603","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3095:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12924:10055":{"id":"1:12924:10055","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12925:10052"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43427:3462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12958:31710":{"id":"1:12958:31710","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12584:3082","str::split":"1:12946:2783","prim@char":"5:12254:455","str::split_terminator":"1:12955:31709"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43221:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["flatten","peekable","partial_cmp","zip","chain","map","is_sorted_by","sum","rev","enumerate","max","try_reduce","partition_in_place","map_windows","skip_while","intersperse","all","last","count","is_sorted_by_key","product","unzip","min","find","is_partitioned","any","fuse","by_ref","take_while","collect","intersperse_with","next_chunk","__iterator_get_unchecked","cmp_by","copied","take","max_by_key","cmp","find_map","try_fold","ne","inspect","map_while","for_each","advance_by","le","skip","partial_cmp_by","eq","cloned","max_by","lt","try_find","try_for_each","try_collect","scan","filter","gt","nth","eq_by","cycle","min_by_key","position","fold","collect_into","flat_map","filter_map","step_by","size_hint","ge","is_sorted","array_chunks","min_by","rposition","reduce","partition"],"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:174","0:29:1123","0:30:2474"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5612:32457":{"id":"4:5612:32457","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:294:2595","`String`":"4:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:523:2111":{"id":"b:1:2670-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12942:3436":{"id":"1:12942:3436","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41272:191","prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12914:31700":{"id":"1:12914:31700","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12260:1609","str::slice_mut_unchecked":"1:12915:31701","crate::ops::Index":"1:38889:3020"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12894:943":{"id":"1:12894:943","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12254:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12897:31697":{"id":"1:12897:31697","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2034":{"id":"0:0:2034","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[702,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the `std::error::Error` trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, the same API is almost all available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:138"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.80\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2034","0:479:138","0:523:2111","0:481:226","0:484:117","0:492:193","0:351:2533","0:352:2026","0:353:2034"],"is_stripped":false}}},"4:5596:32453":{"id":"4:5596:32453","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:335":{"id":"0:295:335","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:479:138":{"id":"b:1:2385-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2387:2363"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2475":{"id":"0:32:2475","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2390:27669":{"id":"1:2390:27669","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2747":{"id":"0:207:2747","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31759:237-0:479:138":{"id":"a:1:31759:237-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12938:3403":{"id":"1:12938:3403","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41272:191","prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:117","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2025","0:67:2223"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:481:226":{"id":"0:481:226","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:117"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"0:30:2474":{"id":"0:30:2474","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2385-0:523:2111":{"id":"b:1:2385-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2387:2363"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487:2025":{"id":"0:487:2025","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:198:2023":{"id":"0:198:2023","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:621:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:2034":{"id":"0:353:2034","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[190,0],"end":[209,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:138"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:12910:29548":{"id":"1:12910:29548","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:334":{"id":"1:12904:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12905:2519","`u8`":"5:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:28260":{"id":"1:12929:28260","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12991:31720":{"id":"1:12991:31720","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:10361":{"id":"1:13026:10361","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4681:10361"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43461:3476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2663:2452":{"id":"1:2663:2452","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:2249":{"id":"0:179:2249","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5603:32455":{"id":"4:5603:32455","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41395:10433-0:479:138":{"id":"a:1:41395:10433-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41395:10433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12902:2443":{"id":"1:12902:2443","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12132:2453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:31728":{"id":"1:13016:31728","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:605":{"id":"0:220:605","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3095:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2718":{"id":"0:201:2718","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12973:2903":{"id":"1:12973:2903","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::rmatches":"1:12976:31715"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43357:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:786":{"id":"0:215:786","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5846:1667":{"id":"4:5846:1667","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:31719":{"id":"1:12987:31719","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12996:31723":{"id":"1:12996:31723","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13008:31726":{"id":"1:13008:31726","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:523:2111":{"id":"b:1:3496-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12912:29549":{"id":"1:12912:29549","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12918:10053":{"id":"1:12918:10053","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12919:31704"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2669:786":{"id":"1:2669:786","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13011:31727":{"id":"1:13011:31727","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1123":{"id":"0:29:1123","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8075:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2675-0:523:2111":{"id":"b:1:2675-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2678:138","1:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1109"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:484:117":{"id":"0:484:117","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:138"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2025","0:489:2223"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:70"]}}},"b:4:5844-0:479:138":{"id":"b:4:5844-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5842:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5846:1667"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:2533":{"id":"0:351:2533","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:138","crate::anyhow":"0:353:2034"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"a:1:41394:2993-0:479:138":{"id":"a:1:41394:2993-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41394:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:1109":{"id":"0:25:1109","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7936:907":{"id":"1:7936:907","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:2111":{"id":"0:523:2111","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2024"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:2883:246-0:523:2111","a:1:41395:10433-0:523:2111","a:1:31816:3190-0:523:2111","a:1:31759:237-0:523:2111","a:1:41394:2993-0:523:2111","b:1:2670-0:523:2111","b:1:2675-0:523:2111","b:1:2385-0:523:2111","b:1:7932-0:523:2111","b:1:2388-0:523:2111","b:1:2664-0:523:2111","b:1:3496-0:523:2111","b:1:2660-0:523:2111","b:4:725-0:523:2111","0:26","0:33","0:31","0:526","0:35"]}}},"0:528:459":{"id":"0:528:459","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2223":{"id":"0:489:2223","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3129:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:203:2722":{"id":"0:203:2722","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2670-0:479:138":{"id":"b:1:2670-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2673:138","1:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12895:2425":{"id":"1:12895:2425","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12906:2439":{"id":"1:12906:2439","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2484":{"id":"0:53:2484","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:325:2798":{"id":"0:325:2798","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:2679:1690":{"id":"1:2679:1690","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2673:138":{"id":"1:2673:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:199:2024":{"id":"0:199:2024","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:729:27675":{"id":"4:729:27675","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:138":{"id":"0:479:138","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:2883:246-0:479:138","a:1:41395:10433-0:479:138","a:1:31816:3190-0:479:138","a:1:31759:237-0:479:138","a:1:41394:2993-0:479:138","b:1:2670-0:479:138","b:1:2675-0:479:138","b:1:2385-0:479:138","b:1:2388-0:479:138","b:1:2667-0:479:138","b:1:2664-0:479:138","b:1:3496-0:479:138","b:1:2660-0:479:138","b:4:5844-0:479:138","0:290","0:286","0:294","0:216","0:288","0:292","0:219","0:223","0:225","0:213","0:221"]}}},"b:1:2667-0:479:138":{"id":"b:1:2667-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2669:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2387:2363":{"id":"1:2387:2363","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12903:31699":{"id":"1:12903:31699","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:786":{"id":"0:287:786","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12925:10052":{"id":"1:12925:10052","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12924:10055"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43436:3478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7935:2472":{"id":"1:7935:2472","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:12976:31715":{"id":"1:12976:31715","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::matches":"1:12973:2903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43375:3471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:31701":{"id":"1:12915:31701","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12260:1609","crate::ops::IndexMut":"1:3158:3021","str::slice_unchecked":"1:12914:31700"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2666:786":{"id":"1:2666:786","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2660-0:479:138":{"id":"b:1:2660-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2663:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2628:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12919:31704":{"id":"1:12919:31704","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12918:10053"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12952:31708":{"id":"1:12952:31708","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::split":"1:12946:2783"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43171:3464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:294:2595","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12999:2462":{"id":"1:12999:2462","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13002:31724":{"id":"1:13002:31724","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13018:31730":{"id":"1:13018:31730","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13021:31733":{"id":"1:13021:31733","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:970:40236"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2674:1692":{"id":"1:2674:1692","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13024:2501":{"id":"1:13024:2501","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4680:2501"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43452:3475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:335":{"id":"0:293:335","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12989:2781":{"id":"1:12989:2781","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2219":{"id":"0:107:2219","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12928:9707":{"id":"1:12928:9707","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43445:3474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13020:31732":{"id":"1:13020:31732","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:31698":{"id":"1:12899:31698","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12897:31697"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5600:32454":{"id":"4:5600:32454","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12982:31717":{"id":"1:12982:31717","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12584:3082","`DoubleEndedIterator`":"1:7966:131","prim@char":"5:12254:455","str::match_indices":"1:12979:31716"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43321:3473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5614:32458":{"id":"4:5614:32458","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13019:31731"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:7966:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12993:31722":{"id":"1:12993:31722","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12610:3454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12967:31713":{"id":"1:12967:31713","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13005:31725":{"id":"1:13005:31725","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2678:138":{"id":"1:2678:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31687:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:200:2711":{"id":"0:200:2711","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2024"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12935:31707":{"id":"1:12935:31707","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12254:455","self::pattern":"1:12584:3082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12590:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12605:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12896:9801":{"id":"1:12896:9801","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3496-0:479:138":{"id":"b:1:3496-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31760:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5595":{"id":"4:5595","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5596:32453","4:5597:3094","4:5600:32454","4:5603:32455","4:5611:32456","4:5612:32457","4:5613:10413","4:5614:32458","4:5615:32459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3119:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2883:246-0:523:2111":{"id":"a:1:2883:246-0:523:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:523:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:7934:174":{"id":"1:7934:174","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8075:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:289:786":{"id":"0:289:786","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478-0:353:2034":{"id":"0:478-0:353:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2034","glob":false}}}},"paths":{"4:7412:2472":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:11677:3897":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12792:4151":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:4738:6739":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:16121:5128":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:1566:22092":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2854:5201":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:9336:3859":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:2440:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12362:4306":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5677:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:2287:34008":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:16212:5150":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:13855:4530":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11634:4234":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"13:226:5722":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:45079:7436":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:43873:3450":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:5352:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:1648:3859":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:41419:137":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"1:45758:7500":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:11235:6988":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:31687:2480":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:7429:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:8493:15950":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"1:41032:7345":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:581:4046":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2508:5185":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5445:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5031:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:22087:15638":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6335:7976":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:545:5869":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6505:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5370:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6657:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:21260:28623":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15957:5072":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:3829:8270":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1142:8245":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4120:8346":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:8104:7846":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:42749:7389":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12605:3455":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6927:5433":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:5553:115":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"1:39856:10394":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:43375:3471":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13485:4443":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:40110:4057":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12900:4348":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7293:3883":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7656:23031":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2394:5180":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:38942:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12264:8163":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8265:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:4250:7852":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:1478:3199":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11256:4211":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:6619:3961":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:8109:6881":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:8798:6957":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"16:5722:5209":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5598:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"10:36:5744":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:22311:7058":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:44083:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:5996:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13766:4516":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:43897:3447":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12056:4282":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10661:7775":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:22613:10202":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12647:7816":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13674:4480":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:45210:7450":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5225:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4386:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"11:1917:5734":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11764:4247":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6940:5435":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:39767:7298":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11153:7777":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:9208:8017":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14788:4720":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:1534:7841":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11583:8144":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:45646:7496":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5329:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15992:5102":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:5678:16029":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:4668:15995":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:10895:6927":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:1929:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:10924:8295":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:1547:5928":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7221:3882":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5174:6205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:787:5731":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:21447:2219":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:670:7772":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11354:8133":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12597:4323":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:42287:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:3278:5732":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7909:6877":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11367:4206":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13375:4423":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13877:4537":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13173:4378":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:4614:5244":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:40134:7328":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:43919:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:11133:6962":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:41502:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:41697:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5515:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:13024:23097":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:30250:28078":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:11524:7798":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:32608:3162":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5037:5257":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5344:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:828:3905":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13899:4538":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11825:8151":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:45196:7449":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4992:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:21333:15549":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1887:7845":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:10541:3889":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:12271:1734":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"5:5158:8276":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4824:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7306:36642":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:7348:2472":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:7378:3913":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3119:2750":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:39962:7308":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:883:8240":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:22432:7061":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7857:5535":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:41658:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4531:5241":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:12253:1105":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"17:15010:4826":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11877:4248":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:918:7840":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:1883:3198":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:21351:7057":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:40023:7318":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:37651:3177":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10027:3041":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5665:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:43221:3465":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:15102:4848":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:42902:7867":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:39991:7312":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:43436:3478":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3406:3114":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:39781:10385":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5415:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13526:4453":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:12132:2453":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4870:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:6760:3878":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:44185:7431":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:7575:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:7356:10423":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5643:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12887:4346":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:5623:3859":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7952:3890":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"17:10622:36649":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:9093:3198":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2548:5187":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8259:5510":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:12260:1609":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"4:4922:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:31729:5510":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:4909:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6811:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:8727:6947":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3108:2599":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:8301:5595":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13999:4552":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7250:8422":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:46340:7559":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:44075:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4916:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:3208:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:8704:7382":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"16:7006:8194":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4976:5255":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4568:15977":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:43073:3523":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:9144:16046":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15944:4393":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:11405:8134":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:1639:5994":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:1544:7839":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"14:202:3064":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:5864:8287":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15624:5000":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15678:5021":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:22417:7060":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5897:5280":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:9195:6968":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:5719:3859":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5266:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6763:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:11755:4246":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:45519:7475":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10769:36647":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:2591:8259":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10218:4189":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2572:5188":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1975:744":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"17:14402:4629":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4924:6128":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10982:23104":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:12270:836":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"11:2548:5739":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:43407:3461":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5546:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6379:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:9132:6965":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"0:523:2111":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"6:1526:5913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:42734:7388":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:5401:3902":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:5708:3032":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:3025:2457":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:1463:3198":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10573:36655":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:7251:3377":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40032:7319":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3029:4081":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:4127:15956":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5653:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:7891:10420":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:3597:7807":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"3:0:2923":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"11:1007:5462":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1854:7037":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:8541:15976":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:2323:22159":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3246:36166":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:7631:3066":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:39953:7007":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:1207:7785":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:1054:8241":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2443:15905":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:1741:3096":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15463:4938":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:40085:7324":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12508:4321":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:38889:3020":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:14449:4643":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:12599:3456":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:1051:8242":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13116:4366":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6562:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2838:5200":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:41999:3041":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:39057:2596":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:4266:15975":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:43129:3460":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13946:4543":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7703:3862":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9175:3073":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15333:4905":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2961:3109":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:16235:5155":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6678:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:43054:3522":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:437:4137":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4352:5237":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:7805:2368":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:7966:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6385:5345":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:6689:8289":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3251:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:9247:8308":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:45846:7504":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:11595:8292":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:43099:3077":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13046:4356":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:30218:2504":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"14:187:8442":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:14025:4555":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10044:23092":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:9059:6961":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15596:4993":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:45601:7479":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5686:5204":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:13418:3867":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:1325:8242":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8075:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:7537:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:9976:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:1063:8242":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:6305:8020":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:867:8120":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:11761:8272":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:11836:2366":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:6153:3859":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13325:4414":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10456:3966":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:22448:7065":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:5415:130":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:8536:6933":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"15:394:22124":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:8639:16012":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4882:5252":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6478:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:39683:28077":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3456:7338":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"0:0:2034":{"crate_id":0,"path":["anyhow"],"kind":"module"},"5:11120:6961":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:40075:7323":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:8160:6884":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:46256:7548":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:22471:7069":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:43760:3457":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:43112:3459":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2418:5181":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:41736:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:42971:3514":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5769:5268":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:1891:3028":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:39050:3182":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:951:8240":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10170:4187":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12683:7818":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:687:3199":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:880:5731":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:37596:3176":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:11144:36265":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12929:4349":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:30224:3099":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:4258:7853":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:39774:7299":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12213:7809":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11116:3468":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:33388:3169":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6160:22132":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:8253:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:11567:6999":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:578:5887":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8188:8230":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:12258:333":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:2379:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7888:5539":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11629:3529":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:22227:15632":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"14:165:22098":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:39672:7291":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"5:4035:2450":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:7908:2219":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:45438:7470":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:2112:8335":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:7528:5513":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:7330:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5927:5286":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2049:3116":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10877:7778":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:4422:264":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:8351:6873":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"15:327:7993":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:43648:7410":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:5863:23021":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:4724:15955":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:2269:139":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"17:14012:4554":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1663:6011":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14986:4824":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5367:23019":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:2205:7012":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:538:5866":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9807:23076":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14968:4819":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4543:2370":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:15197:4871":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:43303:3472":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5588:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9737:23070":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:45306:7456":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7928:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:2195:3848":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:12252:404":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"1:9658:757":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:13363:4420":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:31:21998":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:1653:6005":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11392:7789":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:38893:3179":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12422:4310":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:7558:28207":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4029:2456":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5122:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3329:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11313:4218":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:22073:2219":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:8402:6926":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"16:4802:5249":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:21214:28628":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:3321:8264":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:481:4033":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:11205:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"11:430:7833":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:6586:3902":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:588:15868":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:6930:3033":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:32901:3167":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:41992:3042":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:4500:3924":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:45164:7447":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:2469:3026":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:40009:7315":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13538:4456":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14066:4562":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10473:3853":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:5960:5293":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6120:23023":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14177:4592":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:40498:7338":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:8259:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:43747:7417":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:533:3849":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:44162:7430":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:774:5730":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:765:27274":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:559:5877":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:4736:6737":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:6098:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:570:5882":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:538:4043":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15400:4924":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:22364:7059":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:5736:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6880:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9679:8446":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:15655:5008":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:8258:8299":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6621:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3243:36165":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15426:4930":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:8247:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7937:3193":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:928:15871":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:11010:3892":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"14:40:4394":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:8809:6958":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3335:3183":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:102:5723":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:22232:15630":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15701:5022":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14235:4604":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:45096:7439":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"11:1066:22091":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11812:8149":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:8782:6952":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"9:357:22027":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:38845:3113":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:503:3848":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:3028:7015":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:45502:7474":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:39884:8358":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:13438:7056":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2606:2219":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11102:3469":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:42259:28082":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:14356:4622":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4570:3054":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:9254:8019":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:7043:16049":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:564:5879":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:10249:8309":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13146:4370":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:849:3199":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:39904:8359":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:11843:2366":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:8197:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4952:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:4141:15958":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5802:23020":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:523:5857":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11674:4237":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:1707:6029":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:11369:8322":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:13276:8354":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:4137:15957":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:31725:7729":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:4587:5243":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:39874:3955":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2883:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:41319:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:9781:23086":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6634:5211":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15778:5044":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:43954:10505":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1602:5734":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:40259:7331":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:41395:10433":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1585:3026":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2788:5198":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6435:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:9219:2372":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:43865:3445":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:6231:5335":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:3832:8271":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:16198:5146":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:7648:8225":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"9:392:22013":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11023:3464":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:40483:2371":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5423:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:8099:4130":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"17:15760:5038":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:721:249":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:0:2932":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6698:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"18:80:7762":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:11482:35675":{"crate_id":5,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:40283:7333":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:1862:7844":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7366:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9995:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6441:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:2151:8242":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:1098:7784":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:651:4035":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:16069:5116":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:14414:4631":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:22582:7083":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:21458:7057":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:33019:3164":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:7516:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14516:4650":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:15635:5005":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:0:2929":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3126:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6650:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10868:3466":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15058:4835":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:2140:8241":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:1494:2472":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:31848:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46236:7546":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:9340:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:8093:5577":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:4228:7851":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:46219:7545":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:40:3025":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:3737:2472":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2458:5183":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12150:4288":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13473:4440":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4891:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:2441:15904":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"1:41353:7367":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:42549:7387":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2477:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:637:2380":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:5008:923":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:39748:3475":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:608:8119":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:11027:3894":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"13:109:36631":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13187:4379":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5219:6227":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12043:8154":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:7:8231":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7618:5519":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11227:8129":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7355:5493":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4641:5245":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:12274:1728":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:13089:4360":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:3473:7806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:1910:5733":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:8073:5576":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15456:4936":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2660:5192":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"14:160:8231":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:39661:7290":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13774:4518":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4316:3052":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:11460:8323":{"crate_id":5,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:2640:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:2684:5193":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6263:5340":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:42232:7371":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:5290:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:43569:7405":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:3244:5733":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14503:4649":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:5522:8281":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13399:4427":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:43901:6986":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:11581:7000":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:0:1601":{"crate_id":5,"path":["std"],"kind":"module"},"5:10247:7861":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:6665:23026":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:22555:28079":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:497:5837":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7379:36645":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6782:23027":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8118:5580":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:10964:6963":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7473:5308":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:45231:7451":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:8742:16024":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"16:2998:5225":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5700:5207":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:10947:35668":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:11606:7002":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3603:15932":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"16:2528:5186":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:3329:5228":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6813:5414":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2628:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:11152:6986":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:10284:4191":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:12266:861":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"6:5046:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:43675:7411":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6895:5429":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:33:1620":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"17:13797:4523":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6082:3871":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:12610:3454":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:7368:3028":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1040:5462":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:4467:3859":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:5488:8277":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"6:479:5829":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4799:16004":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:45808:7502":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:8563:6934":{"crate_id":5,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:21758:3511":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12993:23096":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:42753:3535":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12107:4221":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5528:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"0:479:138":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"5:8190:6875":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:689:4063":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:8294:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46148:7542":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:9159:16045":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:836:3198":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:8446:2111":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"11:2403:3199":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:2382:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:11517:3895":{"crate_id":5,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:41344:2472":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:15176:4867":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11688:4238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:38980:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2902:22160":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7570:5218":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:42334:2241":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43778:3074":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12516:8165":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:21331:2219":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:10406:9185":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:6491:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:39829:28207":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:43002:3528":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11547:4129":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:14529:4651":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"15:0:2931":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:7461:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:41816:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:8792:3198":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"5:7794:4183":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:9824:3061":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:8341:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:8174:8297":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:7314:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:2175:23148":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5039:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:8015:8295":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:11431:2509":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:563:4045":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11605:4230":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:1828:3026":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:41405:3115":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:8226:23034":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10399:2388":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:1896:3026":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:8456:7331":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"1:43063:3525":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:43943:7424":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:21770:28636":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7695:5523":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5191:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5306:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15569:4981":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:5211:3929":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6471:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:4174:10362":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:12328:4296":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12443:4314":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:2756:7022":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15734:5029":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2936:22161":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:623:36659":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:10606:8266":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:9634:3888":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:491:5834":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:12265:717":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"5:8606:6935":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"15:306:7825":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"14:31:8231":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3669:4086":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5742:5264":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:41416:193":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"16:6749:5400":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10251:4190":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9916:23089":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:7421:7866":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:362:8253":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:465:5821":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:12116:3507":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:30186:2597":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6872:5428":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:3791:6875":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11063:8126":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:2427:15900":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6433:5349":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:909:7841":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:22496:7071":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5466:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4330:8273":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2478:5184":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:15206:4872":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:8182:8298":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"13:0:2924":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:5743:3871":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11144:3516":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:41198:7361":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6597:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:13473:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7111:5459":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14599:4667":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16093:5121":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5477:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10818:7777":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2934:3163":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9684:8033":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4560:5242":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:875:8239":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11574:5736":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11075:4206":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:44173:3119":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12201:8161":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5107:5259":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:914:7839":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:754:4078":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:12259:1577":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"4:7356:7027":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:22101:3134":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:11534:6995":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14560:4657":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:364:3841":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4031:3859":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:1771:1261":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:10843:3199":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:44065:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:96:7763":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4932:6130":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13738:4509":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15410:4927":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:9497:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2748:5196":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14994:4825":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6066:5304":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:328:5727":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7132:5461":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1580:5950":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:150:3837":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:42531:7382":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:44062:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:12127:4287":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6729:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:22099:28225":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:1680:6018":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2878:5202":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12408:4309":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:1581:3028":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5296:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:10876:140":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:2674:3853":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5189:8276":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:2203:7793":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11497:7797":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6606:5372":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:4830:5250":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:9101:7856":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:8656:6944":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"17:11016:7780":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:941:3198":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:8006:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:12226:2365":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:3364:8266":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:598:36661":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:42510:7381":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7397:36644":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:12254:455":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:42991:3521":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:3237:3198":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:256:8120":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14575:4312":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:6617:3877":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:41469:2472":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:621:2356":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:46355:7560":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:557:8254":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:4079:15953":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7539:5217":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:7545:7030":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:0:2933":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:7031:263":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7910:23033":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6609:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4395:8348":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:43889:3452":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6398:5203":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:45787:7501":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10915:36650":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:8306:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:31817:3191":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:9363:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"17:15273:4889":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:8463:2388":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"1:21456:15550":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5624:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:22482:28211":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:9345:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:16176:5144":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:21192:4046":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:40492:7337":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:9226:35670":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:4940:5254":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13986:4551":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2338:5171":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5052:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14271:4609":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:33215:3168":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40476:7336":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14723:4669":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:2536:5737":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:44116:8364":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1885:3705":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:14475:4645":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11142:4221":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2708:5194":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4837:6077":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43083:3524":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:12205:8329":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:39243:10348":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14876:4783":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9755:23068":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13972:4255":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:8393:4074":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"17:12584:7777":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:8328:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8019:2477":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12076:8156":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:3778:5231":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:21231:28634":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:22504:7072":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43877:3449":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2878:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:1566:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5347:5261":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5390:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13606:4476":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:3871:3026":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:1087:36628":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13509:4445":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4514:3954":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:46276:7550":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2644:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:43417:3463":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:403:8122":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12030:7804":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7864:3887":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:5675:6645":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"5:7994:2992":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:5891:8016":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:7446:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5006:5256":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"0:484:117":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"5:1574:3198":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:4833:757":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"4:7706:3027":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6542:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6342:36643":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:434:7834":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15836:5054":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12485:23216":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:4734:6735":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:11102:8128":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:2234:7796":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10033:3044":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:4839:15966":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5581:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:16151:5136":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:2562:5741":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:11740:8271":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:15646:5006":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13292:4408":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:41394:2993":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:12261:1695":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"17:14933:4818":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:356:8252":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5212:6226":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:9072:6962":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13594:4473":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:9259:8026":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"9:238:7382":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4985:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:7339:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8384:3067":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10068:23075":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2925:3149":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9984:23091":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7061:5452":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6915:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3123:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12621:4324":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:10020:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:15582:4987":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10137:23069":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:39981:7311":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:2768:5197":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6456:23025":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6098:23022":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6417:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44146:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:45335:7465":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:46393:7562":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:45417:7469":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:5750:6876":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:7602:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:5014:16003":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6874:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13753:4514":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:2636:5191":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6026:5301":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5636:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:3026:33859":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7473:10410":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:113:7766":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1686:6021":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12707:7819":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:43153:3466":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:3014:22162":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:1340:8241":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13581:4472":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7485:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:10904:36262":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:659:7768":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7321:7367":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:5817:5270":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12659:8168":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10905:7779":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:39844:7305":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13015:4312":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:7075:3945":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15151:4859":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14325:4616":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:8155:5586":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14091:4564":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:41064:10429":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4979:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4959:6142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10025:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:46119:7541":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:723:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:8268:15943":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:7561:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:9267:6969":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:6749:3902":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1496:5900":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:41413:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:46370:7561":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4108:8345":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:13528:3022":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7645:35610":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"18:573:4035":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:3032:2592":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:6049:9188":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:2374:5179":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12969:4351":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5260:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:8488:7850":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:10932:8283":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:43600:7409":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:725:2219":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:10228:7844":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15281:4890":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:3740:3902":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:10121:7358":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:8529:6932":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:2966:3110":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:12275:1710":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"17:11510:8136":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11841:7802":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:730:120":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6524:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:12279:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"17:15608:4996":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14386:4625":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:45181:7448":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:10866:6882":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:5235:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:45248:7452":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1585:5952":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3279:8262":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:3647:3198":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:41894:8035":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:2304:5462":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:32422:3159":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12544:3079":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10759:4221":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7497:5512":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10612:7774":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:8202:5224":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:1809:665":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:15521:4980":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11706:2514":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7168:6969":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:39070:7162":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:513:8123":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14341:4618":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:8282:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12100:3505":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6721:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:4885:6108":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5320:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13832:4527":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:39813:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:1621:5982":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6670:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:41580:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:40269:7332":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:31759:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:15931:4379":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:12267:843":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"17:12238:8162":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:46291:7551":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:5910:7043":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:21729:2219":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:7980:2357":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13252:4397":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:5912:3028":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:40124:7327":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:3196:5170":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:42313:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:5160:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:8476:3461":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"1:10988:3531":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3584:8443":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:6419:7044":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:4986:7815":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:2326:8241":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:21280:15553":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:669:8332":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:45487:7473":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3314:3181":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:6388:15845":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:22185:2219":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5400:4187":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:23064:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:45696:7498":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:2736:8261":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:16223:5152":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:3249:33997":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5075:5258":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:13400:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:14847:4772":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:10284:7051":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6664:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10035:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12371:4349":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3767:15951":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4966:8351":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14079:4563":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:9350:3880":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:217:3120":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10037:3045":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5376:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:4843:15969":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11130:3518":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13785:4521":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5200:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1671:6012":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6706:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:11089:7781":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6300:8181":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14051:4559":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1490:5897":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5671:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3354:28058":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13455:4439":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:5005:16002":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14260:4608":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12175:8157":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:41232:7362":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9886:23088":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:0:2928":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:21229:28630":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:680:4060":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5064:6197":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:515:4038":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:837:8234":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2637:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:2279:15897":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"17:15039:4834":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10029:3042":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:40094:7325":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:39818:7304":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"9:178:8007":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:0:307":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:41775:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2401:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:12464:23215":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:7428:7029":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4062:5236":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:2231:5736":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:7052:8195":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:3842:5233":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:12257:1223":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"17:12318:4294":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11621:4232":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6689:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5002:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:9213:117":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:3413:15940":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:4913:5253":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11269:23122":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:10023:121":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:11853:8153":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10819:3198":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:521:27275":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10185:4188":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:41176:28210":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:40041:7320":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15222:4876":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"9:0:2926":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12125:1609":{"crate_id":1,"path":["core","str"],"kind":"module"},"5:4841:15968":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:32960:3165":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:31743:2593":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:10666:2219":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:5061:3859":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13497:4444":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4279:7854":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:7339:3023":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11898:4250":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3369:3111":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:2234:7014":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11915:23190":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6577:2371":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"1:41328:3198":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:6460:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:735:27273":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12278:7812":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:22140:15639":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:43869:3448":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5846:5275":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:42962:3513":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:41478:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5536:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:22011:15636":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:9042:7855":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"5:9399:6974":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:9115:6964":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:1354:8246":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10236:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:4:1186":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:10498:7855":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:33561:3170":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4743:5247":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:9381:6973":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:30239:3051":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:44124:7427":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:7357:10424":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:45263:7453":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15368:4916":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:7100:3949":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11865:7803":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10390:3964":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:39732:3477":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:12273:1722":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"17:10671:36652":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:21967:15635":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15266:4888":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:531:4040":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9938:23090":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:45569:7477":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:8000:15886":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"17:12695:8169":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:46045:7539":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6442:5350":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13553:4462":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7799:5210":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:41619:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12353:4305":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:43712:7412":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:832:7841":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:10603:8264":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:12221:8028":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10954:23103":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:10389:115":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:7621:3065":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:11187:6987":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"14:214:5673":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12433:4312":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:5070:16008":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"1:43357:3470":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:9629:7846":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:43203:3467":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:39911:3526":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:31750:7156":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:7546:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14246:4606":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7845:3885":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6466:5355":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6620:5374":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10997:4204":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7813:5527":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:10813:8317":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:9328:3874":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:41210:6932":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"14:0:2930":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:726:10189":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:10911:3479":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:473:5826":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12671:7817":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:6746:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:10419:4195":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6788:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:43321:3473":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:42981:3520":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1510:5905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2712:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43123:3076":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12543:8167":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:1535:5919":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:6667:2472":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:1582:8247":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10155:4186":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:7456:2472":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:9048:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"6:1628:5986":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:5538:8282":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"9:482:22011":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12572:4221":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:9300:6972":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5277:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4864:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:39971:7309":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1723:6034":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5436:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:10837:6977":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12225:7810":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:4073:3028":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:8012:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2929:3068":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:40469:7335":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:2569:3024":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3366:8267":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:8580:8305":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:21248:28635":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:6407:15847":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:15116:4849":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2295:3134":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:5415:5262":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:12278:1320":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"1:4132:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:2297:3135":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:2383:3198":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:45277:7454":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:4148:3199":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:14372:4623":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3486:3859":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"1:41453:3198":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:15390:4921":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:29:484":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"1:45470:7472":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:7398:34007":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:4437:3924":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11537:8137":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5457:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4273:7041":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"0:492:193":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"17:13387:4424":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10710:7776":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:4103:3902":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:867:5730":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:3095:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:1903:5732":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:40053:7321":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:22154:3134":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"4:3283:33996":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6360:3871":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:726:4072":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14545:4653":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"10:0:2927":{"crate_id":10,"path":["adler"],"kind":"module"},"1:40517:7339":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:945:8239":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7400:7858":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2876:3107":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:6588:5364":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2634:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:7467:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11189:4210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:41092:7354":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"7:78:22005":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6648:5376":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6991:36638":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:7412:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:16249:5156":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:39740:3476":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:6746:8021":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:3036:9187":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:4238:3859":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:43028:3526":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:3270:5734":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10828:36651":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:7306:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2471:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:5831:5273":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:16259:4424":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12851:4344":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:9355:3881":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:12399:4308":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:11788:8148":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:2425:3123":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:10092:23093":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:4897:3860":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12768:23073":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:706:3456":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13064:4359":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:25464:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:939:8237":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5502:8280":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6581:8288":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12089:4285":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5995:5295":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:12818:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:1309:5462":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12724:23094":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6849:5427":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6948:5213":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4897:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:2696:8260":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:41048:7347":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:41396:10441":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:45049:7432":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:10600:8262":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:4590:15978":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:38905:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:42242:3051":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:8136:5583":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:14147:4573":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12949:4294":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12658:10488":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10439:4196":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13412:4429":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:6540:3028":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12590:3073":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11743:4243":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:7014:23028":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:7529:3925":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15214:4874":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13235:4394":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5756:8173":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:860:8172":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"4:6907:3032":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:30599:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:7389:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1559:5936":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7769:5525":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6608:7049":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14131:4568":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:4308:3198":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13424:4430":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:37486:3174":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:45455:7471":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:22540:28074":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9858:23087":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:6:770":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"5:3593:15913":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:45373:7467":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:46198:7544":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14111:4567":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8393:10419":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:39711:7295":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:43461:3476":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7932:6878":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"1:42494:7378":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1929:2027":{"crate_id":5,"path":["std","error"],"kind":"module"},"1:40062:7322":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13814:4526":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:8482:7848":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:4093:15955":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11128:4176":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44137:8365":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:13211:4393":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11730:4242":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:10039:3046":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15301:4897":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:8216:5588":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:1555:7840":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13344:4419":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"9:424:22014":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1826:7843":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"1:46317:7553":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4155:3105":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:3475:5229":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:42013:3044":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:38230:3178":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:4856:5251":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:532:5863":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5083:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5502:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:31760:2799":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"11:2443:3028":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:5449:15834":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"6:5181:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2592:5189":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5314:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5336:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:2033:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:645:2385":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11061:3519":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4802:15977":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6047:8175":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:8165:6887":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:1575:7864":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:43257:3469":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:16105:5123":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:45292:7455":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:859:2472":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:42502:7380":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10346:1577":{"crate_id":1,"path":["core","slice"],"kind":"module"},"17:16138:5130":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:8138:140":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:43445:3474":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:8317:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11042:8124":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:700:2472":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6353:5342":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:640:2383":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13844:4529":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3018:3171":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5250:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:1724:3902":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:2030:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15616:4999":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14489:4646":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:11540:7857":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:14868:4782":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:14587:4660":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:1426:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:9280:35678":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:8414:6927":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"5:12040:3901":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6504:5359":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6636:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4971:6147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6408:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:1107:8244":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5472:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:43726:10495":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1939:3062":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"17:12251:7811":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:41384:8360":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:15190:4869":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15748:5036":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6427:7992":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7924:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7098:5456":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11419:4221":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5796:7042":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1840:3152":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5385:4186":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:2087:6875":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12824:23095":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11557:8138":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:8029:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5565:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:31846:3106":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:11612:7003":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:43275:3468":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:8263:8025":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:12268:849":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:10885:129":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:8584:6724":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15289:4891":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:414:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:1062:3902":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2944:3161":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11051:8125":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:46000:7538":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1593:5957":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:856:8237":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2728:5195":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8431:8444":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:2271:8258":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3925:5235":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7559:5517":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15249:4880":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11026:23105":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"15:288:7820":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12300:23214":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:41336:3199":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:10524:7773":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7359:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:41010:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:279:3902":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11493:8135":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:14977:4823":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:502:5803":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2607:3039":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:710:7839":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4390:8347":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"11:800:3028":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:3304:5735":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"0:352:2026":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"6:6409:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:12362:3484":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13272:4407":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:8469:3466":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"18:589:4047":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10244:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:8555:7848":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:6738:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5134:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:1596:5733":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1676:3845":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3129:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:7388:7028":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:37541:3175":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:38960:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:31761:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6560:5206":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:35610:3173":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:15769:5042":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14038:4557":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"0:481:226":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"17:10317:4192":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11647:4235":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4747:10379":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:3264:7805":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7590:5219":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10887:36653":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"0:353:2034":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"16:4718:5246":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:39721:7296":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:16165:5139":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:12400:3479":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:7690:3026":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:396:3843":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:5146:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:45064:7435":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:2188:130":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:12264:701":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:12272:1716":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"5:5607:8283":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"6:485:5832":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3536:8269":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10676:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:46302:7552":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1923:5735":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6756:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:4811:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:4459:3953":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:9323:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46432:7578":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:0:2567":{"crate_id":17,"path":["object"],"kind":"module"},"16:7509:8217":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:3634:183":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:294:2595":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:43041:3527":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:43554:7399":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6412:23024":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"5:3934:8272":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7823:23032":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2355:5173":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15383:4920":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:11021:3893":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11242:7787":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:43885:3451":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7604:5220":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:10855:6981":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:3324:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11661:4236":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6900:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4242:8031":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:924:3910":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:33078:3166":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12189:7808":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:10842:6881":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6574:5223":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:15313:4898":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7085:5453":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7584:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11293:23123":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:16050:4407":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:43139:2388":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12494:4318":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5630:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:8300:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:15473:4943":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6519:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1485:5895":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:11170:6973":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11467:4228":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:31816:3190":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:5347:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"11:2423:2472":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:13568:4468":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:5857:8284":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:29788:10155":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:7580:5518":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:41250:7363":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6317:8185":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13437:4431":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:2274:2727":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"16:3899:5234":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5483:6355":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:16079:5117":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:5781:5208":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:45825:7503":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:33734:3172":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:12269:855":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"17:11324:8130":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:39931:7865":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:7608:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"6:6532:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6614:7048":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3341:3185":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2631:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:12584:3082":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"10:44:5745":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3603:3028":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:32842:3069":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:6426:1805":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"17:11702:4239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:4821:7814":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:3660:3199":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6278:7977":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:14436:4642":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1699:6025":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7348:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1607:5735":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:1887:2472":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1863:3151":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7927:8293":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"6:5382:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:39000:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:6273:3870":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:586:5891":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15126:4850":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11214:7786":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7755:5212":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:868:3908":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:12346:3482":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6775:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7727:5221":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5102:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:22:772":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:2808:5199":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:14298:4612":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:597:4183":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:45675:7497":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:42296:3051":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:41461:3199":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"11:351:7830":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:45713:7499":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:39800:7303":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:4087:15954":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4800:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:553:5874":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:39020:3180":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:16032:4397":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:45356:7466":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:893:3028":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6768:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:3806:8334":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:46245:7547":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14855:4775":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:40525:7341":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2281:642":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:1525:5731":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4907:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:11817:7006":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"6:5014:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"9:330:5782":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:643:4035":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11773:4328":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12323:3485":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15356:4913":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:22049:15637":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2956:3108":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:6447:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:43452:3475":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:2554:36629":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:9461:3705":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:4942:6136":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11595:4229":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:2453:15910":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"17:11715:4240":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:21202:28628":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:261:8121":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:698:4064":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:13251:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:15:2393":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:41855:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1565:5938":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"0:351:2533":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"17:11443:4226":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10018:23072":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:2369:8251":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:11700:8270":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:1072:8246":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:21339:15552":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:4268:3859":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:8426:15914":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6976:5437":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1824:7842":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"1:10488:3971":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:39755:10384":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15434:4931":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:15822:5051":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:22589:7086":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10279:10464":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:3396:3026":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:22602:7087":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:14752:4689":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15092:4847":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:45388:7468":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13308:4412":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:6471:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:2918:3188":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:7597:3930":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:491:4034":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"14:220:5675":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9671:23071":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5557:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:38809:3186":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:41541:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1517:5908":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:1446:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:45143:7442":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:11662:3530":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:6940:3034":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:6802:5413":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6480:5205":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3494:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:3575:2481":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"16:3810:5232":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4928:28601":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4482:8275":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:21734:15555":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:542:5161":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:13224:28868":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:8154:129":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2499:2864":{"crate_id":5,"path":["std","io"],"kind":"module"},"17:12289:4290":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2612:5190":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:2307:7018":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:1603:8248":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:42006:3043":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:507:4035":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6543:5363":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4502:5240":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:6714:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:7573:7033":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5617:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:6257:3867":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:9174:16047":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:8547:8304":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15138:4853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15324:4902":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:9109:2472":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:43533:10494":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6079:5163":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:3158:3021":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12454:4315":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5400:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8387:3200":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:4523:3053":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:15023:4831":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:4149:15960":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2542:5738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12863:4345":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:922:8234":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:4410:8274":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:5842:250":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:2764:2482":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:10720:36654":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:45586:7478":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"9:447:22012":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7549:5516":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:39655:3476":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:6815:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:2124:5462":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4424:5238":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11799:7799":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10534:36648":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"9:53:7997":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7633:36636":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:46265:7549":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:14284:4611":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:22199:15631":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:844:15871":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:39698:7294":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:15445:4935":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15799:5047":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:481:3847":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5361:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10031:3043":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:10648:3890":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15342:4906":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6821:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7741:5222":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4787:6040":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:742:7840":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:673:3198":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6494:5358":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:46177:7543":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4965:6144":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13959:4546":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:40507:3962":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:1169:9186":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12342:4301":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:299:5724":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:10832:6975":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:2352:8242":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:3281:8263":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1692:6022":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15168:4864":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:9492:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13723:4505":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:903:3026":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:4468:5239":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3020:138":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"1:32236:3160":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1025:8241":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"8:0:2925":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:43171:3464":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:4920:15965":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15376:4919":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:718:4069":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:7420:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43737:7413":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11567:8139":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1968:2771":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"1:45128:7441":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:12286:3483":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21278:2219":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:5936:2994":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:21882:15551":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:6692:16041":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2438:5182":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14463:4644":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:7514:15818":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1160:8246":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7686:8226":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:2101:8334":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:1734:641":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:12276:917":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"6:5489:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5236:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:9622:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:43470:3477":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4469:2593":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:43893:3446":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14311:4613":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:6181:3864":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:39940:2111":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:3240:35575":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5244:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:872:8121":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:46090:7540":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:16187:5145":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7428:23030":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:2525:7019":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15418:4928":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:2303:22133":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10950:3517":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:45111:7440":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:11829:35696":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12808:4342":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:42519:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:7503:3024":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:635:4059":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1503:5903":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:42541:7386":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:824:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:10315:8721":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12478:4317":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:10913:36260":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:811:3026":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:12237:2367":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:43881:3453":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6962:5214":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2723:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"11:123:3839":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10350:4193":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:4065:15952":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:5307:5260":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:8116:6882":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11341:7788":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:40000:7314":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:21246:28632":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7144:23029":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12388:4307":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:5445:15833":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14212:4603":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:8175:8227":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12557:4206":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:41270:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:43427:3462":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7452:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:31736:8357":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:12277:1794":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"5:3018:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"1:42271:5554":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14912:4813":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1578:2472":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:21880:2219":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11115:7782":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:45923:7537":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:7643:4074":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:2037:7790":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:12255:1755":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"6:5020:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15078:4843":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12530:7813":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:2888:2852":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:2660:3855":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:7887:10421":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:16269:4429":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:3614:5230":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:13202:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14189:4594":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5914:5285":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11166:4208":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9064:8032":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:45548:7476":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2985:3858":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:4771:5248":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3077:3112":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6629:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:38920:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:7448:2472":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:43583:7408":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3323:8265":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:8288:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:8126:6883":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:13922:4542":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:1189:7863":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:3518:6930":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"1:2435:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:8271:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:42953:3515":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:1590:5732":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:6028:3929":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"6:7984:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4876:6103":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:517:5854":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:9085:6963":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"16:6758:5401":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15814:5048":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:7585:7035":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:613:36660":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:22520:28075":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:30626:4046":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5283:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5112:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9977:2481":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1153:7862":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6532:5362":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1516:5730":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15720:5027":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}