{"root":"0:0:1930","crate_version":"1.0.78","includes_private":false,"index":{"2:12853:3309":{"id":"2:12853:3309","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8990:9663-0:516:2007":{"id":"a:2:8990:9663-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:9663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12860:29800":{"id":"2:12860:29800","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12320:3353","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:34208":{"id":"2:12893:34208","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::match_indices":"2:12890:34207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44085:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:32251":{"id":"2:12836:32251","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12835:32259"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44200:3352","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29804":{"id":"2:12872:29804","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951","str::rsplitn":"2:12875:29806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44021:3343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:29191":{"id":"2:12846:29191","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:255":{"id":"0:213:255","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"b:2:2423-0:516:2007":{"id":"b:2:2423-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2425:26444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:259":{"id":"0:328:259","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[75,0],"end":[75,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:2:2738-0:472:134":{"id":"b:2:2738-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:7866:839":{"id":"2:7866:839","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:873":{"id":"0:30:873","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3165:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:213:255","0:214:596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197:2619":{"id":"0:197:2619","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfind","nth_back","rfold","advance_back_by","try_rfold"],"trait":{"name":"DoubleEndedIterator","id":"2:7896:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:28:2376"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:516:2007":{"id":"0:516:2007","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[402,0],"end":[404,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:195:1920"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:19","a:2:2989:3056-0:516:2007","a:2:8990:9663-0:516:2007","a:2:2949:253-0:516:2007","a:2:8989:2888-0:516:2007","a:2:2932:243-0:516:2007","b:2:2420-0:516:2007","b:2:2727-0:516:2007","b:2:2423-0:516:2007","b:2:2733-0:516:2007","b:2:2738-0:516:2007","b:2:3566-0:516:2007","b:2:7862-0:516:2007","b:2:2723-0:516:2007","b:5:687-0:516:2007","0:29","0:31","0:22","0:519","0:27"]}}},"2:12811:34198":{"id":"2:12811:34198","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:744":{"id":"0:211:744","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2732:744":{"id":"2:2732:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29791":{"id":"2:12830:29791","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12831:29792"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:34205":{"id":"2:12869:34205","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12504:2951","str::split":"2:12857:2684","prim@char":"1:12032:451","str::split_terminator":"2:12866:34204"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43985:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:1930":{"id":"0:347:1930","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[190,0],"end":[209,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:472:134"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["chain","flat_map","filter_map","step_by","le","is_sorted","by_ref","array_chunks","min_by","rposition","lt","reduce","any","partition","flatten","peekable","all","zip","is_sorted_by","count","skip","sum","rev","max","try_reduce","partition_in_place","map_windows","skip_while","intersperse","is_sorted_by_key","product","unzip","eq","min","find","is_partitioned","fuse","ne","take_while","collect","intersperse_with","next_chunk","__iterator_get_unchecked","cmp_by","map","copied","max_by_key","find_map","gt","size_hint","try_fold","inspect","map_while","for_each","advance_by","partial_cmp_by","cloned","max_by","try_find","cmp","try_for_each","try_collect","scan","ge","filter","nth","enumerate","partial_cmp","eq_by","cycle","min_by_key","take","position","fold","last","collect_into"],"trait":{"name":"Iterator","id":"2:8005:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:24:170","0:25:1050","0:26:2375"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12903:34212":{"id":"2:12903:34212","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:34215":{"id":"2:12916:34215","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:34892":{"id":"5:5552:34892","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2496","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:29792":{"id":"2:12831:29792","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12830:29791"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:218:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:283:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12884:2862":{"id":"2:12884:2862","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatches":"2:12887:34206"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44121:3344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:29669":{"id":"2:12928:29669","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39968:29676","Self::is_ascii":"2:12927:29138"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39968:29676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:29142":{"id":"2:12929:29142","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:717":{"id":"0:218:717","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2736:134":{"id":"2:2736:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:32:60":{"id":"0:32:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:873":{"id":"2:12808:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:2115":{"id":"0:103:2115","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:63:2119":{"id":"0:63:2119","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2963":{"id":"5:5537:2963","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:455":{"id":"0:521:455","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[401,9],"end":[401,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:29673":{"id":"2:12933:29673","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2737:1618":{"id":"2:2737:1618","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1921":{"id":"0:192:1921","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:477:113"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2376":{"id":"0:28:2376","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8005:175","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:474:232":{"id":"0:474:232","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[455,0],"end":[455,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:477:113"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"2:12828:34201":{"id":"2:12828:34201","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1535","str::slice_mut_unchecked":"2:12829:34202","crate::ops::Index":"2:3228:2939"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:134":{"id":"0:472:134","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[376,0],"end":[378,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:172","a:2:2989:3056-0:472:134","a:2:8990:9663-0:472:134","a:2:2949:253-0:472:134","a:2:8989:2888-0:472:134","a:2:2932:243-0:472:134","b:2:2420-0:472:134","b:2:2730-0:472:134","b:2:2727-0:472:134","b:2:2423-0:472:134","b:2:2733-0:472:134","b:2:2738-0:472:134","b:2:3566-0:472:134","b:2:2723-0:472:134","b:5:5809-0:472:134","0:284","0:282","0:286","0:212","0:217","0:288","0:215","0:209","0:219","0:290","0:221"]}}},"0:201:2620":{"id":"0:201:2620","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1919":{"id":"0:194:1919","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"1:621:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:744":{"id":"0:287:744","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3189:2651","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:634"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2932:243-0:472:134":{"id":"a:2:2932:243-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:1036":{"id":"0:21:1036","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12822:29767":{"id":"2:12822:29767","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:29802":{"id":"2:12863:29802","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split":"2:12857:2684"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43935:3338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:34214":{"id":"2:12907:34214","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:717":{"id":"0:220:717","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9914:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9895:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:516:2007":{"id":"b:5:687-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:689:2358","5:690:2346","5:691:3312"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68:1921":{"id":"0:68:1921","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2932:243-0:516:2007":{"id":"a:2:2932:243-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:691:3312":{"id":"5:691:3312","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:34890":{"id":"5:5543:34890","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:34200":{"id":"2:12817:34200","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:472:134":{"id":"b:2:2727-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:195:1920":{"id":"0:195:1920","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:340":{"id":"0:289:340","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[401,9],"end":[401,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2436:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:521:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:1036":{"id":"0:173:1036","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7865:2373":{"id":"2:7865:2373","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"2:12931:29144":{"id":"2:12931:29144","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2738-0:516:2007":{"id":"b:2:2738-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2741:134","2:2742:1616"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12835:32259":{"id":"2:12835:32259","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12836:32251"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44191:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:2440":{"id":"2:12925:2440","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12465:133","`FromStr`":"2:12464:2948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12464:2948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12464:2948","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:485:199":{"id":"0:485:199","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[636,0],"end":[638,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3178:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:598"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12902:34211":{"id":"2:12902:34211","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3566-0:472:134":{"id":"b:2:3566-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12816:2344":{"id":"2:12816:2344","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12059:2354"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1921":{"id":"0:61:1921","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:21:1036"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8989:2888-0:472:134":{"id":"a:2:8989:2888-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:25:1050":{"id":"0:25:1050","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8005:175","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:253-0:472:134":{"id":"a:2:2949:253-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12898:34210":{"id":"2:12898:34210","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2358":{"id":"5:689:2358","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:2989:3056-0:472:134":{"id":"a:2:2989:3056-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:3056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2723-0:472:134":{"id":"b:2:2723-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2726:2353"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12910:2363":{"id":"2:12910:2363","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12878:29808":{"id":"2:12878:29808","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:516:2007":{"id":"b:2:2727-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2729:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12938:34218":{"id":"2:12938:34218","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:34218"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44234:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:744":{"id":"0:283:744","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471-0:347:1930":{"id":"0:471-0:347:1930","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[272,0],"end":[272,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:347:1930","glob":false}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7949:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:30:873"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:170":{"id":"0:24:170","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"2:12809:2326":{"id":"2:12809:2326","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:29768":{"id":"2:12824:29768","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:29672":{"id":"2:12932:29672","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:29141":{"id":"5:5555:29141","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12931:29144"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:34889":{"id":"5:5540:34889","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:339":{"id":"2:12818:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12819:2420","`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2145":{"id":"0:175:2145","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:34202":{"id":"2:12829:34202","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1535","crate::ops::IndexMut":"2:3232:2940","str::slice_unchecked":"2:12828:34201"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2648":{"id":"0:203:2648","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:173:1036","0:175:2145","0:192:1921","0:194:1919","0:195:1920","0:196:2612","0:197:2619","0:199:2623","0:201:2620","0:203:2648"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3568:1631":{"id":"2:3568:1631","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39781:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:29138":{"id":"2:12927:29138","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2119":{"id":"0:70:2119","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2729:744":{"id":"2:2729:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:285:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:346:1922":{"id":"0:346:1922","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[120,0],"end":[143,1]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:134","crate::anyhow":"0:347:1930"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"2:12838:34203":{"id":"2:12838:34203","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44181:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:3276":{"id":"2:12849:3276","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42021:197","prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:472:134":{"id":"b:2:2733-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2741:134":{"id":"2:2741:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32441:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:8989:2888-0:516:2007":{"id":"a:2:8989:2888-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8989:2888","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:48:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:113","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:61:1921","0:63:2119"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12813:34199":{"id":"2:12813:34199","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12811:34198"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:29806":{"id":"2:12875:29806","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12872:29804","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44039:3342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:29674":{"id":"2:12934:29674","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:36164"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:9488":{"id":"2:12937:9488","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:9488"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44225:3350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:34888","5:5537:2963","5:5540:34889","5:5543:34890","5:5551:34891","5:5552:34892","5:5553:9590","5:5554:29140","5:5555:29141"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:222:634":{"id":"0:222:634","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2375":{"id":"0:26:2375","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2682":{"id":"2:12900:2682","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:744":{"id":"0:285:744","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:211:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:214:596":{"id":"0:214:596","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3165:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2420-0:516:2007":{"id":"b:2:2420-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2422:2271"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:7862-0:516:2007":{"id":"b:2:7862-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8005:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7858:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7864:170","2:7865:2373","2:7866:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:345:2434":{"id":"0:345:2434","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:134","crate::anyhow":"0:347:1930"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:0:1930":{"id":"0:0:1930","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[691,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the `std::error::Error` trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, the same API is almost all available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:472:134"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.78\")]","#![feature(error_generic_member_access)]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::let_underscore_untyped, clippy::missing_errors_doc,\nclippy::missing_panics_doc, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::needless_doctest_main,\nclippy::new_ret_no_self, clippy::redundant_else,\nclippy::return_self_not_must_use, clippy::struct_field_names,\nclippy::unused_self, clippy::used_underscore_binding,\nclippy::wildcard_imports, clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:471-0:347:1930","0:472:134","0:516:2007","0:474:232","0:477:113","0:485:199","0:345:2434","0:346:1922","0:347:1930"],"is_stripped":false}}},"2:12810:34197":{"id":"2:12810:34197","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2733-0:516:2007":{"id":"b:2:2733-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2703:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2736:134","2:2737:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2691:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480:1921":{"id":"0:480:1921","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[605,4],"end":[607,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12904:34213":{"id":"2:12904:34213","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12529:3328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:29143":{"id":"2:12930:29143","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:34888":{"id":"5:5536:34888","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2691:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:291:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:291:340":{"id":"0:291:340","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1928":{"id":"0:48:1928","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:49:2385"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12819:2420":{"id":"2:12819:2420","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1640"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:2340":{"id":"2:12820:2340","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42021:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:7965":{"id":"2:12837:7965","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44171:3335","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:29809":{"id":"2:12881:29809","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:2402":{"id":"2:12935:2402","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:2402"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44216:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:29811":{"id":"2:12913:29811","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2420-0:472:134":{"id":"b:2:2420-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2414:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2422:2271"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:113":{"id":"0:477:113","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[603,0],"end":[615,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:472:134"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:480:1921","0:482:2119"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:103:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:66","0:58"]}}},"2:12833:7607":{"id":"2:12833:7607","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43893:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2612":{"id":"0:196:2612","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:195:1920"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:2346":{"id":"5:690:2346","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:472:134":{"id":"b:2:2730-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12843:2676":{"id":"2:12843:2676","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2425:26444":{"id":"2:2425:26444","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:2119":{"id":"0:482:2119","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[611,4],"end":[614,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3199:139","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12826:29769":{"id":"2:12826:29769","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10593:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:32245":{"id":"2:12839:32245","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44209:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5811:1593":{"id":"5:5811:1593","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:29810":{"id":"2:12840:29810","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2385":{"id":"0:49:2385","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:5809-0:472:134":{"id":"b:5:5809-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:319:2699":{"id":"0:319:2699","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[53,0],"end":[53,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"a:2:2989:3056-0:516:2007":{"id":"a:2:2989:3056-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2989:3056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2949:253-0:516:2007":{"id":"a:2:2949:253-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:281:2496","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2785:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:113","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"2:32441:2381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42019:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:68:1921","0:70:2119"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5554:29140":{"id":"5:5554:29140","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12930:29143"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12807":{"id":"2:12807","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12808:873","2:12809:2326","2:12810:34197","2:12811:34198","2:12813:34199","2:12816:2344","2:12817:34200","2:12818:339","2:12819:2420","2:12820:2340","2:12822:29767","2:12824:29768","2:12826:29769","2:12828:34201","2:12829:34202","2:12830:29791","2:12831:29792","2:12832:7595","2:12833:7607","2:12834:2349","2:12835:32259","2:12836:32251","2:12837:7965","2:12838:34203","2:12839:32245","2:12840:29810","2:12843:2676","2:12846:29191","2:12849:3276","2:12853:3309","2:12857:2684","2:12860:29800","2:12863:29802","2:12866:34204","2:12869:34205","2:12872:29804","2:12875:29806","2:12878:29808","2:12881:29809","2:12884:2862","2:12887:34206","2:12890:34207","2:12893:34208","2:12896:34209","2:12898:34210","2:12900:2682","2:12902:34211","2:12903:34212","2:12904:34213","2:12907:34214","2:12910:2363","2:12913:29811","2:12916:34215","2:12919:34216","2:12922:34217","2:12925:2440","2:12927:29138","2:12928:29669","2:12929:29142","2:12930:29143","2:12931:29144","2:12932:29672","2:12933:29673","2:12934:29674","2:12935:2402","2:12937:9488","2:12938:34218"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5553:9590":{"id":"5:5553:9590","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8990:9663-0:472:134":{"id":"a:2:8990:9663-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8990:9663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3566-0:516:2007":{"id":"b:2:3566-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3564:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3568:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2423-0:472:134":{"id":"b:2:2423-0:472:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2939:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:26444"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2422:2271":{"id":"2:2422:2271","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:34216":{"id":"2:12919:34216","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2774:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12887:34206":{"id":"2:12887:34206","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::matches":"2:12884:2862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44139:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2723-0:516:2007":{"id":"b:2:2723-0:516:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2700:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2697:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2726:2353"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12890:34207":{"id":"2:12890:34207","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12893:34208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44067:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2702":{"id":"0:337:2702","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[98,0],"end":[98,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12922:34217":{"id":"2:12922:34217","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12504:2951"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12524:3329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:2349":{"id":"2:12834:2349","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43903:2289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:34204":{"id":"2:12866:34204","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12504:2951","str::split":"2:12857:2684","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7896:127","str::rsplit_terminator":"2:12869:34205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43967:3341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:34209":{"id":"2:12896:34209","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2623":{"id":"0:199:2623","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9944:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9939:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2932:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:598":{"id":"0:216:598","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3165:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:34891":{"id":"5:5551:34891","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2742:1616":{"id":"2:2742:1616","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42164:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2707:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7864:170":{"id":"2:7864:170","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8005:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:2726:2353":{"id":"2:2726:2353","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2700:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:2684":{"id":"2:12857:2684","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12504:2951","`DoubleEndedIterator`":"2:7896:127","prim@char":"1:12032:451","str::split_whitespace":"2:12835:32259","str::rsplit":"2:12863:29802"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43917:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12509:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:7595":{"id":"2:12832:7595","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43887:2945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:707:3330":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15631:5419":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:45927:7633":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:16076:5531":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:5634:5656":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:7284:7227":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:1883:3065":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:80:7901":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5661:5660":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12828:4741":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:849:3066":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4543:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:14950:5226":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:23316:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6415:5748":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13695:4913":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46852:7668":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10374:4322":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2697:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"11:1066:20891":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40396:32153":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5971:4350":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:44636:3322":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46051:7638":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:1703:6412":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13976:4954":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:766:26022":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:1142:8352":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7754:8432":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47884:7725":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6047:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43985:3339":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:12285:3358":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40859:7528":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11313:8003":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46222:7645":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6128:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:7510:7234":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:16109:5538":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:44724:15146":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40620:8384":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40456:3350":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2986:3055":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"11:0:2763":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14786:5175":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6041:21822":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15345:5323":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5384:21818":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:4417:5630":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:1063:8349":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14485:4704":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:3738:7208":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:867:6120":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15117:5264":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:351:7969":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:8321:15062":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:41790:7548":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12077:8265":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:507:6227":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:7644:7750":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2321:5563":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2205:2628":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:2975:7215":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7616:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4738:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:5992:4288":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10822:7798":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:47242:7690":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8984:2273":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4902:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:671:7911":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6718:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12596:7958":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44652:3325":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11657:4638":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:10792:7755":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:13157:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13663:4906":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:945:8345":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4461:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11576:4629":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:2542:6128":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5381:8415":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:9914:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15689:5436":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5727:5665":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44907:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:1910:6123":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"6:495:6222":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5696:21819":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:1893:7236":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15659:5428":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:401:8229":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8286:9626":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:11045:4367":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4595:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42374:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40483:7498":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:2554:35327":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12310:4701":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8308:7805":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3732:8408":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10067:4580":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:29:480":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"2:3480:2981":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:48226:7732":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:4447:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:22263:2115":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"7:78:20805":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4922:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8562:7827":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7556:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5816:5677":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:10430:8000":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2352:2992":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:0:2468":{"crate_id":17,"path":["object"],"kind":"module"},"2:44234:3351":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15507:5385":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:7663:8430":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:32441:2381":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:13108:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5500:8420":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4388:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12396:4710":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:7365:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7862:5929":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:2562:6131":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2519:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5085:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:1902:3018":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:614:35351":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15566:5400":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3001:2934":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:9603:8158":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:5:1706":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"11:787:6121":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12052:4680":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13322:4821":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:928:9497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:3600:5622":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"0:485:199":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"2:43015:32947":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6569:5603":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5140:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4455:6500":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:4212:4282":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4028:9607":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14822:5205":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11978:8264":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:3830:5625":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:11144:7830":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13235:4806":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:2048:7208":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:533:6247":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:1439:3066":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8220:3335":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:3460:7945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:15480:5373":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15279:5308":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:21314:33575":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:580:6272":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12244:4693":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6879:5823":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6456:5752":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6530:4259":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11065:4600":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2785:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:590:4446":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:8195:5978":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:4520:4307":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:4527:5633":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:5602":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:15868:5464":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:9954:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2744:5587":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11178:7621":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:12320:3353":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8011:9589":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:16170:4816":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:40516:7503":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15224:5290":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"0:345:2434":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"0:0:1930":{"crate_id":0,"path":["anyhow"],"kind":"module"},"2:39656:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:42147:15116":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:42019:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:2304:5852":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:3994:9606":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13182:4799":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4854:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:2569:2943":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:5833:7239":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2622:8398":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22757:32151":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14887:5215":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1596:6342":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:1537:6303":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2997:3016":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4783:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44181:3337":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4173:8372":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:1541:2930":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7915:8434":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:12059:2354":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13832:4934":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:699:4463":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11755:8261":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11014:7921":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44334:7605":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:47166:7688":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:16062:5528":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12202:22011":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9274:3579":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:2428:5574":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46259:7647":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:39698:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12127:7949":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:4773:7953":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:8990:9663":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:43831:3398":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:4928:7954":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:10391:4323":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:15367:5328":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6968:21826":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15133:5268":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2144:4276":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12180:7951":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:23854:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:2443:2930":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:3217:6124":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:40788:7522":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46620:7663":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3394:4282":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11256:8240":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15049:5245":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"15:306:7964":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22793:7285":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12191:4682":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:14266:5014":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4613:5636":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6318:5737":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6332:5595":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:7633:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16180:4821":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7318:5883":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7474:8324":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:903:3235":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:1270:5852":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:41998:7564":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10532:8400":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:727:4471":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11476:6126":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:8050:5966":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:2326:8347":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:11459:8246":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4411:4282":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12445:8275":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"14:221:6065":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1639:6376":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:2089:2983":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:40845:4456":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:7651:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:10583:2115":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12972:4751":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:12052:1639":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7610:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22786:7282":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2694:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:8115:5973":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:11453:4371":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3032:2935":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:3032:5617":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12459:4598":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:1734:6424":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:6370:1706":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"14:187:8543":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2907:5594":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:30723:32159":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2826:2383":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:7351:7985":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:4197:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:40869:7529":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:41979:7563":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12850:4686":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5905:5687":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:7604:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7622:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14778:5174":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39616:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:7529:4575":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:504:4276":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2436:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40412:7494":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14765:5167":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3278:8404":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8200:7532":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8330:7054":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1697:6411":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:21517:9725":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:23161:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:2380:5572":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8001:8436":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44712:7624":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6686:4259":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"13:110:35329":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:9891:21869":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1718:6419":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15212:5289":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12335:4704":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40727:7513":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5910:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:13403:2987":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8959:7837":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12115:7948":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7102:21827":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10473:4363":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8551:7826":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:40698:7509":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5023:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:6162:4349":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:2031:7929":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2332:3002":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:1879:3019":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:2124:5852":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7792:21830":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4616:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8842:7832":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4496:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10471:35343":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:3225:6122":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:4305:8156":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:16032:5520":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:434:7973":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3065:3036":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5969:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3315:5620":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11369:4620":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:475:6211":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7639:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1538:2373":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:42167:199":{"crate_id":2,"path":["anyhow","Result","Ok"],"kind":"variant"},"16:2881:5593":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11800:4642":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:5757:4282":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:9946:2903":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4631:2916":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8006:8168":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"18:609:8226":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:15062:5251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:9598:8546":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:2151:8349":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5941:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:46081:7639":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6100:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6485:5598":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12051:1638":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6753:5804":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:45997:7636":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7848:7754":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8850:3065":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:9128:7842":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:2450:5575":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:10163:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5859:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13285:4815":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2943:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2722:5586":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15337:5322":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:364:4252":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:46574:7661":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:13310:4333":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:903:3065":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2989:3056":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13254:4811":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:3818:3235":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:1486:6121":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:48383:7743":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:21530:7256":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:46498:7658":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4635:7065":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:640:2284":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11141:7926":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13676:4908":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"9:426:20814":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14399:5038":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14041:4960":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6086:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:2169:21945":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"9:0:2761":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:774:6120":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6401:5597":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:710:7978":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44297:14874":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3564:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:22067:2115":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:14145:4996":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7554:5611":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4575:4308":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12432:7952":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:4647:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12230:4688":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:837:8340":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:44648:3327":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:14194:5003":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13202:4800":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:13095:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9624:21866":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:22332:9812":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:5435:5654":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:3230:35297":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7523:5907":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:435:4531":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15101:5261":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44894:7627":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10293:2289":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42215:3066":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:7330:2373":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2788:5589":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:6811:9720":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:14904:5217":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7513:5906":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21915:2115":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:43052:2913":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7599:4361":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2911:4342":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3594:3065":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:1863:1923":{"crate_id":1,"path":["std","error"],"kind":"module"},"17:13516:4868":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40820:7525":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43967:3341":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"11:875:8345":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:30781:32163":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:11290:4369":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13383:4832":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12014:2267":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:16087:5536":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"12:0:2764":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:46404:7656":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:1891:2930":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6682:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:12529:3328":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1495:7980":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4129:7996":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7128:7838":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:3584:7946":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10726:35340":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9790:21886":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"14:165:20897":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:7896:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8281:7804":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11476:8408":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:48292:7738":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42649:8160":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13463:4854":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14170:5000":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:10203:7250":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4050:9610":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:951:8346":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3099:3044":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47276:7691":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10925:21902":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40471:14908":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12049:1640":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:32477:3735":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:4798:4343":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2600:4323":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43492:7587":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4578:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:596:6281":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:5995:5555":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:6484:2930":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:177:8147":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:12031:1032":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:7657:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5051:8414":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4835:5642":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:548:6256":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6687:5790":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5955:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:2548:6129":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7481:32156":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5044:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:2526:5578":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:5599":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:836:3065":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:2973:34180":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:6540:8426":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2062:8362":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11549:4627":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14934:5223":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:42997:2913":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5760:21820":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13754:4921":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:43720:3388":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:1534:3065":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10986:7832":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:10016:21867":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:44200:3352":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2972:2358":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:357:8391":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11321:4613":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3044:3031":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:40999:7532":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:3011:3027":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2339:5565":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:8239:5900":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:43841:3399":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:430:7972":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9730:21884":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11507:4622":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10953:8420":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11632:4634":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:5673:5600":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8213:3340":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13162:4789":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:2423:2373":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:10962:8233":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40448:3351":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12659:21870":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11294:7928":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7702:7206":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:687:3066":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14413:5041":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:47426:7692":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15527:5391":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8493:9672":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43307:7586":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4159:7998":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15747:5446":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15903:5494":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:46382:7655":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:149:4247":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:6596:8936":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:22506:7257":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6012:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6819:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:2969:20960":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6079:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2368:9549":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:3409:3050":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1887:2373":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:14346:5034":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11126:8236":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40577:9530":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:48246:7734":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46671:7664":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:44348:7608":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12536:7955":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:46550:7660":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3428:32221":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:481:4432":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11226:8237":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5068:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3366:7539":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11604:4631":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4878:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7284:7568":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:23285:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:7858:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:21920:9728":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:3251:6125":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14969:5227":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40497:14909":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4462:5631":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:15680:5434":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40535:7504":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6545:5764":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:44209:3348":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6268:35337":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13742:4919":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40777:7521":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8796:8000":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:4986:5647":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:43821:3400":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7568:5612":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:15184:5281":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10881:21901":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13935:4947":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4968:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:22559:7258":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:43729:3389":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:41836:7555":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6929:5827":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8814:7830":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:7854:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6204:8117":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"7:31:20798":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10840:26663":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22346:3001":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:43070:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7015:5842":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:2231:6126":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15003:5239":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13097:4771":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:555:6259":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7497:7232":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:6013:8933":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42156:2982":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:30711:2913":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:13948:4949":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"9:507:6193":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13478:4860":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:21268:33568":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:3165:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:1603:8355":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:7388:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:634:8359":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:6741:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48266:7736":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2284:20932":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:12209:3357":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43092:2137":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:10786:3340":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:21458:9726":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:4566:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5049:5649":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4989:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7391:21828":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9968:21890":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:30887:32160":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22421:9805":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:14896:5216":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"9:450:20812":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:811:3235":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:39742:3047":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22695:7270":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:690:4462":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10950:8232":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6156:5727":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:48208:7731":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2209:9543":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41807:9599":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:7559:2932":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12718:21892":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:9896:2382":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"13:226:6112":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1896:3235":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:21283:33566":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22741:32162":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:10941:3338":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11041:4613":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:44121:3344":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3196:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:23130:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:4456:8375":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4914:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44833:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:357:20827":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6666:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4628:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7643:2115":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13909:4944":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:44085:3347":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:44843:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:14843:5210":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:44660:3320":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"19:0:1129":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:2518:8397":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12153:7950":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12301:4700":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12366:22012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9026:8169":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:501:6224":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3239:8402":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12584:8277":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:43027:5944":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11619:2266":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11355:7868":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1301:8347":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11690:8256":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12387:22013":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1496:6285":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:856:8343":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40490:7499":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:645:2286":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6107:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42761:2905":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40530:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:736:26021":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10944:2410":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:46182:7643":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:14087:4984":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12898:21893":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15027:5241":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:40426:7495":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:16049:5522":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:7346:7228":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:46596:7662":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2548:5579":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:42335:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:636:4458":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11269:4598":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:9948:2904":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:4444:4284":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:12053:1636":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5921:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4807:14902":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11243:7927":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4814:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:41223:2272":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15321:5319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4710:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44632:3319":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:4949:5646":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3199:8400":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"14:31:8337":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12486:4715":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:2488:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4516:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9479:4362":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11395:8242":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15980:5508":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:8205:21832":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7828:5925":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:41009:7533":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14439:5043":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4336:7238":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40667:7984":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:44440:7611":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14662:5081":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22703:7271":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13787:4929":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6249:4350":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43260:7579":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:4641:5637":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:893:2930":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13419:4837":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8326:8442":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:4020:2930":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4939:1099":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:6426:2272":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7436:5700":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4569:9644":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6169:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7003:4299":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5104:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:1710:6415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14509:5059":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7343:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6813:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:755:4477":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6600:21824":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4151:7997":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3764:5623":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:5946:7240":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11727:8259":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:39676:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12003:2265":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:511:8230":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10520:35345":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:886:4267":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:202:2929":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15725:5440":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6159:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:482:4335":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44936:2986":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6610:4354":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:569:6267":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8828:7831":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7006:8302":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:44477:7612":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:7367:2373":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:10265:1502":{"crate_id":2,"path":["core","slice"],"kind":"module"},"17:12797:4740":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8274:7803":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:2383:3065":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:11215:7862":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:15311:5316":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:45973:7635":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8545:3065":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7732:2887":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12560:7956":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:6764:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:7949:2378":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10757:7851":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10767:7754":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:3888:5626":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"15:327:8133":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:46452:7657":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11767:7942":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6944:35333":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:5662:4282":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:4584:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42095:2373":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11485:8252":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4549:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41209:7536":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:9950:2905":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6467:5753":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5075:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44067:3346":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:14921:5218":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2406:5573":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7931:7208":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:62:15364":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7694:5613":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:10738:8457":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:1556:6123":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:30695:2969":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:7422:2943":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5117:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14221:5005":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44949:7631":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:42987:7570":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:1107:8351":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11666:4639":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4847:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1315:8353":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:4182:4282":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:582:4445":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10510:7913":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3189:2651":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14698:5112":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:44216:3349":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3388:3048":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:5027:8378":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:9939:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:41956:7803":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13648:4901":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:44512:7617":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8237:9598":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10198:9563":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12921:4704":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:43660:7986":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44664:3321":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:11547:3404":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14470:5049":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"13:0:2758":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6792:5817":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:7403:15058":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3403:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45951:7634":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:10737:3065":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:9944:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4870:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1570:6326":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5322:5652":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:23254:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"14:160:8337":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11593:7873":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1072:8353":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"5:3196:35298":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44886:8390":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21637:9723":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15733:5443":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3415:3052":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39632:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:15356:5327":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15177:5280":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2472:5576":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11215:4610":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:8005:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:1758:7987":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15961:4799":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:5004:4282":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:13130:33320":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:46528:7659":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7923:8435":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12033:1656":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42296:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1521:6295":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3081:3040":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4038:9608":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40384:7491":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:533:4336":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:47212:7689":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12255:4697":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:12035:1149":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11590:4630":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:10868:3392":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4742:9618":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10940:8432":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:7660:5913":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4964:9655":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:6842:3240":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2932:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:32589:3059":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5612:5601":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2654:2115":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11469:8247":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"0:346:1922":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"16:2359:5571":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3053:3038":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2596:5581":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41920:32146":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13273:4812":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5111:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:3687:4259":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:6194:8167":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11370:8429":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:9186:31109":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:32502:7356":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:3160:31891":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6114:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"15:394:20923":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:2670:5584":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3398:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:7645:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"9:486:20811":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:44525:3331":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:44319:7599":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3199:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6071:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13347:4823":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:2662:8399":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:2236:35189":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:21957:33571":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10803:7918":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6658:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9918:21889":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40464:3349":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5712:5662":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:96:7902":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11399:7936":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5897:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1550:6122":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3966:9603":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:23223:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:15671:5430":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11958:4674":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11523:4624":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:47632:7723":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10852:21900":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5648:8280":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6261:8116":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:9743:2923":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6346:8132":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12356:4707":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21256:33568":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11497:4621":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:12509:2941":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10422:7912":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:914:7978":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11001:8235":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10102:4581":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3988:9605":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15267:5305":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:719:4468":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:8146:7797":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10813:35346":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:9147:7843":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2691:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13334:4822":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:7855:7755":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6901:5605":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5746:8421":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1024:4259":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42104:7568":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7597:35332":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7692:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6781:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15013:5240":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6896:4356":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:42070:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:3016:3026":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:22819:9602":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4977:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:909:7980":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:7633:3966":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:15374:5330":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10896:4596":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7668:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:5928:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:31257:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:12735:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6913:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12037:1502":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:1873:2924":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:7598:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14373:5036":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14497:5052":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:557:8393":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13584:4872":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43277:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2810:5590":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:12575:14868":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8169:9558":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:6070:4345":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6248:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:42754:2903":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7523:4289":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:21300:33573":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46241:7646":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:3251:7944":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12758:4737":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11048:3393":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:33:1546":{"crate_id":2,"path":["core","stringify"],"kind":"macro"},"17:261:8228":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10535:8402":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2939:2700":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:3443:8407":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6804:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4491:9628":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:32488:8383":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:1811:1186":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:14282:5015":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10406:4328":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12418:8273":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15037:5242":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:6369:7241":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:12269:3356":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44191:3336":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6059:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:9956:2907":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13922:4946":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:44491:14875":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:42164:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:32495:2494":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:46976:7685":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10618:35344":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9895:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:4774:5640":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22278:9811":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:44021:3343":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2586:4339":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5743:5667":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4830:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:16134:5544":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12930:21894":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3491:8547":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1902:2672":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10657:4613":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:1025:8347":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6818:5818":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4529:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:8181:5616":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3323:9586":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:44139:3345":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:4604:2270":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4740:9616":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:8167:8336":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:6553:7246":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:12246:3359":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11991:4677":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13491:4864":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"7:0:1685":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11340:7867":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13869:4938":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:31285:4445":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:47962:7726":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:7287:15066":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:1007:5852":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:1203:7924":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41773:7546":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14251:5010":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7503:5609":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5829:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:42610:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9651:21883":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13882:4647":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7580:4359":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4185:8373":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2320:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:41023:7534":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4884:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:2942:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:15:2294":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6960:8301":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11168:21919":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:16016:5515":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:3241:8403":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:4745:5639":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:1969:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13365:4831":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2994:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8300:7993":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12474:4613":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:2979:2493":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:538:4442":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13056:4762":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7041:5843":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:43887:2945":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7582:5909":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:7817:15064":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"10:0:2762":{"crate_id":10,"path":["adler"],"kind":"module"},"1:2202:8396":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"14:40:4786":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4700:9653":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1501:6287":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40736:7515":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4808:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:574:6269":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9102:2941":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4955:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:123:4250":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41232:7538":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"9:237:7581":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43799:3402":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10569:35341":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4311:8412":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15125:5266":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:4053:5628":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14385:5037":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3280:8405":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:542:6253":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13436:4845":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:2426:2772":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:48170:7730":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:47774:7724":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11617:4632":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7736:5915":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:624:35349":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:22392:9804":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:43252:7577":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43739:3395":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11345:4618":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4789:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6560:4249":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:6564:4315":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11714:8257":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:521:26023":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40640:8385":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:6120:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:742:7979":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:8991:8157":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:16004:5513":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:5798:5672":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12324:4702":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:564:4444":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:48360:7742":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1664:6395":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11307:7863":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12999:4752":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"15:288:7959":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43893:3334":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:7838:3636":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5992:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2525:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10968:26667":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8991:26672":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:5574:5596":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:8134:5976":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12614:21891":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5963:8282":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1546:6309":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7434:9496":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43903:2289":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"16:6361:5740":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8453:7581":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:48086:7728":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7462:5902":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5082:8414":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13407:4836":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:2983:8932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:281:2496":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:12504:2951":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2414:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:123:15419":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:14235:5008":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:1160:8353":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2380:9555":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12103:8269":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"10:36:6134":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:22239:9810":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:10338:8940":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:14989:5235":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1131:8931":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11932:7943":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3178:2500":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10538:8404":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"14:7:8337":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:588:9487":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12746:4736":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4719:5638":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11197:7842":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3036:3034":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:830:4265":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:6:729":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:4220:2975":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:16160:5548":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:883:8346":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42223:2373":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:7306:4270":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3837:8410":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:5877:2930":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:47006:7686":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:45907:7632":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11516:8409":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:5780:8163":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15235:5294":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:3191:6123":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:8312:2933":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:23347:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7467:7229":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:1781:2965":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:21628:2115":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44656:3326":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:21246:4445":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:14359:5035":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3425:7801":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1796:7989":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15546:5397":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4893:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4506:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6927:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40759:7519":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44171:3335":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40369:3350":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4703:9627":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8403:7815":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:41265:7542":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:0:2759":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4906:9651":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11027:4568":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15192:5282":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12273:4741":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:4806:5641":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3022:3029":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43786:3401":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5015:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6226:8288":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:43711:3390":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6604:2373":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7901:7757":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:2370:9550":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:880:6121":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4535:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7492:5903":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5152:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4889:5644":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1115:7981":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4473:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11155:4603":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15535:5392":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:922:8340":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12510:4716":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:1507:6290":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:46352:7654":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1682:6402":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:13348:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:22720:32161":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:40689:7507":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44365:7609":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:1819:3579":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:21302:33563":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4449:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:48255:7735":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3095:3043":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:859:2373":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8891:7834":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4351:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6868:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3193:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:13182:8381":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:8281:5985":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4821:9615":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:14001:4956":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11779:4640":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:43043:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11194:21920":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4915:9652":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:2703:7222":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:8989:2888":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3443:2978":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:5415:8418":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:43268:7580":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8858:8002":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:5344:4259":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:44644:3323":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5974:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43749:3396":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:599:35350":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40717:7512":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7090:5851":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:10829:3353":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7371:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5830:5678":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10035:4578":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13707:4915":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:588:6277":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:42079:3065":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6844:5819":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4947:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:6559:7245":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:6083:20931":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14057:4965":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5419:4579":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:48345:7741":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3673:2930":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:22069:9724":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12548:8276":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:1691:6408":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:621:2257":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7067:5849":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"9:393:20813":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14878:5211":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12953:4748":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:21456:2115":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:4676:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:483:6216":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11981:8466":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:3049:20961":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:39774:3049":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5403:4578":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3980:9604":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:15160:5272":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:7821:15063":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15253:5298":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:7634:3236":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:2183:7212":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13145:4786":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:32481:5900":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1789:3235":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2330:3001":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:9942:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:3087:3041":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6376:21823":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4042:9609":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7618:3235":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:489:6219":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:5825:2889":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:1676:4256":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:1054:8347":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:48132:7729":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:39781:2497":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:832:7980":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6136:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:5982:5696":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:1917:6124":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:700:2373":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5033:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6279:5734":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10315:4587":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10172:4583":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:16146:5547":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:7865:7756":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11034:4366":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:42571:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40797:7523":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:1774:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43935:3338":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4603:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7689:4364":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:5885:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4440:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7782:5917":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15519:5388":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10780:7857":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6696:5791":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3325:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:7450:4123":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:2197:7932":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4556:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6961:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2940:2977":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:563:6264":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:12029:3380":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1151:7982":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:1562:6124":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11382:7870":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:2140:8347":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10608:7915":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5017:5648":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:9577:717":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"11:299:6114":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:4252:3065":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44502:7613":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:1040:5852":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46306:7648":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5004:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6499:5615":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7544:5908":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5052:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4364:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:790:4262":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10155:8449":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:15557:5398":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:23099:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:6189:5732":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3075:3039":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4383:8413":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3040:3032":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14296:5017":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3482:2382":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12009:4613":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4755:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1591:6340":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:21285:33577":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4666:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1567:6125":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:52:8137":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2864:5592":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4637:7067":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12220:4686":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2354:9383":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1576:6328":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11412:8243":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39968:29676":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13896:4943":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:14181:5001":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10941:8231":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2305:20958":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15108:5263":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8920:9693":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:42137:8386":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8352:7806":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3936:2351":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3930:2357":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8904:9694":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2992:2976":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:14757:5164":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3915:5627":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:3104:3045":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:40647:3401":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:12524:3329":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12701:4734":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:5571:9677":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2504:5577":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15645:5421":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:9971:7559":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:660:7907":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3147:2979":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:10155:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5009:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4908:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6243:8292":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:48422:7744":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:7267:2988":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4764:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:4167:9625":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10775:7917":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7548:2931":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:1505:7978":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9014:8445":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9559:21868":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:42491:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7717:2258":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9860:21888":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:23068:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:15087:5259":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4488:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:48307:7739":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43812:3397":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13083:4770":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"0:474:232":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"2:44413:7610":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:13299:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:918:7979":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:22155:9808":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:3510:9578":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6691:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"9:330:6172":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:1094:7923":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:12045:3382":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2700:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:9021:8166":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:2256:7218":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7708:5614":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40563:7505":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42768:2906":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:3060:3035":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:6466:4353":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:42452:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14099:4986":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10337:4588":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2574:5580":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3006:3030":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4557:5634":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:11020:3343":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:23378:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8385:9659":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13724:4918":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2417:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11612:2266":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4989:32202":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3070:3037":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:8097:5970":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:12039:1621":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:40829:7526":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:23192:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:41247:4317":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:11062:3391":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:10906:3406":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7867:3060":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46204:7644":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6742:5803":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:4379:2914":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4434:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6898:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8866:2373":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44924:7630":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11426:7937":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:42413:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15855:4785":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:4344:5629":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:328:6117":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22628:7260":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:30689:2405":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:507:4434":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10242:4585":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7540:2268":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:3065:4480":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15612:5414":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5632:4350":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:43861:2946":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:41238:7539":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4092:3066":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9952:2906":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13026:4758":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12345:4706":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9943:21872":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6263:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12140:8270":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:0:2768":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13121:4785":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13309:4819":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5363:5653":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:48235:7733":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2703:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:1688:4282":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4401:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10988:7920":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:363:8392":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15244:5297":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:654:15774":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:47088:7687":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9034:7838":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:119:15418":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:6700:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4744:9619":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:40:2989":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13218:4804":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13989:4955":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4724:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7613:8331":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8226:7993":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:10762:7853":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12380:4709":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:4530:2494":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:266:4259":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11158:7831":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14021:4959":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:39795:7362":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:15329:5320":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"0:516:2007":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"2:44851:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:23409:7290":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:9196:7847":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10432:35339":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4800:6626":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4862:5643":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4776:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4428:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4480:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10761:3066":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13395:4835":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2618:5582":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10667:35342":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22612:7259":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:5753:8424":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22807:7286":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11449:4524":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46103:7640":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:0:2767":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:113:7905":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11701:7938":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:11621:2415":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13448:4848":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7360:35335":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8872:7833":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4824:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22426:9803":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1760:7988":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:41943:7562":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12410:4713":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7621:21829":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:2954:2753":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2483:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8137:4473":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:42747:2904":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:10593:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4932:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:7738:9519":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:7380:28974":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:44225:3350":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:7573:4473":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7296:2930":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6915:5606":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4231:8411":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:12054:1535":{"crate_id":2,"path":["core","str"],"kind":"module"},"6:5891:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"14:215:6063":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:46930:7684":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10308:4319":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:1087:35328":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12055:1695":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46718:7665":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10831:26675":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11170:26678":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5130:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10578:4364":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4998:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:8072:5967":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:4625:9606":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:1424:3065":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4239:14885":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"18:652:4434":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:15432:5372":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4686:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5088:5650":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12572:7957":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15990:5509":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:6837:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10247:8632":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:5154:4288":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1650:6384":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11816:4375":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3166:28684":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:15294:5312":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6017:21821":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4610:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:6351:9814":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:30426:9601":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:3670:9600":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11817:21987":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6798:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22290:32917":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:6430:8425":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9069:7841":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:1286:8349":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15301:5313":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5123:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:7028:4303":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13633:4897":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:2352:8349":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:9813:21887":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3607:3066":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:39517:3053":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5866:5685":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2644:5583":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:8359:8544":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"0:477:113":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"17:14324:5023":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6893:5825":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10974:4598":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:40547:32156":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43760:3403":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9164:8446":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11439:8244":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:9958:2908":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6352:5739":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:673:3065":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6425:5749":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4745:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1558:6318":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:11580:3405":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:8535:7823":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6543:9689":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:3048:3033":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"14:0:2765":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12038:1535":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22377:2115":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:46749:7666":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3807:2373":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:6943:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39603:3046":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7026:4357":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6889:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:2469:3235":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46121:7641":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7342:35334":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7054:5846":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11113:7925":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44687:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6228:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3232:5562":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40610:4309":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15842:4771":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:42207:3065":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:42257:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:527:6244":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:396:4254":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:0:1527":{"crate_id":1,"path":["std"],"kind":"module"},"2:48024:7727":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11052:7916":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:43875:3333":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:16098:5537":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:8190:2007":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4469:9627":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44668:7621":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12464:2948":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8207:2289":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:1536:7983":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4584:2915":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10076:7989":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:2655:2901":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:41216:7537":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11675:4720":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1477:6120":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:2403:3066":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14633:5061":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:4451:8374":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6861:3241":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1516:7979":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7668:7751":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12264:4698":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:2474:7219":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1455:2373":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:40768:7520":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8292:8441":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:3655:4485":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"0:472:134":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"16:4585:5635":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:2154:7210":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14208:5004":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:5121:5651":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13809:4930":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:637:2281":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11563:4628":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5982:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10137:4582":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:3028:3028":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12091:7947":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15493:5379":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:7181:3250":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:16123:5542":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:9416:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11536:4626":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15079:5256":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:2536:6127":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1051:8349":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:5068:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:40707:7510":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15943:4789":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"10:44:6135":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22668:7268":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:3797:5624":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3232:2940":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:46019:7637":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21509:2115":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:46152:7642":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4180:7999":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:21511:9722":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40375:7490":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:5395:8417":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:681:4459":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14156:4998":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8973:8164":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:800:2930":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2707:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43507:7588":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12784:4738":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8157:7798":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11998:8171":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:12056:1245":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:22292:3001":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12872:4743":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11645:4635":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:3184:3065":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11743:7941":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:574:4434":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:7316:35168":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3201:8401":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:102:6113":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12290:4699":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:5650:3240":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2696:5585":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:15710:5439":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:212:2990":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4101:4282":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1923:6125":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6721:21825":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42530:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13297:4816":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8232:7995":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10051:4579":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4375:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12166:8271":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7651:8332":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10559:7914":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:644:4434":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:939:8343":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1913:16765":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6711:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13961:4951":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7269:35336":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5146:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"8:0:2760":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:2228:7935":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:1903:6122":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43289:7581":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6531:5762":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:6871:3242":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:22644:7264":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:12050:1637":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11388:7871":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11088:4602":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2774:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10716:7916":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14122:4995":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10915:7919":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"15:0:2766":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:256:8227":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13856:4935":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11605:31530":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4698:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9474:7991":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:2369:8358":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:5939:5693":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:515:4437":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15200:5283":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:42232:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:4639:7069":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:3753:8362":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22680:32148":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:531:4439":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:48281:7737":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:3461:5621":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4497:5632":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"0:347:1930":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"17:11307:8241":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:536:5553":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13684:4910":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:4050:4259":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7276:2373":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7534:5610":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46772:7667":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:844:9497":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3163:28689":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:42170:133":{"crate_id":2,"path":["core","result","Result","Err"],"kind":"foreign_type"},"2:43917:3340":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6583:5766":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2832:5591":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:7679:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:1821:7990":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5431:8419":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:43511:3410":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:41257:7540":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3343:3235":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:4921:5645":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:8154:8333":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11537:8410":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:595:4575":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:1582:8354":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:4:1112":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12684:4545":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1528:6298":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7136:8004":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:14312:5021":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7843:7991":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1604:6347":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:5568:6975":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7906:7758":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15384:5335":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12029:4679":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5639:7749":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:14426:5042":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9678:21873":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1632:6372":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3228:2939":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:21639:7256":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10207:4584":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:14455:5045":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7375:2373":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:40676:2007":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22200:9809":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:8315:3067":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15589:5413":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:12518:3330":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:9411:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39556:2980":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:4968:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:10095:8007":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2933:20959":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8476:7818":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4860:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7884:21831":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10097:8448":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:48330:7740":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41750:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13504:4865":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:30655:2498":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:11034:3342":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:6146:4333":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:1674:6401":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1514:6293":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:39720:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40436:7496":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13765:4922":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40810:7524":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6222:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:6983:8523":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:1545:3235":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6934:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3500:9557":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3091:3042":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44545:2942":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:10979:3394":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11945:8262":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5867:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:15287:5311":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4381:4284":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40745:7516":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4523:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44640:3324":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3735:8409":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:5392:14861":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7722:5604":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6513:5754":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:26256:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44039:3342":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:5388:14860":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6386:5745":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:1566:20892":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43299:7585":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42087:3066":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10785:35347":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4841:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:491:4433":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:1685:4259":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8936:9695":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9759:21885":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:9048:26670":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2766:5588":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11051:4368":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:6117:4282":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21945:3386":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}