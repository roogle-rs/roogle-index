{"root":"0:0:2542","crate_version":"1.0.86","includes_private":false,"index":{"0:74:2731":{"id":"0:74:2731","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8332:185":{"id":"1:8332:185","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:13781:31376":{"id":"1:13781:31376","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13867:32323":{"id":"1:13867:32323","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3230":{"id":"0:200:3230","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2532"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3104:860":{"id":"1:3104:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:353":{"id":"0:293:353","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13783:32296":{"id":"1:13783:32296","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12658:1772","str::slice_mut_unchecked":"1:13784:32297","crate::ops::Index":"1:40277:3541"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:351:3054":{"id":"0:351:3054","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:150","crate::anyhow":"0:353:2542"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13764:2947":{"id":"1:13764:2947","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13841:32313":{"id":"1:13841:32313","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::match_indices":"1:13839:32312"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44902:3986","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:8347":{"id":"1:13795:8347","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44988:3980","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:32324":{"id":"1:13872:32324","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13797:9897":{"id":"1:13797:9897","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45026:3975","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3237":{"id":"0:205:3237","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2996":{"id":"0:32:2996","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:119","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:32869:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2533","0:74:2731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3571:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:5962-0:479:150":{"id":"b:4:5962-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5960:265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5964:1832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2790-0:533:2619":{"id":"b:1:2790-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2792:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13877:32329":{"id":"1:13877:32329","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:40231"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33003:3703-0:533:2619":{"id":"a:1:33003:3703-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33003:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13844:32314":{"id":"1:13844:32314","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:479:150":{"id":"b:1:3967-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3558:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:263","0:218:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13878:32330":{"id":"1:13878:32330","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:40231"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2542":{"id":"0:0:2542","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[730,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the [`std::error::Error`] trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, almost all of the same API is available and works the same\nway. To depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:150","`std::error::Error`":"1:3158:150"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.85\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2542","0:479:150","0:533:2619","0:481:238","0:484:119","0:492:205","0:351:3054","0:353:2542","0:532:2534"],"is_stripped":false}}},"1:13779:31375":{"id":"1:13779:31375","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:32295":{"id":"1:13772:32295","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2731":{"id":"0:67:2731","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:479:150":{"id":"b:1:3110-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13874:32326":{"id":"1:13874:32326","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42831:10648-0:479:150":{"id":"a:1:42831:10648-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42831:10648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:786:28007":{"id":"4:786:28007","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:3005":{"id":"0:53:3005","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2792:2885":{"id":"1:2792:2885","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8330-0:533:2619":{"id":"b:1:8330-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8332:185","1:8333:2993","1:8334:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:538:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3099-0:533:2619":{"id":"b:1:3099-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:487:2533":{"id":"0:487:2533","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13796:32302":{"id":"1:13796:32302","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44998:3976","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13798:30837":{"id":"1:13798:30837","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:2534":{"id":"0:532:2534","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[127,4],"end":[150,5]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:150","crate::anyhow":"0:353:2542"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"a:1:42830:3513-0:479:150":{"id":"a:1:42830:3513-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42830:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13826:32308":{"id":"1:13826:32308","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12652:492","str::splitn":"1:13824:32307","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44856:3997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1212","0:179:2757","0:196:2533","0:198:2057","0:199:2532","0:200:3230","0:201:993","0:203:3240","0:205:3237","0:207:3265"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:291:860":{"id":"0:291:860","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:3317":{"id":"0:343:3317","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:107:2727":{"id":"0:107:2727","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:3109:1859":{"id":"1:3109:1859","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:150":{"id":"0:479:150","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:32945:249-0:479:150","a:1:3322:261-0:479:150","a:1:3357:3701-0:479:150","a:1:33003:3703-0:479:150","a:1:42830:3513-0:479:150","a:1:42831:10648-0:479:150","b:1:2790-0:479:150","b:1:2793-0:479:150","b:1:3095-0:479:150","b:1:3099-0:479:150","b:1:3102-0:479:150","b:1:3105-0:479:150","b:1:3110-0:479:150","b:1:3967-0:479:150","b:4:5962-0:479:150","0:213","0:216","0:219","0:221","0:223","0:225","0:286","0:288","0:290","0:292","0:294"]}}},"1:13784:32297":{"id":"1:13784:32297","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12658:1772","crate::ops::IndexMut":"1:3628:3542","str::slice_unchecked":"1:13783:32296"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13839:32312":{"id":"1:13839:32312","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::rmatch_indices":"1:13841:32313"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44884:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:860":{"id":"0:287:860","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:533:2619":{"id":"a:1:3322:261-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13831:32310":{"id":"1:13831:32310","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:32328":{"id":"1:13876:32328","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3969:1872":{"id":"1:3969:1872","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40446:3116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:32332":{"id":"1:13883:32332","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:32332"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45051:3984","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13870:3060":{"id":"1:13870:3060","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13412:149","`FromStr`":"1:13411:3598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13411:3598","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13411:3598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5712:33064":{"id":"4:5712:33064","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8447:2998","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:1027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13816:32304":{"id":"1:13816:32304","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::split":"1:13812:3081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44752:3993","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:222:830":{"id":"0:222:830","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:185":{"id":"0:28:185","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"4:5715:33065":{"id":"4:5715:33065","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:860":{"id":"0:289:860","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5728:33069":{"id":"4:5728:33069","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13875:32327"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:538:496":{"id":"0:538:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5729:33070":{"id":"4:5729:33070","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13876:32328"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13852:32318":{"id":"1:13852:32318","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13482:3970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["map","map_while","for_each","advance_by","partial_cmp_by","cloned","enumerate","max_by","try_find","try_for_each","try_collect","all","scan","filter","nth","eq_by","cycle","any","min_by_key","position","fold","collect_into","le","flat_map","filter_map","size_hint","step_by","partial_cmp","lt","ge","chain","is_sorted","array_chunks","take","min_by","rposition","reduce","partition","gt","flatten","collect","peekable","zip","is_sorted_by","sum","count","rev","max","try_reduce","partition_in_place","map_windows","skip_while","cmp","last","intersperse","is_sorted_by_key","product","unzip","min","find","by_ref","is_partitioned","fuse","take_while","intersperse_with","next_chunk","ne","__iterator_get_unchecked","cmp_by","copied","max_by_key","eq","find_map","try_fold","skip","inspect"],"trait":{"name":"Iterator","id":"1:8499:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:185","0:29:1226","0:30:2995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13814:10256":{"id":"1:13814:10256","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13240:3978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:533:2619":{"id":"b:1:3967-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3969:1872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13794:10254":{"id":"1:13794:10254","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13793:10257"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45017:3977","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2540":{"id":"0:52:2540","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:3005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:1:3095-0:533:2619":{"id":"b:1:3095-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3098:2973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:25:1212":{"id":"0:25:1212","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2532":{"id":"0:199:2532","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:479:150":{"id":"b:1:2790-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3110-0:533:2619":{"id":"b:1:3110-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3113:150","1:3114:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:481:238":{"id":"0:481:238","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:119"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"0:334:267":{"id":"0:334:267","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:177:1212":{"id":"0:177:1212","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:479:150":{"id":"a:1:3322:261-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13792:2969":{"id":"1:13792:2969","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44720:2910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13793:10257":{"id":"1:13793:10257","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13794:10254"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45008:3981","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13777:31374":{"id":"1:13777:31374","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13884:10287":{"id":"1:13884:10287","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13812:3081","`str::find`":"1:13805:3918"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:119","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2533","0:67:2731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:203:3240":{"id":"0:203:3240","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13788:32300":{"id":"1:13788:32300","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13787:10255"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13855:32319":{"id":"1:13855:32319","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13800:3293":{"id":"1:13800:3293","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5717:33066":{"id":"4:5717:33066","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:32306":{"id":"1:13821:32306","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13453:3601","str::split":"1:13812:3081","prim@char":"5:12652:492","str::split_terminator":"1:13819:32305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44802:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:9993":{"id":"1:13765:9993","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:32294":{"id":"1:13768:32294","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13766:32293"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:2619":{"id":"0:533:2619","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2532"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:32945:249-0:533:2619","a:1:3322:261-0:533:2619","a:1:3357:3701-0:533:2619","a:1:33003:3703-0:533:2619","a:1:42830:3513-0:533:2619","a:1:42831:10648-0:533:2619","b:1:2790-0:533:2619","b:1:2793-0:533:2619","b:1:2822-0:533:2619","b:1:3095-0:533:2619","b:1:3099-0:533:2619","b:1:3105-0:533:2619","b:1:3110-0:533:2619","b:1:3967-0:533:2619","b:1:8330-0:533:2619","b:4:782-0:533:2619","0:26","0:31","0:33","0:35","0:536"]}}},"1:13787:10255":{"id":"1:13787:10255","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13788:32300"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:7978":{"id":"1:13791:7978","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44710:3979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:3315":{"id":"0:325:3315","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"4:5711":{"id":"4:5711","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5712:33064","4:5713:3612","4:5715:33065","4:5717:33066","4:5725:33067","4:5726:33068","4:5727:10568","4:5728:33069","4:5729:33070"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:217:263":{"id":"0:217:263","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"0:484:119":{"id":"0:484:119","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:150"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2533","0:489:2731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:62","0:70"]}}},"b:1:3105-0:479:150":{"id":"b:1:3105-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13786:32299":{"id":"1:13786:32299","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13785:32298","str::split_at_mut_checked":"1:13788:32300"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42831:10648-0:533:2619":{"id":"a:1:42831:10648-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42831:10648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13774:3040":{"id":"1:13774:3040","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33003:3703-0:479:150":{"id":"a:1:33003:3703-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33003:3703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:220:656":{"id":"0:220:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3558:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13790:7967":{"id":"1:13790:7967","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44704:3595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13819:32305":{"id":"1:13819:32305","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13453:3601","str::split":"1:13812:3081","prim@char":"5:12652:492","`DoubleEndedIterator`":"1:8394:134","str::rsplit_terminator":"1:13821:32306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44784:3996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:696":{"id":"0:226:696","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13834:3422":{"id":"1:13834:3422","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::rmatches":"1:13836:32311"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44938:3991","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:32317":{"id":"1:13851:32317","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13879:32331":{"id":"1:13879:32331","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:40231"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3108:150":{"id":"1:3108:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:218:654":{"id":"0:218:654","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3558:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353:2542":{"id":"0:353:2542","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[200,0],"end":[219,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:150"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:2795:28001":{"id":"1:2795:28001","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13775:2961":{"id":"1:13775:2961","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13808:3951":{"id":"1:13808:3951","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13859:32320":{"id":"1:13859:32320","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13802:32303":{"id":"1:13802:32303","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3102-0:479:150":{"id":"b:1:3102-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3104:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:2757":{"id":"0:179:2757","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2533":{"id":"0:196:2533","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:119"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13829:32309":{"id":"1:13829:32309","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:32327":{"id":"1:13875:32327","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5725:33067":{"id":"4:5725:33067","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5727:10568":{"id":"4:5727:10568","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:198:2057":{"id":"0:198:2057","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:683:2878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1212"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13836:32311":{"id":"1:13836:32311","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::matches":"1:13834:3422"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44956:3992","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:3701-0:479:150":{"id":"a:1:3357:3701-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3113:150":{"id":"1:3113:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32869:3001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:4:782-0:533:2619":{"id":"b:4:782-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:784:2978","4:785:2966","4:786:28007"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3105-0:533:2619":{"id":"b:1:3105-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3108:150","1:3109:1859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:492:205":{"id":"0:492:205","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13824:32307":{"id":"1:13824:32307","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601","str::rsplitn":"1:13826:32308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44838:3998","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5713:3612":{"id":"4:5713:3612","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1027":{"id":"0:34:1027","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13848:3299":{"id":"1:13848:3299","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13773:352":{"id":"1:13773:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13774:3040","`u8`":"5:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2995":{"id":"0:30:2995","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:993":{"id":"0:201:993","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3098:2973":{"id":"1:3098:2973","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2533":{"id":"0:72:2533","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2731":{"id":"0:489:2731","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3599:155","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13771:2964":{"id":"1:13771:2964","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12976:2974"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:32298":{"id":"1:13785:32298","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13787:10255","str::split_at_mut":"1:13786:32299"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2793-0:479:150":{"id":"b:1:2793-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:28001"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478-0:353:2542":{"id":"0:478-0:353:2542","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2542","glob":false}}},"0:207:3265":{"id":"0:207:3265","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10656:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3147:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3063:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3357:3701-0:533:2619":{"id":"a:1:3357:3701-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:8333:2993":{"id":"1:8333:2993","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8334:985":{"id":"1:8334:985","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:784:2978":{"id":"4:784:2978","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:295:353":{"id":"0:295:353","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3158:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:785:2966":{"id":"4:785:2966","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:3513-0:533:2619":{"id":"a:1:42830:3513-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42830:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:29:1226":{"id":"0:29:1226","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8499:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32945:249-0:533:2619":{"id":"a:1:32945:249-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2793-0:533:2619":{"id":"b:1:2793-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2795:28001"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13766:32293":{"id":"1:13766:32293","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:830":{"id":"0:224:830","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13812:3081":{"id":"1:13812:3081","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13453:3601","`DoubleEndedIterator`":"1:8394:134","prim@char":"5:12652:492","str::split_whitespace":"1:13793:10257","str::rsplit":"1:13816:32304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44734:3995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:32315":{"id":"1:13846:32315","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:860":{"id":"0:215:860","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:32316":{"id":"1:13850:32316","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13862:32321":{"id":"1:13862:32321","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13477:3971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3101:860":{"id":"1:3101:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13865:32322":{"id":"1:13865:32322","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762":{"id":"1:13762","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13763:1027","1:13764:2947","1:13765:9993","1:13766:32293","1:13768:32294","1:13771:2964","1:13772:32295","1:13773:352","1:13774:3040","1:13775:2961","1:13777:31374","1:13779:31375","1:13781:31376","1:13783:32296","1:13784:32297","1:13785:32298","1:13786:32299","1:13787:10255","1:13788:32300","1:13790:7967","1:13791:7978","1:13792:2969","1:13793:10257","1:13794:10254","1:13795:8347","1:13796:32302","1:13797:9897","1:13798:30837","1:13800:3293","1:13802:32303","1:13805:3918","1:13808:3951","1:13812:3081","1:13814:10256","1:13816:32304","1:13819:32305","1:13821:32306","1:13824:32307","1:13826:32308","1:13829:32309","1:13831:32310","1:13834:3422","1:13836:32311","1:13839:32312","1:13841:32313","1:13844:32314","1:13846:32315","1:13848:3299","1:13850:32316","1:13851:32317","1:13852:32318","1:13855:32319","1:13857:2983","1:13859:32320","1:13862:32321","1:13865:32322","1:13867:32323","1:13870:3060","1:13872:32324","1:13873:32325","1:13874:32326","1:13875:32327","1:13876:32328","1:13877:32329","1:13878:32330","1:13879:32331","1:13880:3022","1:13882:10577","1:13883:32332","1:13884:10287"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8394:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2996"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3095-0:479:150":{"id":"b:1:3095-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:2973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13857:2983":{"id":"1:13857:2983","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32945:249-0:479:150":{"id":"a:1:32945:249-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13873:32325":{"id":"1:13873:32325","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40630:10561","Self::is_ascii":"1:13872:32324"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40630:10561","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13880:3022":{"id":"1:13880:3022","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:3022"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45033:3982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5964:1832":{"id":"4:5964:1832","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5726:33068":{"id":"4:5726:33068","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:299:3115","`String`":"4:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:299:3115","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13805:3918":{"id":"1:13805:3918","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42736:203","prim@char":"5:12652:492","self::pattern":"1:13453:3601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13460:3593","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3114:1857":{"id":"1:3114:1857","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2533":{"id":"0:65:2533","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10661:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32945:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:1027":{"id":"1:13763:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:479:150":{"id":"b:1:3099-0:479:150","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3587:3268","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13882:10577":{"id":"1:13882:10577","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:10577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45042:3983","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2822-0:533:2619":{"id":"b:1:2822-0:533:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:3624","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2824:9595"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2824:9595":{"id":"1:2824:9595","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:22383:15764":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:45689:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1551:6482":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:23640:7651":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:586:6445":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:4990:229":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"5:988:16184":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:15868:5481":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12385:8653":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:532:6417":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:41244:7868":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:1942:8157":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"6:4896:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7997:5809":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6852:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5462:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:47740:8111":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7713:37237":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:2658:5777":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7740:10602":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:7539:6054":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:11759:4423":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"4:5289:4461":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:8909:16334":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"6:6472:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:3439:5818":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2493:3640":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"17:15035:5238":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:635:4631":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12737:8661":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12836:23537":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:6710:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:13856:5001":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14350:5110":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"6:5617:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2548:5772":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:47224:8046":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15611:5419":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"8:0:3445":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:1514:6459":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4776:8851":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:4897:4489":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22165:31616":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:4900:5833":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2424:3634":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:12656:351":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:42770:3712":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12331:8649":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4233:16269":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:11137:35142":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:44663:4042":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6719:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:47663:8079":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5725:4769":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"9:49:8521":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"14:213:6266":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13000:23538":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10132:23394":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:3587:3268":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1657:6559":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:2453:8318":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:2878:5787":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:41574:4629":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3985:4669":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:46985:8025":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:13186:3987":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14122:5050":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:43050:3712":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:5205:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13423:4935":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6631:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12063:4047":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:23607:7648":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15513:5406":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1083:8742":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:45051:3984":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:42734:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"11:983:6055":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:896:3711":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:7668:3546":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:15876:5482":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:41275:7870":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5311:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7013:5965":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:5960:265":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"11:2507:6291":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12081:8644":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12990:4904":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:42852:10656":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"14:7:8729":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:7710:7586":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6087:8540":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5179:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15908:5490":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:7984:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:562:9050":{"crate_id":5,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"16:2618:5775":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:321:6281":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:7619:2993":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1643:6548":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:5154:8335":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:0:3448":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:23418:7627":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:12007:7556":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12045:4707":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5389:216":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:41378:4031":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:41473:7880":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13157:4913":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:3699:3711":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6835:8516":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5488:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:2511:16216":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"17:15659:5428":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6792:5938":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:7904:6105":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:8616:7896":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"5:9236:7515":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6737:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:1654:6287":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6736:37235":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11995:8319":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:9513:4388":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:16315:5621":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:7337:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:16040:5527":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:9597:3593":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15809:5466":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:15624:5424":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6254:5876":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:16116:5572":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:2062:7593":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"9:435:22326":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:41435:7875":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13436:4937":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:3082:7571":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11512:23423":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:12643:4808":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:7200:280":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"11:649:3711":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7518:6052":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:43580:3564":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:9219:8376":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"4:4565:4454":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"0:0:2542":{"crate_id":0,"path":["anyhow"],"kind":"module"},"16:2964:5791":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6702:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:41203:7866":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5255:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:8294:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6841:5944":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:43845:6147":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:42830:3513":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:11981:7551":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:12665:761":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"1:47397:8069":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:1352:8307":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6026:5794":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:8609:5814":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"0:532:2534":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"4:928:4438":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7835:23343":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12298:23512":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:14110:5047":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11728:8630":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2129:3614":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:7694:4457":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:42528:10644":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13014:4906":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3364:3662":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:1397:8739":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:15074:5241":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:1591:8362":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:2354:3711":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6121:5798":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:45477:3968":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:3887:4661":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:2142:7429":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5494:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:16269:5613":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5405:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:832:8735":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1711:6583":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:4725:16292":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5568:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6040:5797":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10880:4779":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3371:8760":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:34391:3677":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:8278:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:22134:4618":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:31:22313":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:41445:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5687:5852":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:888:4435":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13983:5021":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:894:8670":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:3046:22474":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:8230:23345":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:1247:8384":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6422:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6967:4407":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:5323:29100":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:45042:3983":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:4519:4388":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4984:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:16814:5747":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:2534:16223":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"16:5346:5847":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:5682:8775":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:13163:3990":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13183:8337":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15713:5442":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:3090:9271":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:2167:8838":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:14476:5133":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:4901:830":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"16:3585:5819":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:2820:3624":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:41237:7867":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11269:23423":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10601:4771":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5381:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12864:4886":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:5873:16340":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"17:14611:5150":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5280:5845":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9447:8856":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"18:726:4644":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6638:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:11165:8824":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:33706:3672":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:3337:32079":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:45740:8869":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:10517:8815":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12761:8331":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15844:5472":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:517:6408":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5575:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6586:5929":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:32945:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:3560:7903":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1539:6473":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:3743:8327":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5366:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:4552:4388":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:8206:5800":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:9390:119":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:8187:8794":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11667:4795":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12214:4827":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:2663:8757":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:23015:3651":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:7256:6020":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:45677:7998":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:7156:5993":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:16013:5520":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10667:4773":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6513:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:23673:7654":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:7308:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"10:0:3447":{"crate_id":10,"path":["adler"],"kind":"module"},"5:11099:7436":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:7004:7604":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:45489:3963":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:16848:5023":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:4921:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:1665:6289":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:12653:1925":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"17:15951:5505":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:6116:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"17:16164:5573":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:9841:8367":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:5375:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12093:4816":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:1667:6565":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:1919:10515":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:41558:7890":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5447:5850":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:2032:813":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"16:7946:5807":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8266:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5044:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:23109:15845":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"7:78:22320":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:43072:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:14365:5112":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:485:6386":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7459:8695":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:8623:2910":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"16:3124:22475":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:41426:7874":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:9321:16357":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"10:36:6298":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:41505:7885":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15792:5463":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:3792:4432":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:41947:2893":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3373:8761":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3327:3369":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:31732:4618":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14571:4846":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:8316:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:1122:4432":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:8162:5802":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6806:5793":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:3262:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46771:8004":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"0:481:238":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"1:45798:8002":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11939:4813":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6605:232":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:7741:10603":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10665:3563":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:45685:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:11412:7541":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:22277:7612":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:35122:3685":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8438:16257":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:10889:8762":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:10924:7607":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:8040:37242":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:45273:7982":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:45349:7984":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8315:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:683:2878":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:8559:4646":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:42753:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:44938:3991":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10663:3562":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:7562:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10062:23393":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:2540:3546":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:7367:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10667:3564":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:44089:7951":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:7302:6022":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:22653:15769":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:4157:4432":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5036:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:8172:16197":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"6:5349:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:10876:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:3524:8326":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"0:492:205":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"5:11079:7435":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:43058:2993":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:7515:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:41517:7886":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:12969:1772":{"crate_id":1,"path":["core","str"],"kind":"module"},"18:96:8285":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:43394:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:6197:7598":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4255:16273":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:8687:7486":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:42640:28203":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:4402:5827":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:42662:7926":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:12150:8769":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7041:5801":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12547:4033":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:619:8752":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:32946:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:383:8751":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:41487:7883":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6121:4388":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4914:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:34324:3678":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15353:5282":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:42821:8868":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:16021:5522":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:12667:921":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"16:6438:23335":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:12677:1967":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"17:10733:4775":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:11266:4421":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:9225:211":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:4243:16270":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12133:4821":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:44884:3985":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10176:23396":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4489:8848":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:670:8294":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:16791:5742":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:5560:16137":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:23469:28190":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11921:4048":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14746:5169":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:1535:3712":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:724:8835":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:22925:15850":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:8543:6176":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:32947:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12898:4896":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4990:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"13:229:6276":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12958:4900":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:707:2907":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10553:23408":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:40197:3692":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:2323:8740":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:6998:7605":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:999:8735":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12103:4817":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:10674:9269":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:4701:3573":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:42714:7928":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:42869:7936":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"3:0:3443":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:14384:5117":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:41313:2910":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"13:110:37230":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:47270:8048":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13771:4973":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:38984:3689":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:16730:5728":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:6390:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:2810:7578":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4850:3113":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:3937:8769":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1506:168":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:16380:5639":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8447:2998":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:16650:5708":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"15:288:8341":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1589:6506":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:31294:3117":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:9262:7517":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"1:13482:3970":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7575:7523":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:8949:7506":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"11:1027:8740":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:43833:7947":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:43008:149":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"17:11564:8628":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:3809:3699":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:16613:4991":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:7787:3586":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:31326:3025":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12711:8657":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2528:5771":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"15:327:8517":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:45761:28361":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14178:5067":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:3590:4388":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:13066:8334":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:6826:2993":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7027:5967":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:521:27606":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13207:8338":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:316:8619":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:34949:3683":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:12270:4430":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:43883:3572":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7877:8912":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:8742:7278":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:44591:4030":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12944:4899":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12889:4895":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:1551:2993":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10623:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:8871:7953":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"4:7098:3554":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:44956:3992":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:10675:3567":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5025:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6398:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:4925:16291":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:16538:5664":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:3622:7484":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"18:589:4619":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:6700:3549":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:16211:5591":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:12673:1891":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"1:47568:8076":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:10673:3566":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5127:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8813:10638":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2465:5763":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14730:5164":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:41962:7903":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15198:5260":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10605:3002":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:47241:8047":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:13240:3978":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5230:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:1866:3549":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:2275:6055":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:3424:8762":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:44802:3994":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11112:37249":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11715:8308":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:1862:2993":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6610:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3679:3002":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"17:15884:5483":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10766:4776":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:4842:5831":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:1542:22405":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:1858:3711":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6267:5877":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12373:8323":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1871:3543":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:3331:36279":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5471:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:16828:5748":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:11116:7538":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:3139:4656":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:8708:6188":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:6543:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:776:3549":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:11956:3993":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1494:6451":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:2374:3712":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:16230:5597":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13819:4988":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:14369:4396":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:6915:4432":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:2588:5774":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:8642:8369":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:45481:3962":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:13460:3593":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:32915:6103":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:12035:8637":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:8281:7435":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:11993:7555":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:8480:6169":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:11987:8378":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"14:0:3450":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12072:6290":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:12035:3998":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3517:16252":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:5802:8781":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"11:813:8732":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:7549:4443":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:9292:7518":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:41127:7864":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:31705:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14521:5138":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12447:23513":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:22373:2727":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:377:8750":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:8500:6170":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:48053:8120":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:515:4610":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:10892:8764":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:8525:6173":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:859:8738":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:4803:16309":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:8595:8728":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:186:8935":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5557:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12800:8663":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4805:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11222:4501":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:48015:8118":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14650:5155":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:10496:8365":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:750:6284":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:1211:8383":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45809:3637":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:34603:3681":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:43281:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14322:5103":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13971:5018":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:22675:4026":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:22163:31614":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:46970:8024":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:8335:7441":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12814:8333":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:47209:8045":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:22881:15849":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7915:8915":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:13471:3972":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:45485:3964":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:23527:10396":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41455:7877":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3043:3560":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:1042:22404":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:8011:5810":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2228:3666":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:15174:4902":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:47435:8071":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:12670:914":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"5:11050:8823":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:2568:5773":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:7872:3548":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10311:23400":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11743:8309":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:4171:16265":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5249:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:45118:10707":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:2364:7574":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:12669:933":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"17:14021:5025":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11053:8296":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6694:8683":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:48210:8136":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:46833:8012":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:6169:9272":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8326:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5539:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:6513:4467":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:4621:8555":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:45505:3961":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14940:5214":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:2772:8758":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:9569:7527":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:39618:3691":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44623:4032":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:44752:3993":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7583:2993":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6858:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:15456:5368":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"14:40:4988":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5640:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:13795:4987":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:4436:8771":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1660:6288":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14443:5125":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:23548:2727":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:11757:4798":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:13052:8665":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12621:4876":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:43816:3572":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6779:5937":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4947:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:47480:8072":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:3712:3712":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:0:3089":{"crate_id":17,"path":["object"],"kind":"module"},"5:537:4377":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14498:5134":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14545:5139":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:12676:996":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:47110:8040":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:41723:7896":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15995:5516":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:12049:3997":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:7424:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7439:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14811:5199":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11210:37251":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11814:4805":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15115:5246":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:23362:7620":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:44720:2910":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47177:8043":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:570:6436":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:8433:8549":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"17:13553:23412":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:8295:6132":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12854:4884":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13509:4884":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:123:4368":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12187:4825":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5521:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:13453:3601":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:1684:6572":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:3042:2727":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3576:3631":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:4842:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:12659:1862":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"18:706:3972":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6378:4393":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8007:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:538:6420":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5117:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:46886:8019":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1944:8366":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"9:490:6357":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14897:5208":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14373:5114":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:507:4607":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12580:4034":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:48119:8126":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1530:6467":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13876:5002":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4881:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14165:5066":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:24260:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10150:23395":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:46953:8023":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:23001:15852":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:7962:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:608:8618":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:9551:174":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"6:6441:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12120:4819":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:901:8619":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11014:37247":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:9834:151":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5341:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:41286:10624":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:7519:2993":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2818:5784":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15677:5436":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"9:345:22341":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3061:4387":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"0:353:2542":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"17:11161:37250":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:45372:3999":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:7524:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7317:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:8359:7429":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11690:4797":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12907:4940":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7413:8694":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:8894:7501":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6850:5945":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:4363:8374":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40309:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:3291:3711":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"15:394:22436":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:1114:8739":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15785:5462":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:7250:16360":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4929:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:41252:7869":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:33033:3625":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:16573:5694":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:13126:3989":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:43133:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42861:3632":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:40277:3541":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:7334:6026":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12409:4839":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4792:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5415:5849":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:23503:7641":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6452:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2235:3664":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:226:7953":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:7344:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:23142:15844":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:906:8620":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:44118:7953":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:1582:6285":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:23706:7657":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:16838:5018":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:6502:8544":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:9436:8550":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:8310:152":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:43573:3562":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:7580:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2638:5776":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:7774:257":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"9:470:22325":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:3306:5760":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:7797:3587":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10965:8295":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13909:5008":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:42831:10648":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44334:7960":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7468:6045":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5170:5841":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12254:4832":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:10524:23407":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:45338:10708":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:16329:5628":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14413:5122":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:31358:28194":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5334:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:485:8621":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14859:5204":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:43042:3711":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"13:0:3444":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:6774:2893":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"1:44128:7957":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1727:6588":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:7599:7585":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:42474:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:5154:16312":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:2291:7570":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:45682:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:13411:3598":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:11128:7481":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:16005:5519":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:22257:2727":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1675:6566":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:1366:6055":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2484:5769":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14598:5148":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13021:23539":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:11430:7527":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:13260:23409":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:1507:6457":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:909:10397":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:22142:31611":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7398:37236":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6756:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5151:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:0:3453":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:2394:23468":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:12672:1885":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13044:4910":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:699:2902":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:8055:8723":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:9372:7522":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:7527:7583":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7750:7591":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:4199:16268":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:16359:5636":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:23516:7642":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15985:5513":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6419:5753":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5428:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:1483:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14924:5212":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:42909:7937":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:47139:8041":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5282:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14624:5151":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:10657:116":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"9:318:6336":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:47642:8078":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:4957:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:9403:35112":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14008:5024":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:1643:3543":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10700:4774":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4039:8770":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:10515:8382":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:11883:4046":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:12110:8768":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:689:4635":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7539:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13344:4931":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2504:5770":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"0:484:119":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"16:5083:5838":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:4322:4388":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:6898:16352":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13465:4938":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"16:5377:5848":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:9431:8543":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:940:6285":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5316:5846":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:16512:4973":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15013:5227":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:8086:2727":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1648:6286":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10830:4651":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:13530:10701":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:41042:3983":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3396:3588":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6460:23336":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8030:4646":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:3080:32081":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:8093:8724":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13608:23380":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:45181:7980":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:4838:16268":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7889:8913":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:4964:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10990:1738":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:42927:7938":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:41417:7563":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:4371:16289":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:11206:7517":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6300:5884":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11994:4044":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:718:4641":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:9309:7519":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:40281:3693":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7551:23342":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:45493:3967":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:12253:2888":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:44321:7959":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"6:4997:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:13836:4991":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:1996:3583":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:43900:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:44653:4041":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14637:5153":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13529:4942":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:7553:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6310:7599":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6659:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:465:6375":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5051:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2988:5792":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:40409:3695":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:8823:7498":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"14:159:8729":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12229:4829":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:2261:7568":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:8276:8367":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"1:47418:8070":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5241:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:41549:7889":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8394:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4906:3574":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:13996:5023":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:3411:3674":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:8231:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:564:6433":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7383:6030":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12663:4877":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:538:4615":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:22686:31622":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7421:23341":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13575:4902":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:7559:7584":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:10919:10680":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:9500:199":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:47323:8051":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:8176:6118":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:6274:4388":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:14152:5062":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8220:6120":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:33:1783":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"11:1579:8746":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:7108:3555":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:12635:2889":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4182:5824":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"18:531:4612":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15928:5497":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:14160:31234":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:2344:3245":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5107:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"14:219:6268":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12619:3035":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:23496:7638":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15448:5365":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10860:4778":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:4473:281":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:11585:7547":{"crate_id":5,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:14396:5119":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10671:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6679:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:16417:5646":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3108:5815":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13928:5013":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:11447:7542":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:9587:7528":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14690:5160":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:11917:7953":{"crate_id":5,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:42496:7910":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8852:8937":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15186:5256":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12173:4824":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:15817:5468":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:22178:31619":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:9286:2993":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:8343:8796":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11629:4752":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:8304:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1500:6454":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:16700:5720":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:40233:3630":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:1063:37228":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8281:10639":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:8719:7488":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:13231:8669":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:4829:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15640:5427":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10114:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:33004:3704":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14834:5200":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2722:5780":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:23410:7626":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6656:8501":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:613:37257":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:11161:8794":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:4247:16271":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:8091:7431":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11102:8297":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:41933:7900":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4808:5830":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5932:232":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:11153:8804":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"5:5748:116":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"6:8225:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:23695:7656":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:8562:6179":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:44097:7952":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:45555:7995":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:46999:8026":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5058:5837":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:643:4607":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13304:23410":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2898:5788":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:23596:7647":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"4:7248:4480":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6727:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:10810:4417":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:48108:8125":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:9351:16358":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7209:6006":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:5939:4400":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:8582:8725":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14057:5034":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:508:4376":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13730:4964":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:663:3712":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:12946:4021":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:41464:7879":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:412:22328":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5503:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:23277:7614":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:44988:3980":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:2096:210":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:5575:133":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:909:3712":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:43806:7939":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:41104:7862":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:6279:4400":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:7284:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2229:3640":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"5:8705:8803":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10656:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:44570:4038":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:16802:5744":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:45531:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:6237:5871":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15389:5313":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:44542:4037":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12263:4833":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:10604:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:12652:492":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"1:7857:10631":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:1986:2535":{"crate_id":5,"path":["std","error"],"kind":"module"},"1:41353:10610":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3357:3701":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:6792:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:44491:8388":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15721:5443":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:16755:5736":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11643:4808":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:3079:2978":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7074:3553":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5664:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10202:23397":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6186:5866":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:23222:7613":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:46850:8013":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13093:4793":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:45017:3977":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:16766:5737":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:34458:3679":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:491:4606":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15144:5249":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7347:6028":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:8106:7432":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13120:8299":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:12774:8662":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"14:201:3585":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:4922:16313":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:23662:7653":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:12438:4431":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8090:4391":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12878:4891":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:8976:7512":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6638:8679":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:10766:8376":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6711:8685":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3803:3696":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:9533:247":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1521:6462":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:984:4440":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:581:4618":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:7501:4412":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7728:7932":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:155:4366":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8277:10640":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14665:5158":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:5716:8779":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6967:5796":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:44856:3997":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13399:4934":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4840:4488":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7072:23339":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11794:23443":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"18:623:37258":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:7901:8914":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:765:27605":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12008:8636":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5045:16278":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:16058:5530":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5196:5842":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4937:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11063:37248":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3199:3003":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:7987:6111":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6873:5950":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5420:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:686:8360":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:8666:6103":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:12675:1879":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"1:13202:3988":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5301:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:45513:7541":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7505:6049":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:5139:16311":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:47613:8077":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"11:2525:37227":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:11174:8781":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:14776:5188":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12979:4903":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6820:23337":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14258:5074":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:22176:31617":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"15:306:8346":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4501:8849":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12055:8638":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:3877:8328":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:9846:4416":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:44693:3974":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:1652:4374":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:45497:3965":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:851:8737":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11423:23421":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:44634:4040":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:43207:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:48073:8122":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14788:5190":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:41078:7859":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7022:245":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:9270:3711":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:292:6278":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:9396:2894":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:8102:6116":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2043:4388":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:6602:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:113:8288":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:8648:8371":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11963:4815":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6623:5932":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:3303:32078":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:11465:174":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15937:5498":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6428:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:43005:205":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"5:3334:36280":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:4517:8772":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13195:8668":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:808:8362":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:4703:16291":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1898:6289":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:23585:7646":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:12608:8656":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14955:5218":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10369:23402":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8807:3713":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:8653:16263":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"6:473:6380":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:884:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6590:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4869:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6295:232":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:3423:3626":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:1569:6492":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:16029:5523":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7956:6109":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:15578:5416":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:12087:4426":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:42937:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"5:4848:7289":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12160:4823":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14337:5108":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:5057:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10455:23405":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12825:4880":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3628:3542":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:2513:6292":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:44106:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:45501:3966":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11868:4793":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11844:3978":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6082:5855":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:4185:16266":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:497:6391":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:10296:8939":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:16250:5600":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:14055:8858":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"11:2099:6055":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:11109:152":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43875:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7055:5969":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:9863:131":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:754:4650":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:7445:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:8260:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:6566:16154":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:3693:5820":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11359:4502":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:0:3452":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:10935:4418":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15978:5512":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13892:5006":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13959:5017":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7165:5994":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2339:151":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:41496:7884":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1011:8738":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10109:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"11:1001:8739":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:41048:7858":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:23066:3651":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:3782:3694":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10659:123":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:11380:7515":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6571:5926":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1919:8365":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"11:1118:8743":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:4202:3712":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:5414:4463":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:14095:7883":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:8330:7438":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:12668:927":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"5:9505:4403":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:29:529":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"1:45139:7970":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13108:4808":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:16051:5528":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:598:37256":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:45782:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5069:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:8288:7436":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:47817:8112":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:11074:7531":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6387:8673":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44580:4039":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:3707:16244":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"1:22385:7612":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:47862:8113":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13673:4954":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6749:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5658:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:44551:4035":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:41539:7888":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:8965:7511":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"1:48082:8123":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1597:6511":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:12651:1208":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"5:8298:7437":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"17:14039:5033":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:4362:3711":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:47192:8044":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:42982:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"4:7679:16121":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:47028:8028":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:8699:16290":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:47509:8073":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5450:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:389:4372":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1703:6579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:16350:5634":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11654:8299":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7408:8911":{"crate_id":5,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"4:6:843":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"1:40331:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:11493:7543":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11616:8304":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:8317:23346":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8633:23347":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11776:3712":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8264:6128":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5395:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14710:5163":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:32911:8164":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:43170:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44612:4031":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44081:7949":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:2521:16221":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"17:11842:8310":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16744:5731":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:6953:8545":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:16341:5630":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:3843:7429":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7430:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:0:1764":{"crate_id":5,"path":["std"],"kind":"module"},"17:16717:5722":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16395:5640":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:8152:2879":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:4118:5822":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:6746:4432":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10283:23399":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7220:6007":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:982:8732":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:23095:2727":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:1892:6288":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:8764:7489":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13757:4972":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:44338:4028":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14093:5039":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:12664:782":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"11:1878:6286":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:43244:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:578:6441":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6505:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:31332:3617":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41333:8866":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:45239:7981":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:9249:7516":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44136:7958":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:9336:16356":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:596:8622":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:5222:16318":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"16:5111:5839":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:32929:3113":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:41265:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5647:5851":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:16203:5588":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:7762:4462":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14069:5037":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:11189:35123":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11215:4500":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"5:6816:4406":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:12666:939":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"5:12662:763":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"16:2948:5790":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6523:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:8797:8805":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:4536:3623":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15896:5489":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:5946:7430":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:14187:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15569:5412":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12146:4822":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:1883:8363":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"11:102:6277":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:1573:6284":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13030:4907":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13360:23411":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:4193:16267":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11485:8626":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14845:5202":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:41956:7902":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:789:166":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11577:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:43318:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:2736:4384":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11151:8298":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1867:722":{"crate_id":5,"path":["std","env"],"kind":"module"},"5:7972:4759":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:2115:8739":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:8284:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13700:4960":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6500:22444":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:44560:4036":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:47368:8068":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:14072:8861":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:4771:8850":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11318:8300":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:680:4632":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:16658:5709":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15001:5225":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"1:44710:3979":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2226:3665":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12976:2974":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:2811:8759":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6360:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:4959:3575":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:3686:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2770:5782":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11259:8299":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13585:8499":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:6060:8785":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:8237:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:40294:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5550:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14678:5159":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4875:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6810:7600":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:1558:8745":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10821:8624":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:6678:8680":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:15477:5376":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10975:37246":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:5343:8774":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14454:5126":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:41588:7892":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:820:16184":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:40369:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:563:4617":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5019:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:47547:8075":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:39039:3690":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:544:5751":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5142:5840":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:41371:8867":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:7407:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:168:8531":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10586:4770":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:80:8284":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:12678:1460":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"17:16777:5738":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4850:7291":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:6053:8782":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:8134:5811":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12242:4830":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:9424:8814":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7966:6110":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:8636:3980":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"6:1696:6576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:44643:4043":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:5130:16310":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:1632:3711":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:3358:6289":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:787:3543":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6950:5957":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:5253:5844":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:5786":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:1123:8740":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12318:8321":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7369:5804":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:2206:6290":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:5870:7199":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"0:479:150":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"16:6157:5861":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10431:23404":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5441:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:8959:3711":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:43921:2750":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12272:4917":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:519:4714":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:9538:4409":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"4:1001:3711":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3467:8764":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11438:4786":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12725:8329":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:8326:7427":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:31062:10348":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:7273:4483":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:3448:3543":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14431:5123":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:1632:8385":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10840:2910":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:14427:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14081:5038":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1489:6449":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:423:8354":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:48062:8121":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:41141:3984":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:46932:8022":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:12227:7562":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"5:12038:7559":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:23684:7655":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:8271:4708":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"5:2348:16208":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"16:6171:5864":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6486:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:3298:6287":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:479:6383":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:32922:8865":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:4355:8373":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:47078:8038":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6109:5859":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:40389:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:299:3115":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14137:5056":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5165:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6939:5956":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:47965:8116":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7880:5899":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5630:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:6557:4400":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6617:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:927:6284":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:12603:8832":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:321:8620":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:1411:8744":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41526:7887":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:4384:8375":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13947:5014":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:2579:7575":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12588:4873":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:1781:4432":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:38874:3687":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:42512:7912":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:12657:1738":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"16:3832:5821":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11855:8634":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1132:8744":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15763:5457":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11915:4808":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:4764:5829":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:651:4607":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6335:5886":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12430:4841":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:1623:222":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3481:3684":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:1601:8360":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4976:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:42696:7927":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:15587:5417":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:44734:3995":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:11251:4420":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"14:164:22410":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:47095:8039":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7009:4496":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:23629:7650":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"5:919:2993":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:42556:7919":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:48036:8119":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12575:8654":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:1227:9270":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:41157:3982":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:45707:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2918:5789":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:14870:5205":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:3858:8837":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:9528:246":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6995:5958":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:4954:5835":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:9477:7526":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12022:8320":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:12624:2887":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:23013:31841":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15699:5441":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:7738:7589":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:8606:2619":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"17:11200:4808":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1625:6536":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11770:23442":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:33003:3703":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:6864:23338":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:41089:28201":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:41323:4490":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:45324:7983":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4902:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2834:3873":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:12077:4045":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:3324:6288":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2413:22445":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:2156:8837":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7189:23340":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"14:31:8729":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:10886:8760":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:1885:8364":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"6:5585:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:42961:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:38929:3688":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:12021:8790":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:4871:5832":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:7569:31967":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"10:44:6299":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8025:6112":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7292:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:9385:8541":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14971:5219":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6668:198":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:22188:31620":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:8568:7480":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"1:41940:7901":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2414:3549":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:22790:15765":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:22963:15851":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11590:8303":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:718:8361":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:8027:4414":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:702:2905":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:22152:31611":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:16672:5713":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:10884:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:5623:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5357:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:3688:8936":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12562:8325":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:44704:3595":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12924:4897":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3540:3629":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:2750:4382":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11494:4788":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:491:6388":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15733:5446":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7806:8387":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:659:8290":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12344:4836":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:16288:5614":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:41117:7863":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:8148:5812":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2568:3381":{"crate_id":5,"path":["std","io"],"kind":"module"},"1:45748:7999":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:16525:4987":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:6470:4399":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:1382:8740":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:2258:133":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:46801:8008":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:6148:4461":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:23347:7616":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"9:380:22327":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:2340:8749":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:8351:8797":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:40:3547":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:2838:5785":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:2519:6293":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:4134:2977":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:2495:16211":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3426:3627":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:44838:3998":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:553:6428":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1632:6540":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:7990:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:45168:7979":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:4140:2971":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5196:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:12663:766":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:12787:8332":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:4967:16282":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4928:2892":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13592:4945":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:22206:15767":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:8577:7481":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:3822:30688":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:5328:8336":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:6687:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15534:5411":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:10274:830":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:22259:15763":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:2440:3543":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:22204:2727":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:47014:8027":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:778:264":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1584:6504":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:1885:3543":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11356:37253":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:45359:7988":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:16241:5598":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:41149:3983":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:43096:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3469:8765":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13648:4953":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7492:6046":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"15:0:3451":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10333:23401":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11603:8629":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6802:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6062:5799":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:33035:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"16:6406:5895":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:2344:31970":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:46865:8014":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:969:8362":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6878:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:23052:15853":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:16068:5535":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3640:8767":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:43002:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:4071:3549":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6747:5934":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:10388:7923":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:47994:8117":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5224:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6901:5953":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:43431:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:16301:5619":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:8629:3995":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"9:0:3446":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:31347:3572":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:11670:3030":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:953:3549":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:23385:7624":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15128:5247":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:5222:5843":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:13477:3971":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:4292:4388":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13219:8339":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:5387:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:974:8360":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5288:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:22788:2727":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:15469:5375":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:6030:3549":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:10301:8557":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:47160:8042":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5319:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:45390:4000":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:15:2915":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:13328:4728":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13630:4950":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5755:5853":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7569:8379":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:9444:7523":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:7471:4411":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:41989:7906":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6366:5892":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8499:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4265:5826":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:8124:4418":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:10669:3565":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:427:8355":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:16219:5592":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:5312:8774":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:45699:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4653:7597":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5611:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7635:3892":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:14389:4504":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:45509:3969":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:14190:5070":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6142:23333":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:7591:222":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6096:8671":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:787:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40349:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7326:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15088:5242":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:11272:4422":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3097:150":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"5:8806:16322":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:7723:10624":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:47291:8049":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:48157:8133":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12201:4826":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:34776:3682":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:47936:8115":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:523:6411":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:1136:8744":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:5136:10595":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:676:2993":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:4591:8773":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2746:5781":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:14558:5142":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5139:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:8063:23344":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:5821:3553":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:1233:8306":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:344:8351":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:43566:3563":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:42790:7932":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:5265:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:47308:8050":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8335:3706":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:23434:28188":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:43587:3565":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:8175:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:34257:3680":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:6547:16152":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"5:8713:8369":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:43468:8559":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:1520:3711":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5295:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15324:5262":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11888:8311":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:9214:8810":{"crate_id":5,"path":["std","pipe","PipeWriter"],"kind":"struct"},"17:11346:8301":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:2099:209":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7916:8716":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11469:23422":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:23396:28186":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:12246:2888":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:15048:5239":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5604:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:2682:5778":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:8694:7487":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:12619:8552":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:357:4370":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:9674:8157":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:7390:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:48249:8152":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:735:27604":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5652:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:45772:8870":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3571:3118":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:2025:3289":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"4:284:4432":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:40446:3116":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:46903:8020":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5529:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6645:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2794:5783":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:45821:8003":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:8243:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:214:3635":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:12679:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"6:4890:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14910:5209":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:11393:7516":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:22987:2727":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:3086:3112":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5217:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:47057:8037":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:26660:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10634:4772":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:2533:6295":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12357:8651":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:0:325":{"crate_id":4,"path":["alloc"],"kind":"module"},"16:4927:5834":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5325:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:8738:8804":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:1100:6055":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:45033:3982":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6416:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6893:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:33494:3673":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12960:4023":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15801:5464":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10815:8623":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:42762:3711":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:11145:35145":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:12671:1903":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"5:12650:436":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"1:11752:3711":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14985:5221":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6911:5954":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4239:5825":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11989:8498":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5707:23332":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"0:351:3054":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"5:9543:4410":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:41164:10600":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:14307:5099":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:42778:2993":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:12171:8770":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:1612:8361":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:2433:22472":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15691:5440":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:42674:7486":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:3095:238":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"5:8324:131":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46918:8021":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13133:4912":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:5477:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15971:5511":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:40439:3697":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:5564:16138":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"5:963:3543":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:22648:2727":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:2341:8756":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11328:37252":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11801:3995":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6500:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:6895:8787":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5007:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:13688:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10571:4769":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3401:3676":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5375:8854":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:41395:8386":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2685:3651":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:9484:8556":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:44902:3986":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12065:8639":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:16684:5715":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:3431:3628":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:14212:8862":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:43861:28307":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:12969:4902":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:41301:7871":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:5505:215":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"1:45154:7976":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11576:4793":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4852:7293":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:23651:7652":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:12674:1897":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"17:13243:8340":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:14483:3544":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11552:8627":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:9278:8377":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:23454:28189":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:7494:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:7627:2993":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15919:5494":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:46818:8011":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3328:36137":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2687:3652":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:11090:7535":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:978:8361":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:41733:7897":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5186:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7804:37239":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6981:5813":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:8101:8792":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"16:5740:4770":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:45008:3981":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12287:8648":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3872:16264":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:16403:5643":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:34190:3589":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:6585:1983":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"18:698:4636":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7279:6021":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:5022:4389":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:4488:4454":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15595:5418":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:6769:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:2297:8739":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:41747:7898":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7762:6086":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7977:5808":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6887:5795":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4555:10578":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:41971:4497":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:12655:1352":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"5:4333:8372":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6729:8500":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:47530:8074":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:36998:3686":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:9457:35113":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:11069:7529":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:15746:5452":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11502:4789":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:47907:8114":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:41404:2619":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:2126:8740":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:45026:3975":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:41981:7904":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:4963:16279":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:8249:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5271:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10479:23406":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:12239:35127":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:7539:3549":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16191:5585":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:2509:16215":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"5:3426:8763":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:7510:3545":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"5:8586:16225":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"6:8272:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:650:16181":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:48172:8134":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5088:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11564:2727":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:23618:7649":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:2422:8315":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:16177:5579":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6651:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:41598:7893":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2702:5779":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13387:4933":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:1885:6287":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:3012:22473":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:48134:8127":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7786:37238":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7819:35857":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"5:12032:7558":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10661:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43355:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:559:6431":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:40630:10561":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:4171:2993":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11825:8631":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:4965:16281":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1005:8737":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:33036:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"4:2251:4377":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:595:4378":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"5:6132:3514":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:15963:5508":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"12:0:3449":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:7463:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6459:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3697:16224":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:32936:7723":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:5696:8778":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14883:5207":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:44680:3596":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:22265:15766":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3934:8768":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6695:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:16631:5001":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:2243:8312":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:11540:4792":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"5:436:197":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:5134:4388":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15159:5253":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12749:8330":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6670:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:4981:5836":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12397:8324":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12686:4878":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15102:5245":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:48093:8124":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8804:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10441:3578":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"11:763:6285":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:5515:4432":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:4150:5823":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13079:8667":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:32869:3001":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:23332:7615":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40457:7729":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:2394:2993":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:48187:8135":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:33918:3675":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6203:23334":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:680:4759":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:3332:6286":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:8166:3512":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"0:533:2619":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"5:1639:3549":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:14346:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11901:8635":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11458:8302":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10405:23403":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:12658:1772":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"1:44784:3996":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4816:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7355:5803":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5512:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:573:4607":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:46786:8007":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:481:4605":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:9209:8809":{"crate_id":5,"path":["std","pipe","PipeReader"],"kind":"struct"},"5:5732:8780":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2077:7594":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"6:4970:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1563:6490":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5482:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:45566:10718":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10255:23398":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2448:5761":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:6778:8786":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:1690:6575":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7982:2890":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6744:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:4692:5828":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14585:5147":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6578:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11395:23420":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:11404:35146":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:545:6423":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:7856:3543":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1636:2993":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:6454:4396":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15771:5460":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12935:4898":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:44998:3976":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:4127:3549":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:8428:8798":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:15062:5240":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4413:4388":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:3925:3543":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:8623:6181":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:15861:5480":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:11604:8829":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:11084:4499":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:23137:15846":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7935:6106":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13489:4940":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}