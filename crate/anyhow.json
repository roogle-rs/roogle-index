{"root":"0:0:2473","crate_version":"1.0.86","includes_private":false,"index":{"b:1:3000-0:533:2550":{"id":"b:1:3000-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3003:137","1:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2720-0:533:2550":{"id":"b:1:2720-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2722:27781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:533:2550":{"id":"0:533:2550","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2463"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:42199:3443-0:533:2550","a:1:32337:237-0:533:2550","a:1:32396:3635-0:533:2550","a:1:3248:3633-0:533:2550","a:1:3213:247-0:533:2550","a:1:42200:10535-0:533:2550","b:1:8301-0:533:2550","b:1:2717-0:533:2550","b:1:2994-0:533:2550","b:1:3000-0:533:2550","b:1:3832-0:533:2550","b:1:3005-0:533:2550","b:1:2990-0:533:2550","b:1:2720-0:533:2550","b:4:793-0:533:2550","0:31","0:536","0:26","0:33","0:35"]}}},"0:52:2471":{"id":"0:52:2471","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:2932"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"4:5689:32931":{"id":"4:5689:32931","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:2987":{"id":"1:13398:2987","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12924:136","`FromStr`":"1:12923:3527"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12923:3527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12923:3527","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1181":{"id":"0:25:1181","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:2891":{"id":"1:13282:2891","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12510:2901"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:2888":{"id":"1:13286:2888","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:630":{"id":"0:218:630","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3421:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3168":{"id":"0:203:3168","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:475":{"id":"0:538:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3003:137":{"id":"1:3003:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2717-0:533:2550":{"id":"b:1:2717-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2719:2812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13354:32194":{"id":"1:13354:32194","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:2910":{"id":"1:13383:2910","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3158":{"id":"0:200:3158","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2463"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5702:10517":{"id":"4:5702:10517","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32396:3635-0:533:2550":{"id":"a:1:32396:3635-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32396:3635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:115","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:32261:2928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2464","0:74:2662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3213:247-0:479:137":{"id":"a:1:3213:247-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3434:3046","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13273":{"id":"1:13273","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13274:1000","1:13275:2874","1:13276:9890","1:13277:32177","1:13279:32178","1:13282:2891","1:13283:32179","1:13284:336","1:13285:2967","1:13286:2888","1:13288:28000","1:13290:28001","1:13292:28002","1:13294:32180","1:13295:32181","1:13296:32182","1:13297:32183","1:13298:10149","1:13299:32184","1:13301:7845","1:13302:7856","1:13303:2896","1:13304:10151","1:13306:10148","1:13309:8225","1:13311:32186","1:13312:9795","1:13313:30422","1:13316:3221","1:13319:32187","1:13322:3849","1:13326:3882","1:13330:3008","1:13333:10150","1:13336:32188","1:13339:32189","1:13342:32190","1:13345:32191","1:13348:32192","1:13351:32193","1:13354:32194","1:13357:3351","1:13360:32195","1:13363:32196","1:13366:32197","1:13369:32198","1:13371:32199","1:13373:3227","1:13375:32200","1:13376:32201","1:13377:32202","1:13380:32203","1:13383:2910","1:13386:32204","1:13389:32205","1:13392:32206","1:13395:32207","1:13398:2987","1:13400:32208","1:13401:32209","1:13402:32210","1:13403:32211","1:13404:32212","1:13405:32213","1:13406:32214","1:13407:32215","1:13408:2949","1:13411:10462","1:13412:32216"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2996:834":{"id":"1:2996:834","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:5937-0:479:137":{"id":"b:4:5937-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5935:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5939:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29:1195":{"id":"0:29:1195","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8443:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2473":{"id":"0:0:2473","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[730,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the [`std::error::Error`] trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, almost all of the same API is available and works the same\nway. To depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:137","`std::error::Error`":"1:3053:137"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.85\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2473","0:479:137","0:533:2550","0:481:226","0:484:115","0:492:193","0:351:2981","0:353:2473","0:532:2465"],"is_stripped":false}}},"1:13357:3351":{"id":"1:13357:3351","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::rmatches":"1:13360:32195"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44190:3917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:32207":{"id":"1:13395:32207","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:337":{"id":"0:293:337","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:796:2893":{"id":"4:796:2893","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3832-0:533:2550":{"id":"b:1:3832-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13306:10148":{"id":"1:13306:10148","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13304:10151"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44269:3925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:32192":{"id":"1:13348:32192","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12363:471","str::splitn":"1:13345:32191","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44108:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3832-0:479:137":{"id":"b:1:3832-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3830:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3834:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5939:1786":{"id":"4:5939:1786","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3421:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:249","0:218:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:1000":{"id":"0:34:1000","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13284:336":{"id":"1:13284:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13285:2967","`u8`":"5:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2720-0:479:137":{"id":"b:1:2720-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2714:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2722:27781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13276:9890":{"id":"1:13276:9890","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:32205":{"id":"1:13389:32205","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:3882":{"id":"1:13326:3882","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2662":{"id":"0:489:2662","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3462:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:492:193":{"id":"0:492:193","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32337:237-0:479:137":{"id":"a:1:32337:237-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13330:3008":{"id":"1:13330:3008","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::split_whitespace":"1:13304:10151","str::rsplit":"1:13336:32188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43986:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:32191":{"id":"1:13345:32191","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530","str::rsplitn":"1:13348:32192"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44090:3916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:632":{"id":"0:220:632","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3421:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2717-0:479:137":{"id":"b:1:2717-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32338:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2711:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2719:2812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478-0:353:2473":{"id":"0:478-0:353:2473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2473","glob":false}}},"1:13366:32197":{"id":"1:13366:32197","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::match_indices":"1:13363:32196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44154:3920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3005-0:479:137":{"id":"b:1:3005-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3008:137","1:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32396:3635-0:479:137":{"id":"a:1:32396:3635-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32396:3635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13296:32182":{"id":"1:13296:32182","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13298:10149","str::split_at_mut":"1:13297:32183"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13369:32198":{"id":"1:13369:32198","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:3227":{"id":"1:13373:3227","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:538:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2994-0:533:2550":{"id":"b:1:2994-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13342:32190":{"id":"1:13342:32190","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12963:3530","str::split":"1:13330:3008","prim@char":"5:12363:471","str::split_terminator":"1:13339:32189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44054:3912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:32202":{"id":"1:13377:32202","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12989:3900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:32206":{"id":"1:13392:32206","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2464":{"id":"0:72:2464","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13400:32208":{"id":"1:13400:32208","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:32180":{"id":"1:13294:32180","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12369:1726","str::slice_mut_unchecked":"1:13295:32181","crate::ops::Index":"1:39651:3470"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:5700:32933":{"id":"4:5700:32933","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"4:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1181","0:179:2688","0:196:2464","0:198:2002","0:199:2463","0:200:3158","0:201:966","0:203:3168","0:205:3165","0:207:3193"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2463":{"id":"0:199:2463","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3213:247-0:533:2550":{"id":"a:1:3213:247-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13288:28000":{"id":"1:13288:28000","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:7845":{"id":"1:13301:7845","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43956:3524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2662":{"id":"0:74:2662","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3462:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3000-0:479:137":{"id":"b:1:3000-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2970:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3003:137","1:3004:1813"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13322:3849":{"id":"1:13322:3849","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:32193":{"id":"1:13351:32193","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:32188":{"id":"1:13336:32188","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::split":"1:13330:3008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44004:3911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5684":{"id":"4:5684","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5685:32930","4:5686:3541","4:5689:32931","4:5692:32932","4:5700:32933","4:5701:32934","4:5702:10517","4:5703:32935","4:5704:32936"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:804":{"id":"0:224:804","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42200:10535-0:533:2550":{"id":"a:1:42200:10535-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42200:10535","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:4:793-0:533:2550":{"id":"b:4:793-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2733:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:795:2905","4:796:2893","4:797:27782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13285:2967":{"id":"1:13285:2967","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3004:1813":{"id":"1:3004:1813","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8388:2925","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:1000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13290:28001":{"id":"1:13290:28001","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42199:3443-0:479:137":{"id":"a:1:42199:3443-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42199:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13405:32213":{"id":"1:13405:32213","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:39798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5701:32934":{"id":"4:5701:32934","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:306:3042","`String`":"4:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:32209":{"id":"1:13401:32209","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40006:10449","Self::is_ascii":"1:13400:32208"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40006:10449","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2999:834":{"id":"1:2999:834","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5703:32935":{"id":"4:5703:32935","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13403:32211"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:353:2473":{"id":"0:353:2473","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[200,0],"end":[219,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:137"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13303:2896":{"id":"1:13303:2896","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43972:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8303:173":{"id":"1:8303:173","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8443:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["collect_into","flat_map","filter_map","step_by","gt","cmp","chain","is_sorted","array_chunks","min_by","rposition","reduce","partition","flatten","peekable","zip","is_sorted_by","sum","rev","enumerate","max","try_reduce","partition_in_place","map_windows","collect","skip_while","intersperse","size_hint","map","is_sorted_by_key","skip","product","unzip","min","find","is_partitioned","fuse","take_while","all","intersperse_with","next_chunk","__iterator_get_unchecked","cmp_by","copied","max_by_key","find_map","any","try_fold","count","inspect","eq","map_while","for_each","last","advance_by","partial_cmp_by","cloned","take","max_by","try_find","ne","try_for_each","by_ref","try_collect","scan","filter","nth","le","eq_by","cycle","ge","min_by_key","partial_cmp","position","lt","fold"],"trait":{"name":"Iterator","id":"1:8443:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:173","0:29:1195","0:30:2922"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226:671":{"id":"0:226:671","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3248:3633-0:533:2550":{"id":"a:1:3248:3633-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3248:3633","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13319:32187":{"id":"1:13319:32187","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2932":{"id":"0:53:2932","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:479:137":{"id":"0:479:137","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:42199:3443-0:479:137","a:1:32337:237-0:479:137","a:1:32396:3635-0:479:137","a:1:3248:3633-0:479:137","a:1:3213:247-0:479:137","a:1:42200:10535-0:479:137","b:1:2717-0:479:137","b:1:2997-0:479:137","b:1:2994-0:479:137","b:1:3000-0:479:137","b:1:3832-0:479:137","b:1:3005-0:479:137","b:1:2990-0:479:137","b:1:2720-0:479:137","b:4:5937-0:479:137","0:288","0:290","0:216","0:213","0:225","0:294","0:219","0:223","0:221","0:292","0:286"]}}},"b:1:2990-0:479:137":{"id":"b:1:2990-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2993:2900"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8301-0:533:2550":{"id":"b:1:8301-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8443:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8297:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8303:173","1:8304:2920","1:8305:958"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13403:32211":{"id":"1:13403:32211","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:115","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2464","0:67:2662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:481:226":{"id":"0:481:226","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:115"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"0:532:2465":{"id":"0:532:2465","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[127,4],"end":[150,5]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:137","crate::anyhow":"0:353:2473"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13274:1000":{"id":"1:13274:1000","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12363:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:32178":{"id":"1:13279:32178","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13277:32177"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:32196":{"id":"1:13363:32196","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::rmatch_indices":"1:13366:32197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44136:3919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13371:32199":{"id":"1:13371:32199","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2997-0:479:137":{"id":"b:1:2997-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2999:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13407:32215":{"id":"1:13407:32215","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:39798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:249":{"id":"0:217:249","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"0:295:337":{"id":"0:295:337","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2662":{"id":"0:67:2662","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3462:142","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3165":{"id":"0:205:3165","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3009:1811":{"id":"1:3009:1811","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13375:32200":{"id":"1:13375:32200","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2464":{"id":"0:196:2464","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:115"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:115":{"id":"0:484:115","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:137"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2464","0:489:2662"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:70","0:62"]}}},"1:13304:10151":{"id":"1:13304:10151","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13306:10148"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44260:3909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:32181":{"id":"1:13295:32181","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12369:1726","crate::ops::IndexMut":"1:3491:3471","str::slice_unchecked":"1:13294:32180"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:2874":{"id":"1:13275:2874","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13406:32214":{"id":"1:13406:32214","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:39798"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:797:27782":{"id":"4:797:27782","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:3243":{"id":"0:325:3243","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:1:2994-0:479:137":{"id":"b:1:2994-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2996:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2719:2812":{"id":"1:2719:2812","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:834":{"id":"0:291:834","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32337:237-0:533:2550":{"id":"a:1:32337:237-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2990-0:533:2550":{"id":"b:1:2990-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2993:2900"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:351:2981":{"id":"0:351:2981","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:137","crate::anyhow":"0:353:2473"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"1:13297:32183":{"id":"1:13297:32183","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13296:32182","str::split_at_mut_checked":"1:13299:32184"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:32184":{"id":"1:13299:32184","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13298:10149"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:8225":{"id":"1:13309:8225","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44240:3908","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:30422":{"id":"1:13313:30422","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:32210":{"id":"1:13402:32210","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13411:10462":{"id":"1:13411:10462","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5025:10462"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44294:3923","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8305:958":{"id":"1:8305:958","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5692:32932":{"id":"4:5692:32932","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1181"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13298:10149":{"id":"1:13298:10149","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13299:32184"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:32179":{"id":"1:13283:32179","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:834":{"id":"0:215:834","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13312:9795":{"id":"1:13312:9795","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44278:3921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:834":{"id":"0:289:834","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:3193":{"id":"0:207:3193","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3005-0:533:2550":{"id":"b:1:3005-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2964:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2974:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3008:137","1:3009:1811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2722:27781":{"id":"1:2722:27781","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1181":{"id":"0:177:1181","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42199:3443-0:533:2550":{"id":"a:1:42199:3443-0:533:2550","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42199:3443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:8304:2920":{"id":"1:8304:2920","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:3834:1826":{"id":"1:3834:1826","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39820:3043","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:804":{"id":"0:222:804","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10360:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10341:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2922":{"id":"0:30:2922","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:28002":{"id":"1:13292:28002","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:3008:137":{"id":"1:3008:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32261:2928","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13386:32204":{"id":"1:13386:32204","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:253":{"id":"0:334:253","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:287:834":{"id":"0:287:834","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42200:10535-0:479:137":{"id":"a:1:42200:10535-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42200:10535","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2958:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2958:77","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:2923":{"id":"0:32:2923","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8443:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2993:2900":{"id":"1:2993:2900","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2967:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3042:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13380:32203":{"id":"1:13380:32203","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:966":{"id":"0:201:966","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2967:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2688":{"id":"0:179:2688","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10386:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:32177":{"id":"1:13277:32177","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:173":{"id":"0:28:173","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3053:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"1:13302:7856":{"id":"1:13302:7856","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43962:3907","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:2949":{"id":"1:13408:2949","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5024:2949"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44285:3922","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5686:3541":{"id":"4:5686:3541","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:10150":{"id":"1:13333:10150","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12778:3926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:32212":{"id":"1:13404:32212","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:2464":{"id":"0:487:2464","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13311:32186":{"id":"1:13311:32186","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44250:3910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2658":{"id":"0:107:2658","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:65:2464":{"id":"0:65:2464","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10391:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32337:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3213:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:32189":{"id":"1:13339:32189","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12963:3530","str::split":"1:13330:3008","prim@char":"5:12363:471","`DoubleEndedIterator`":"1:8335:129","str::rsplit_terminator":"1:13342:32190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44036:3914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2002":{"id":"0:198:2002","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:656:2805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13360:32195":{"id":"1:13360:32195","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12963:3530","`DoubleEndedIterator`":"1:8335:129","prim@char":"5:12363:471","str::matches":"1:13357:3351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44208:3918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3248:3633-0:479:137":{"id":"a:1:3248:3633-0:479:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3248:3633","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:8335:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2923"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13376:32201":{"id":"1:13376:32201","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:3221":{"id":"1:13316:3221","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12363:471","self::pattern":"1:12963:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5704:32936":{"id":"4:5704:32936","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13404:32212"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:795:2905":{"id":"4:795:2905","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3450:3196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343:3246":{"id":"0:343:3246","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:13412:32216":{"id":"1:13412:32216","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5022:32216"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44303:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5685:32930":{"id":"4:5685:32930","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:306:3042","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:5863:23130":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13089:4841":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:4923:16076":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5282:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15206:5352":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:7454:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13946:5024":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:30750:29682":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:1259:8262":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:40876:7768":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10982:23212":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:5965:8657":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7111:5939":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6066:5784":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:328:6166":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:44595:3903":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:46227:7923":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10041:8831":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11367:4687":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:1580:8617":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15456:5416":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4921:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:13889:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:8019:4327":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"1:42158:7815":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:2597:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11730:4723":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4869:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:42011:29922":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5385:4667":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10284:4672":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:4491:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:12386:1832":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"6:1632:6425":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:11237:7412":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:1064:22200":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10997:4685":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7509:8588":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11214:8186":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:113:8166":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13785:5002":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:8486:16022":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"4:7514:4350":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10647:10566":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:32868:3605":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7132:5941":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:46631:7955":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:23244:7536":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:2400:3644":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:1642:6174":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:14212:5084":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:9403:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7888:6019":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:3475:5709":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:42286:3644":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:44136:3919":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4856:5731":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:15635:5485":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11042:8496":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:8697:16118":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10155:4667":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40638:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2592:5669":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6779:7484":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12508:4802":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12824:23203":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:8219:127":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3456:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1690:6460":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:8516:7779":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"5:915:6170":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:33631:3612":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:5289:8646":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8249:10525":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13363:4901":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10393:3491":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6353:5822":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:47228:8014":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:2228:6175":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:42719:8435":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:3297:35596":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:542:5641":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10399:2837":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:42105:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:3373:6174":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15596:5473":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:351:8229":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:11419:4702":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4008:8642":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:46096:7916":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13832:5008":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4816:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:21693:29861":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:4341:16086":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2469:16008":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2031:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:12664:3930":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10534:36904":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10092:23201":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:34150:3614":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:613:36909":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:2322:16005":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"11:2545:6178":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7098:5936":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7833:10514":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"0:533:2550":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"17:2203:8193":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14968:5300":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12056:4763":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:9100:8254":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14147:5054":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2121:5942":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:4303:8250":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:559:6316":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:706:3902":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4452:8714":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:685:3644":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11198:3643":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:38248:3619":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:3778:5711":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:22607:3583":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:44786:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:8238:8667":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:10908:7416":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8259:5990":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12768:23181":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:11690:7440":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:41327:7785":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:40691:10496":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:8171:8245":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7857:6015":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:8856:7396":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"4:1395:8612":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:854:8607":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5551:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15569:5461":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:40:3475":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11142:4702":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11898:4731":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12201:8532":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:7033:3482":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:1888:3478":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5186:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:4161:16064":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6782:23136":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5006:5736":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11574:6175":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:7014:23137":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5179:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6765:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:8253:10524":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15799:5527":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:11272:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3648:3626":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:8548:8249":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5267:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:15701:5502":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:4142:3478":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11799:8199":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14529:5132":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:39607:3560":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11269:23230":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:9253:7407":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:16138:5610":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:7475:3473":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:23277:7539":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:10769:36903":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:3703:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:43792:3958":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:40610:7750":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:44661:7873":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:8506:2550":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"17:13211:4874":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:396:4280":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2147:7477":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:4172:4339":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:1884:2920":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6026:5781":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1481:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:2349:8612":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:1920:6174":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10044:23200":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5375:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6449:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13877:5018":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:43368:7832":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:7936:4324":{"crate_id":5,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9422:8432":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:13621:8725":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:7061:5932":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:5837:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:860:8543":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:1859:8241":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"11:698:2920":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:5335:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"17:9781:23194":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:8255:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5420:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:4718:5726":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:21830:15655":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12724:23202":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7539:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12724:3929":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10671:36905":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12863:4826":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:9271:115":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3344:3616":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:7057:3483":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:6525:15952":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:6199:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15333:5385":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5165:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:974:8607":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:32303:8142":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:47012:7995":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5127:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:11254:7427":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:33977:3613":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:8302:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:10750:4327":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:4487:8644":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:43884:3967":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9533:3522":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11153:8177":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:8193:7322":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"16:5817:5750":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:1379:5942":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10439:4677":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:1075:5942":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:8188:8600":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:7:8601":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1657:6444":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2355:5653":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:1098:8184":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:11031:7402":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:32397:3636":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11128:4657":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:7721:7475":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7782:8265":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7604:5700":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2961:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:7665:4362":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3450:3196":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:43913:3969":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11256:4692":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:3342:8633":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:12376:735":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"1:43871:3972":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:44269:3925":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5686:5684":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2970:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:13766:4997":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13999:5033":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6574:5703":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:7352:8807":{"crate_id":5,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:12367:335":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"1:44811:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:39723:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14436:5123":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:581:4527":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:3277:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:22924:7499":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8286:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:4574:8431":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9984:23199":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:3101:3039":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"9:53:8397":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:13706:30948":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2566:3474":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15944:4874":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:12383:1838":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"5:1922:8244":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1920:8035":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"16:7497:5992":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3663:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14051:5040":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:4406:8643":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:9729:127":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11102:8499":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:12388:1916":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"18:735:27380":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1158:8616":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:403:8494":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:675:2832":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:23200:7532":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:1489:6334":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:754:4559":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:898:4342":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11523:3961":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:2780:8631":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:44637:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:15301:5377":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:5368:980":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:6740:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:22379:2658":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"15:288:8219":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7727:5701":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7986:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:36372:3618":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2808:5679":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:12346:2816":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:5298:4366":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15624:5480":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:44781:7876":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"11:2301:5942":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:13292:4889":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:4915:3504":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15992:5582":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7528:5993":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:9130:7401":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14311:5094":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:517:6293":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10861:4407":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:10924:7420":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:12923:3527":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:14189:5075":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:772:6169":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11495:3915":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:670:8172":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3248:3633":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:12107:4702":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:33:1737":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"6:4875:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:38303:3620":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15214:5354":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6544:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:43339:7830":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3462:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:40826:7760":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:12366:1317":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"5:12149:4338":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:11926:7446":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"6:5387:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:4354:8253":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:47175:8011":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:8353:7312":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13485:4924":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14475:5126":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:21751:29867":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4990:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:40844:7763":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:3395:8635":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:41318:2820":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"15:327:8393":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:5779:16135":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:672:2829":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7769:6005":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:43347:7831":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5428:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:42033:7809":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:8249:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:521:27382":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6823:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:6968:7489":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:6758:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:7332:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2303:22242":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7431:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"14:220:6155":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12433:4793":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:8166:4611":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"6:5603:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10389:119":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:871:3643":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:11014:35134":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10759:4702":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:44572:7862":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:1564:2920":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:3729:3644":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:659:8168":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:39833:7613":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:2495:16018":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"4:6248:4296":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15957:5552":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5494:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:16165:5619":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:4307:4296":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:12381:887":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"1:6156:7482":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:2318:3173":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"6:8330:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:867:8492":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:2714:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:2936:22270":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11715:4721":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12289:4771":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:8338:16053":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:45904:7897":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6623:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5265:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4913:5733":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:12978:3902":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14284:5092":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:2323:8611":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:14271:5090":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13538:4937":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4817:7174":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:430:8232":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"14:40:4875":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11290:3926":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2937:2658":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:9886:23196":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:45988:7902":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14066:5043":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:40945:4538":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:2377:7458":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6543:5843":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11247:3913":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4502:5720":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:0:3375":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:1674:4282":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10046:8433":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:14246:5087":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:26151:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:22738:15733":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15222:5356":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11367:3976":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14414:5112":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14994:5306":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:2533:6176":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:43386:7837":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5366:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5224:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:11653:7832":{"crate_id":5,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"5:623:15976":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6634:5691":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6412:23133":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:13455:4920":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:9394:4296":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:44483:7859":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4984:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:8230:7326":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:10403:3495":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:15778:5524":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:12382:1856":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"17:12213:8208":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:3740:3562":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5117:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:9408:4317":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:46758:7989":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14855:5256":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:42133:3643":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:4853:4390":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44844:8736":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6716:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4487:3552":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:32:22108":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7717:10488":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:1604:8240":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:123:4276":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:39705:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11788:8519":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:3465:3476":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:671:3643":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:40681:2837":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6419:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10829:4402":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"14:165:22207":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:881:8610":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5471:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:7504:3478":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12150:4769":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13473:4921":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11481:3916":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:34496:3617":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:12387:969":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"6:5069:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1897:8243":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10251:4671":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:45836:7889":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:7524:7468":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:10612:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:5025:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3067:137":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"16:6456:23134":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:41311:7784":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3218:3298":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1667:6450":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:7150:16155":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5357:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12900:4829":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12792:4632":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:9173:7403":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:5654:113":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"4:7639:3474":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8306:3638":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:11664:7435":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:12041:3975":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:42641:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:2038:3543":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11537:8508":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4964:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:23027:29684":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:4468:5719":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:9284:34797":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14463:5125":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:46835:7990":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:9277:2821":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:6427:8392":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:6799:16147":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:2182:8703":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15289:5371":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6442:5830":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:32314:8729":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:5622:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7618:5999":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7168:7408":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5756:8544":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15356:5393":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:40835:7762":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:2265:4285":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:563:4526":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:34323:3615":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15678:5501":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:12335:2814":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:8093:6057":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:41927:7802":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:9457:7413":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6526:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:39655:3624":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:33832:3611":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12238:8533":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:44876:8737":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"9:480:22121":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7604:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:43067:3501":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43832:3973":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:22818:7497":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:11870:8642":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6620:5854":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5562:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13344:4900":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6300:8552":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12695:8540":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:7590:5699":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:8073:6056":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:46003:7903":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:41352:7787":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7323:4319":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:10498:9257":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7473:5788":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:7316:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:3716:3643":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5700:5687":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11497:8197":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6813:5894":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:11676:7439":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:6037:3444":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11755:4727":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4506:10463":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11853:8524":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:6374:4307":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:9312:8419":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:4223:16070":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5635:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"0:353:2473":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"17:13899:5019":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12993:23204":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:4862:3503":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:11075:4687":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:980:8609":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5307:5740":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:44250:3910":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11688:4719":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12399:4789":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:6572:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:11094:4331":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:726:4553":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14402:5110":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6381:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7395:4320":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2767:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3393:8634":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:41867:7793":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:2148:8612":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:43956:3524":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:8155:6066":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12572:4702":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:46032:7905":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16187:5625":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7570:5698":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:4153:16063":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14260:5089":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5415:5742":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:8553:16060":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"5:12385:1850":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"1:44190:3917":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11605:4711":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:1207:8185":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13387:4905":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14868:5263":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:44886:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:12503:1726":{"crate_id":1,"path":["core","str"],"kind":"module"},"1:46309:7927":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6480:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:643:4516":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10573:36898":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:4570:4361":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14449:5124":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:23178:7530":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:7910:23142":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3614:5710":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:7681:7470":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12584:8177":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:10524:8173":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12362:4787":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:43811:3965":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:40766:8264":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:872:8493":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"4:4337:4296":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:4771:5728":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7379:36891":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2073:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:42522:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:33698:3610":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:32261:2928":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:12454:4796":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:10971:36275":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11341:8188":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1507:6342":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:1085:36878":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:623:36907":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"13:0:3373":{"crate_id":13,"path":["std_detect"],"kind":"module"},"13:110:36880":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:4217:3644":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5831:5753":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6749:5880":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3592:7369":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"17:14503:5130":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:1616:3478":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6532:5842":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:40643:7753":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:9542:8035":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:635:4540":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:1005:5942":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11634:4715":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:4821:7178":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:6723:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:22:819":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:11440:3964":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4103:2904":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5995:5775":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:21722:29864":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6282:4301":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11764:4728":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:42817:3492":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2508:5665":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:44054:3912":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:10407:8942":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15151:5340":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:835:8604":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:6853:8421":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:23266:7538":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:12362:1177":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"6:479:6268":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:9707:8245":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:9202:16152":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6120:23132":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:10884:8687":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:6631:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6462:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2958:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:10633:4326":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13187:4860":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3259:3517":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6927:5913":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:578:6326":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:8296:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:32337:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:10399:3494":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4723:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:47267:8030":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6652:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2878:5682":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:6358:4304":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:0:3377":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:8254:7314":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:43903:3968":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14079:5044":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7648:8595":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:1424:8616":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:8840:7391":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"1:32426:3553":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:7487:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:42230:3563":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:12851:4825":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14912:5294":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14847:5253":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:46983:7994":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:553:6313":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11825:8522":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6680:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:523:6296":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4364:4296":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:8246:8668":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:2010:787":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"1:44902:7880":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:2902:22269":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:2420:2920":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:44303:3924":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1684:6457":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:12363:471":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"17:15473:5423":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:43972:2837":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2809:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7539:5697":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"13:229:6161":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:22978:7508":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12478:4798":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:42067:7810":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"14:31:8601":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:11704:8662":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:23233:7535":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:15608:5476":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:532:6302":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5301:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:568:4286":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"16:7823:23141":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7577:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10342:2929":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:6398:5683":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:8536:3908":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"5:11721:7443":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15400:5404":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15836:5534":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11674:4718":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46288:7926":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5381:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:1898:3476":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:6790:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4829:6506":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:9381:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:3097:7455":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12740:3931":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:44004:3911":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12353:4786":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6098:23131":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:6867:4315":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:6678:2820":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"17:13272:4888":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:43125:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11877:4729":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7686:8596":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6813:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10846:4290":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3688:30144":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:44913:3568":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5311:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:3029:4562":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8761:10523":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11773:4809":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1620:3476":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:373:8622":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1625:6171":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:894:2920":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:40669:7754":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7996:8663":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"5:4561:8645":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:1132:4339":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14723:5150":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:33292:3607":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4531:5721":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4914:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:573:4516":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6504:5839":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:43378:7836":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12984:3901":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14372:5104":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:0:3381":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:16249:5636":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:11809:8640":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:42600:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15023:5312":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:41899:10531":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7144:23138":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:8199:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12969:4832":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:11849:8641":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:379:8623":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12388:4788":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:538:6305":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3438:8637":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11621:4713":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5395:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6160:22241":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:44108:3915":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:43579:3981":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11227:8500":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"9:445:22122":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:10707:8634":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5405:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:4672:16088":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:33564:3518":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9858:23195":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:15616:5479":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6876:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12647:8215":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:2068:1361":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:8273:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:12370:1816":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"16:8175:8597":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:21683:4527":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"0:484:115":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"17:11510:8507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:43801:3959":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:306:3042":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6494:5838":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:15521:5460":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2728:5675":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4976:5735":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:13932:4413":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:8008:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4806:3040":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"14:214:6153":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11324:8501":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:46046:7906":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10186:3511":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:40739:8731":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11547:4610":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:3925:5715":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:10980:36282":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12485:23324":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6507:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:7158:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5897:5760":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3677:16041":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:12175:8528":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9938:23198":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14587:5141":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15249:5360":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14977:5304":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5488:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:884:3644":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46178:7920":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:8542:8247":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6560:5686":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11313:4699":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:22593:15741":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:1586:6169":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:2466:3476":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:44613:3904":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:2539:6177":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5196:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15760:5518":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2611:3583":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:12778:3926":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:4727:8715":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:8613:8247":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:16212:5630":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5295:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:8290:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:40788:7447":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5507:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:10068:23183":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:7548:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4796:4389":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40493:7746":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:43133:3501":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:2323:22268":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:8261:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11647:4716":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11524:8198":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:4139:16062":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:6122:4366":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:7733:4367":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7428:23139":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12300:23322":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:3032:4295":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:43783:3960":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:12390:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"5:5776:7084":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"5:7980:2658":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"1:22939:7500":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:12384:1844":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"1:40537:10485":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15313:5378":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:5588:8647":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:12008:3974":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:15445:5415":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15769:5522":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3649:2929":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"5:6509:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7867:4664":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:11945:2815":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:1548:3644":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46242:7924":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8267:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:44925:7881":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:902:6169":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:6922:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"9:236:7832":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:538:4524":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2803:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:11026:23213":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6385:5825":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6047:8546":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:7592:2920":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12969:3522":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:6183:4308":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1900:6171":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:7744:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"5:2313:138":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"1:46386:7946":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:3313:6172":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:8850:3643":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"17:13986:5032":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:79:22115":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:12374:740":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"17:11865:8202":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:21938:2658":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3675:3630":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:15655:5488":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:708:8238":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:6704:4339":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:23011:7511":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:7067:3484":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:8319:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7085:5933":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:11088:4330":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:46195:7921":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:45921:7898":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:42085:7811":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5007:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:3669:3628":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:21720:29866":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:8176:7320":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6534:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12089:4766":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:4883:16110":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1974:3512":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"1:43084:7826":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:42238:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:3899:5714":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7755:5692":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5288:29663":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3610:8639":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:13037:10590":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14575:4793":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:13644:7766":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:4694:16089":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:41094:7779":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:4377:3643":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:765:27381":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4997:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"12:0:3378":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:44547:7861":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:1794:4339":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5593:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:42189:8732":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:47205:8013":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:12377:912":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"5:9143:7402":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"15:0:3380":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:40006:10449":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:5958:8654":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6638:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14599:5148":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:291:4339":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:8587:7371":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6777:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:7470:8257":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:5638:8652":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"1:10391:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:11302:7428":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:43945:3906":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15039:5315":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:0:3016":{"crate_id":17,"path":["object"],"kind":"module"},"6:1514:6344":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5648:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7563:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12264:8534":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8031:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:16151:5616":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:9317:8426":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12621:4805":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:10954:23211":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:473:6265":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:45950:7900":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5802:23129":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7006:8565":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5107:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:44672:10607":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:40719:8730":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:11583:8515":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:46527:7951":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:6506:15950":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"9:355:22137":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:4995:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11242:8187":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15126:5331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15116:5330":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3906:8641":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:953:8239":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11222:3644":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:44260:3909":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:43858:3971":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:40480:7745":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11467:4709":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5051:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:12373:737":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"1:44389:7848":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1098:8612":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:9398:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"0:0:2473":{"crate_id":0,"path":["anyhow"],"kind":"module"},"16:8136:6063":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:12369:1726":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"5:11346:8692":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:6708:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12127:4768":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:5798:3482":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:22221:2658":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:815:10286":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6278:8377":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:4201:16066":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:40424:7741":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:1595:6170":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5107:5739":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:9167:2920":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:4802:5729":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:42221:10543":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3065:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"5:11076:4329":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8752:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"9:176:8407":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:22248:3956":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:437:4618":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:12368:1692":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"1:1828:10405":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:39743:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5258:8646":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9859:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6976:5917":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:15342:5386":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10170:4668":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11493:8506":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:39571:3631":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:43962:3907":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15273:5369":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14933:5299":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:7709:7473":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:9117:7400":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"1:22660:3583":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:5960:5773":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:21739:29854":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:9421:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"14:202:3514":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:44619:7426":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5520:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:10903:7414":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1880:3643":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:4167:16065":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6521:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12225:8209":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:4333:8252":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:10341:8679":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:5325:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:30686:3044":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:23288:7540":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:8800:16130":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"4:3809:4339":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:22691:2658":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:102:6162":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:21769:2658":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:6005:3478":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"11:740:8239":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10710:8176":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:23189:7531":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"18:80:8162":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:46586:7954":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:7368:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12659:8539":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14356:5103":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:9305:8678":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:38358:3621":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10887:36906":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"9:500:6242":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:299:6163":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3491:3471":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:3810:5712":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10218:4670":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4970:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"15:306:8224":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:15646:5486":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8005:4555":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1631:6172":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5334:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:5682:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:1614:8238":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:43150:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:8082:8665":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12963:3530":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"11:2380:3643":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:2612:5670":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:3860:7314":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:7534:32074":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:10213:7806":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11557:8509":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13412:4910":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:23047:29691":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13046:4837":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6079:5643":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4587:5723":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7391:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14131:5049":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:39813:3627":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:44803:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11063:8498":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:10341:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:2825:7462":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14788:5201":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:545:6308":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13972:4736":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:4536:4296":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10405:3496":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:12379:900":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"6:6599:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:11187:7400":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:43821:3966":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13814:5007":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5249:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:1496:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2788:5678":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4424:5718":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:46326:7928":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:3264:8204":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:10481:113":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:5992:8416":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:11409:2957":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:16093:5601":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5349:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:3339:6173":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:589:4528":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1907:6172":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12701:3932":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:6682:8658":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:10950:7423":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:41104:7780":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15058:5316":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:8216:6068":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7799:5690":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7741:5702":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:47100:8001":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:46498:7950":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:9386:4311":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:23255:7537":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:39783:3625":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5326:8719":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:42561:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:4905:804":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"1:41118:7781":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:23062:29693":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:986:8610":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:32428:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:13199:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3421:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:12330:8428":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1964:2466":{"crate_id":5,"path":["std","error"],"kind":"module"},"16:2458:5663":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:1521:6347":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:43057:7819":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:5482:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:818:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:15748:5516":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:12378:894":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"6:4842:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:3473:8205":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:8343:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:45883:7892":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1955:4296":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:938:4345":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:9159:8255":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"8:0:3374":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:42327:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9854:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:1609:3643":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:42199:3443":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:30724:3546":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10185:4669":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:33080:3604":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:7484:2920":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5168:16114":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"16:2438:5662":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:4506:4361":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:6974:7488":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:41304:7783":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2684:5673":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:3318:32109":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6263:5820":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14489:5127":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:21950:7496":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:46113:7917":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:656:2805":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:10339:8260":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:2234:8196":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8118:6060":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:38413:3622":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:45936:7899":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13606:4957":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:40929:7773":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5288:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:8308:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:4211:16067":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:47190:8012":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:46954:7993":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:680:4541":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:11200:7401":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4890:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:2175:23256":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:43571:7838":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:22226:15658":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10622:36901":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:40454:7742":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:8642:7163":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:2275:7452":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:5004:16075":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:3669:4567":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:39668:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:3329:5708":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:928:3478":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12030:8203":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1530:6352":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15814:5528":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:40514:3924":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:40797:7757":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2223:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:3306:3643":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12251:8210":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:3875:8702":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:7492:7467":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12278:8211":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:40746:3971":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:45804:7885":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:500:4284":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3294:3557":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:5538:15936":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"6:4947:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:47111:8002":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13553:4943":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:42141:3644":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:9338:34801":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:30718:2952":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:598:36910":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6691:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15102:5329":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:10943:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:8594:7372":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3703:3558":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:6658:3478":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11915:23298":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12371:4830":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:15418:5408":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:42483:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:30463:10274":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:5205:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12929:4830":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3094:2930":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:8867:7397":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:2156:3596":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6611:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3286:3555":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12443:4795":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8388:2925":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10652:7491":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15720:5507":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:15582:5467":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"0:492:193":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"16:6342:36892":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:21822:2658":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:32321:3040":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12887:4827":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6758:5881":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:12361:417":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"5:680:2834":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4929:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:22381:15654":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46075:7915":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:16105:5603":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:758:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5914:5765":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:8599:16087":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:16176:5624":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5441:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:1551:6367":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4070:2920":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:40418:3923":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:1645:8263":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:5708:8653":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"1:10397:3493":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13959:5027":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:527:4285":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:497:6276":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:5139:4296":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:6143:9260":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:14876:5264":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16069:5596":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:10395:3492":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:3434:3046":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10419:4676":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:8619:7373":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:8225:7323":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:16269:4910":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:1597:6396":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:46341:7929":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"0:532:2465":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"16:5742:5744":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1500:6339":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5641:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1107:8616":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:2232:128":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:6948:5693":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:592:8624":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:43096:6034":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:42200:10535":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:8714:7383":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"6:5341:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:6433:5829":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2478:5664":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:15324:5382":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1696:6461":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:46210:7922":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4976:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:1564:22201":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13568:4949":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:2157:7314":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:3095:32107":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5255:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:44435:7858":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:47080:7999":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:4560:5722":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13437:4912":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:44561:10597":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:364:4278":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12808:4823":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:15010:5307":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7981:7316":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13797:5004":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15383:5400":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13844:5010":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:2003:3217":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"6:5057:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12683:8217":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10018:23180":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11812:8520":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6902:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12318:4775":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:44793:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3053:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:40897:7770":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:46017:7904":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6473:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2133:3597":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"10:36:6183":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15197:5351":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13424:4911":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13116:4847":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:32328:7607":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40709:4391":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:1539:6358":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4732:8716":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:2748:5676":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11443:4707":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2394:5660":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43732:8266":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:44294:3923":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:465:6260":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11743:4724":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:2171:8702":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:9217:16151":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5036:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1844:696":{"crate_id":5,"path":["std","env"],"kind":"module"},"17:9755:23176":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:7564:7469":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:7877:2817":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14025:5036":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6606:5852":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:4830:5730":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:789:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6940:5915":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:2559:6180":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:4325:8251":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2711:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:3274:3606":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14038:5038":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:8664:7374":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7695:6003":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:40503:7747":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:12380:906":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"11:2551:36877":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:22955:7504":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3436:8636":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:47126:8003":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:46259:7925":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:21737:29859":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:9358:7411":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15390:5401":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:31124:4527":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2344:3565":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:40806:7758":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:12082:2962":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:43893:3970":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6335:8376":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:6461:4308":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10915:36900":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:6270:7483":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:1727:6473":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:45868:7891":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1675:6451":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:46660:7956":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:9266:8417":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4464:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:4614:5724":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:15376:5399":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13922:5023":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6317:8556":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:8014:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:40625:7752":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6079:4296":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:23003:7510":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:12389:1422":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"1:21771:15656":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10350:4674":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13774:4999":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:842:15979":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3585:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:4940:5734":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2338:5651":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:6:817":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"17:14091:5045":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:2467:3572":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"16:5037:5737":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5217:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:6090:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10763:4400":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:46565:7953":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:7757:3515":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2708:5674":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:42241:193":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"4:6874:4339":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7917:4322":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13497:4925":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:44368:10596":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:10604:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:2613:3584":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:11402:3911":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"14:187:8827":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:10991:8665":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:3208:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:11509:3963":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:785:6170":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5347:5741":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15426:5410":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10661:8175":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:2594:7459":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4805:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:44285:3922":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5112:16109":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:7308:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13325:4895":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:14024:3472":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:15138:5334":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9737:23178":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:7767:3516":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3340:8632":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7633:36887":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13375:4904":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:531:4521":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:47033:7996":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:32307:5990":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:7559:5997":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6770:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"9:422:22124":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11189:4691":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44418:7857":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:45971:7901":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:11499:4332":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14325:5097":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13855:5011":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12189:8207":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:7556:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10877:8178":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2548:5667":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2485:16013":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"17:597:4664":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:963:15979":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:9700:138":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"11:2366:8621":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:11392:8189":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:328:6221":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:12478:3951":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:256:8492":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2719:4290":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:23096:7525":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:5622:8651":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4957:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11016:8180":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:13758:8726":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7612:3823":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14516:5131":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14177:5073":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:2304:7454":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5319:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5019:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:1861:8242":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"16:2572:5668":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3403:3559":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:23751:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13015:4793":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:39683:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"9:390:22123":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:4927:16079":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4792:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2768:5677":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:23109:7526":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:570:6321":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1637:6173":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:47137:8004":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:44036:3914":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:40920:7772":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9807:23184":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:42244:136":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"6:7586:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15266:5368":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2636:5671":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:8468:7365":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"3:0:3372":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:5570:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:21705:29861":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:9712:4325":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:8301:6075":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16223:5632":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:22733:15735":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12989:3900":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:4986:8214":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5629:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:21824:15652":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12328:4777":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"0:481:226":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"6:5670:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:42045:7371":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:13604:8722":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:4807:16065":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13235:4875":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:15931:4860":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:5534:15935":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:1533:3643":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7448:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12464:23323":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:221:3569":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:40969:7776":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:39763:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5400:4668":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:2541:3310":{"crate_id":5,"path":["std","io"],"kind":"module"},"1:40816:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12408:4790":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:10704:8632":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:1089:8611":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13308:4893":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:3658:8828":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14341:5099":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6411:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:22473:15738":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:6564:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:4352:5717":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5983:4296":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2733:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:3264:3608":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4653:3502":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:7580:5998":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1625:6421":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5088:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13064:4840":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"15:394:22233":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:32338:3244":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:698:4545":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5095:10480":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:6406:8420":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"14:160:8601":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12530:8212":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:2037:8190":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5781:5688":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:23222:7534":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:491:6273":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:44510:7860":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1589:6391":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2374:5659":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:42366:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:40910:7771":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46453:7949":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11354:8504":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3439:3561":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:11219:7426":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:15734:5509":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:6785:2920":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7397:36889":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6443:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:5367:23128":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:3206:3554":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:15463:5418":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:40576:7749":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:11938:35167":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1023:8611":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6437:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:44852:7877":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5477:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:22989:29923":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:42838:3494":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2938:3489":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:41333:7786":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4215:16068":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:481:4514":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6648:5856":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3042:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:4882:5732":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:8061:3442":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:7341:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1703:6464":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3830:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43932:3525":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:3094:2905":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:23299:7541":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:6979:4397":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:7518:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:44208:3918":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:40888:7769":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:23089:7522":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:809:3476":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:2418:5661":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:5602:8650":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"5:11670:8256":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12707:8218":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:8202:5704":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:1563:6375":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4902:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5769:5748":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:10999:8653":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:4925:16078":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14235:5085":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8755:3645":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5241:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14545:5134":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6917:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:47054:7997":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13753:4995":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:10710:8636":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:5515:128":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"5:8205:139":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"1:46415:7947":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:13912:4304":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4772:16106":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:8333:8425":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"5:10320:8243":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:507:4516":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:16259:4905":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:3196:5650":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:1893:3476":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:42278:3643":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:22605:30740":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:1625:8239":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:2076:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8443:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:10913:7320":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:40775:2550":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:11211:36279":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:5098:16108":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:6849:5907":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:44404:7854":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5658:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:4109:2898":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10137:23177":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5927:5766":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8799:8829":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:3014:22271":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"10:0:3376":{"crate_id":10,"path":["adler"],"kind":"module"},"18:515:4519":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14560:5138":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:42405:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10317:4673":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:491:4515":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:1223:8261":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:15:2842":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:11115:8182":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5075:5738":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:41845:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7321:7815":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11702:4720":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5230:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:434:8233":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:261:8493":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11405:8505":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:8328:8669":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:41883:7795":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16198:5626":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:45851:7890":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:150:4274":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:6718:4314":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4896:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6493:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:1410:8611":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:10360:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12949:4775":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5722:5689":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:1643:6433":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12543:8538":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:3667:16021":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3529:7786":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"5:9325:7408":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6991:36888":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:0:3382":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:3459:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:42831:3493":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15822:5531":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:3940:3476":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:513:8495":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:2483:16012":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"5:3303:36606":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:894:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:12375:756":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"17:11567:8510":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:1711:6468":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10401:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:12314:8697":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:4062:5716":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3559:4296":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"17:11841:8201":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:46925:7992":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4:1259":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:3842:5713":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6802:5893":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6480:5685":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:1914:6173":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4605:7481":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14986:5305":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:1239:9258":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:12364:1878":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"1:46548:7952":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:21842:7496":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:22555:15740":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:22579:2658":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:41342:4398":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:994:4347":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9671:23179":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15168:5345":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:40617:7751":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:7463:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:42824:3491":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:12510:2901":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2974:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:1011:3643":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7715:36759":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"1:32396:3635":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:43171:2681":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:938:3476":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:16121:5608":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:16235:5635":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12043:8525":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3486:16048":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:651:4516":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4884:2819":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11166:4689":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:22705:15734":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:9439:7412":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"1:2772:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:3841:16061":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:6544:1932":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"6:7414:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:8047:2806":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:16032:4878":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:5044:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13252:4878":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"5:8605:8674":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:40465:29694":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10720:36902":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:949:8238":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:5851:7315":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3903:8640":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:9190:7404":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:798:3478":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:42149:2920":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:7549:5996":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:30739:3501":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5846:5755":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:47091:8000":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44865:31520":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:46436:7948":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:8067:15994":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"11:1049:8612":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:42124:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:798:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7361:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13723:4986":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:3937:3478":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:29:507":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"1:23211:7533":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:11595:4710":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:38992:3623":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13674:4961":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4743:5727":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:3352:32108":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:3347:6171":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9916:23197":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:830:8240":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7306:36890":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10386:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:15410:5407":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:43112:29688":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5139:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13526:4934":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11293:23231":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:23120:10299":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11089:8181":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:10962:7366":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6231:5815":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10818:8177":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10828:36899":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:4819:7176":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:14012:5035":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6672:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14752:5170":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13581:4953":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13509:4926":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:8638:8675":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:2705:4292":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:11715:7442":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:564:6318":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:9232:16153":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15176:5348":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:5935:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"5:6796:8659":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6665:23135":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2967:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:8226:23143":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:10933:7321":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:6666:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15190:5350":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:46128:7918":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15092:5328":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"0:351:2981":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"5:8183:7321":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12494:4799":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15434:5411":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:2741:8630":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:11953:2815":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12516:8536":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:22517:15739":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:6748:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:944:8240":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:46880:7991":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7656:23140":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:44789:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5586:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:4981:4297":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12597:4804":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:42444:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:44154:3920":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:9106:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"1:41360:7789":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:586:6330":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13594:4954":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:43356:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6466:5835":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12557:4687":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:8762:7832":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:12494:3953":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:9151:3643":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:3597:8206":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:11786:4334":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:8785:7386":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5271:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:16079:5597":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:689:4544":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:39820:3043":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"11:2137:8611":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4440:8713":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:40530:3922":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7355:5973":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4641:5725":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:96:8163":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10612:8174":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1613:2920":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1140:8615":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10717:1692":{"crate_id":1,"path":["core","slice"],"kind":"module"},"6:8284:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:23141:2658":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:2660:5672":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13173:4859":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:608:8491":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:44582:7866":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:1494:6336":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:8459:4555":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"1:40654:10510":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11329:3962":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:7650:15919":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13399:4908":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:4886:16088":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:40858:7766":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6962:5694":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13024:23205":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6882:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:42303:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:14298:5093":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5541:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:45789:7882":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:43986:3913":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"14:0:3379":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:2964:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"11:2440:3478":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:7052:8566":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4881:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:16050:4888":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:10590:8254":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5151:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:7548:2920":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:31097:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:8001:7317":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1569:6377":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5533:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:7206:4382":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2838:5680":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:432:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2998:5705":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:39651:3470":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:2528:5666":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11051:8497":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5450:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6895:5909":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:44240:3908":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:8477:7366":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"1:22646:15742":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14111:5048":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15368:5396":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10020:804":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"16:7813:6007":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:2315:8628":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"1:47071:7998":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15078:5324":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:718:4550":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11041:2658":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6731:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:2357:32105":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:46157:7919":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:40959:7775":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7350:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:7231:4385":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13146:4851":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:9413:4318":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:43331:7828":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12076:8527":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:5844:4308":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:44278:3921":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:46681:7957":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:22260:29857":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12422:4791":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:33765:3609":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"0:479:137":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"1:3289:3556":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:8523:2837":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"1:44090:3916":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:42294:2920":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:6659:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6700:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:1105:8614":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6588:5844":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8297:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5676:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:32339:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:7694:10510":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:8529:3913":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"6:1584:6389":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:1636:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:22871:7498":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11661:4717":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4937:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5447:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"5:3300:36610":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3213:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"11:873:8609":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8335:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:45819:7886":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:7842:3477":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:7469:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5089:16107":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:1601:8618":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:15281:5370":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:2635:8629":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3658:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:21948:15653":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:735:8700":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:5490:4339":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:3105:9259":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14386:5106":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:7584:2920":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2135:3598":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:0:1718":{"crate_id":5,"path":["std"],"kind":"module"},"10:44:6184":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:40522:3923":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:4821:8213":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:2854:5681":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13738:4990":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:7826:3476":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:5462:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12342:4782":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12671:8216":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:40867:7767":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8065:4299":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3255:3594":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:485:6271":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:957:8604":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6872:5908":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:47152:8005":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10905:8179":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:7718:10489":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}