{"root":"0:0:1940","crate_version":"1.0.75","includes_private":false,"index":{"0:345:2444":{"id":"0:345:2444","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:135","crate::anyhow":"0:347:1940"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"a:2:2845:3060-0:472:135":{"id":"a:2:2845:3060-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:3060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2845:3060-0:516:2017":{"id":"a:2:2845:3060-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:3060","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7581:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:28:2387"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2275:2282":{"id":"2:2275:2282","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:30256":{"id":"2:12625:30256","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2585:752":{"id":"2:2585:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:472:135":{"id":"a:2:2788:249-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[558,0],"end":[564,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3022:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:213:261","0:214:602"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12514:2355":{"id":"2:12514:2355","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11760:2365"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:2360":{"id":"2:12532:2360","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43634:2300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12630:2413":{"id":"2:12630:2413","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:2413"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43947:3354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:725":{"id":"0:218:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:33763":{"id":"2:12508:33763","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:33766":{"id":"2:12515:33766","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["filter_map","step_by","is_sorted_by","count","sum","rev","max","reduce","partition","flatten","ge","peekable","collect","zip","enumerate","le","is_sorted_by_key","product","unzip","min","try_reduce","partition_in_place","map_windows","ne","skip_while","all","intersperse","__iterator_get_unchecked","cmp_by","map","copied","eq","max_by_key","any","find","size_hint","is_partitioned","fuse","take_while","intersperse_with","next_chunk","partial_cmp_by","cloned","max_by","find_map","try_fold","inspect","map_while","for_each","advance_by","partial_cmp","eq_by","cycle","min_by_key","take","last","try_find","try_for_each","chain","try_collect","position","scan","cmp","filter","nth","skip","by_ref","array_chunks","is_sorted","min_by","rposition","lt","fold","gt","collect_into","flat_map"],"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:24:174","0:25:1054","0:26:2386"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12511:33765":{"id":"2:12511:33765","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12509:33764"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:2968":{"id":"5:5521:2968","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:174":{"id":"0:24:174","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[574,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:218:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[960,0],"end":[970,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:283:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[580,0],"end":[584,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:7549:174":{"id":"2:7549:174","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:3424-0:516:2017":{"id":"b:2:3424-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1940":{"id":"0:0:1940","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[689,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the `std::error::Error` trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using the nightly channel, or stable with `features = [\"backtrace\"]`, a\n  backtrace is captured and printed with the error if the underlying error\n  type does not already provide its own. In order to see backtraces, they\n  must be enabled through the environment variables described in\n  [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  The tracking issue for this feature is [rust-lang/rust#53487].\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n  [rust-lang/rust#53487]: https://github.com/rust-lang/rust/issues/53487\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, the same API is almost all available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:472:135"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.75\")]","#![feature(error_generic_member_access)]","#![deny(dead_code, unused_imports, unused_mut)]","#![allow(clippy :: doc_markdown, clippy :: enum_glob_use, clippy ::\nexplicit_auto_deref, clippy :: extra_unused_type_parameters, clippy ::\nlet_underscore_untyped, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: needless_doctest_main, clippy ::\nnew_ret_no_self, clippy :: redundant_else, clippy :: return_self_not_must_use,\nclippy :: unused_self, clippy :: used_underscore_binding, clippy ::\nwildcard_imports, clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:471-0:347:1940","0:472:135","0:516:2017","0:474:238","0:477:113","0:485:204","0:345:2444","0:346:1932","0:347:1940"],"is_stripped":false}}},"2:2582:2364":{"id":"2:2582:2364","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:1940":{"id":"0:347:1940","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[190,0],"end":[209,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:472:135"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"2:12507:2337":{"id":"2:12507:2337","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12567:33771":{"id":"2:12567:33771","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12200:2956","str::split":"2:12555:2692","prim@char":"1:12029:457","str::split_terminator":"2:12564:33770"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43716:3344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:516:2017":{"id":"b:2:2594-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2597:135","2:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:685:2357":{"id":"5:685:2357","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12536:33769":{"id":"2:12536:33769","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43912:3342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:135":{"id":"0:472:135","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[374,0],"end":[376,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:172","a:2:2845:3060-0:472:135","a:2:2805:259-0:472:135","a:2:8670:9554-0:472:135","a:2:2788:249-0:472:135","a:2:8669:2894-0:472:135","b:2:2276-0:472:135","b:2:2589-0:472:135","b:2:2594-0:472:135","b:2:2273-0:472:135","b:2:2583-0:472:135","b:2:2586-0:472:135","b:2:2579-0:472:135","b:2:3424-0:472:135","b:5:5793-0:472:135","0:221","0:284","0:290","0:212","0:209","0:217","0:288","0:282","0:286","0:215","0:219"]}}},"0:175:2154":{"id":"0:175:2154","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:60":{"id":"0:32:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:30257":{"id":"2:12626:30257","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39635:30267","Self::is_ascii":"2:12625:30256"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39635:30267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:30342":{"id":"5:5539:30342","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12629:30261"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:472:135":{"id":"b:2:2594-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:135","2:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:238":{"id":"0:474:238","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[453,0],"end":[453,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:477:113"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"2:12628:30260":{"id":"2:12628:30260","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2630":{"id":"0:197:2630","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[414,4],"end":[419,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12551:3314":{"id":"2:12551:3314","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41688:202","prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12544:28727":{"id":"2:12544:28727","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12547:3282":{"id":"2:12547:3282","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41688:202","prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2586-0:472:135":{"id":"b:2:2586-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2588:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5795:1603":{"id":"5:5795:1603","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[586,0],"end":[593,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3046:2662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12538:29134":{"id":"2:12538:29134","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2278:26163":{"id":"2:2278:26163","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:752":{"id":"0:285:752","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[973,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:29116":{"id":"2:12529:29116","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12528:29115"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:33770":{"id":"2:12564:33770","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12200:2956","str::split":"2:12555:2692","prim@char":"1:12029:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12567:33771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43698:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8669:2894-0:472:135":{"id":"a:2:8669:2894-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2805:259-0:516:2017":{"id":"a:2:2805:259-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12516:349":{"id":"2:12516:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12517:348","`u8`":"1:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:1040":{"id":"0:173:1040","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:33768":{"id":"2:12527:33768","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12035:1544","crate::ops::IndexMut":"2:3089:2945","str::slice_unchecked":"2:12526:33767"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:3317":{"id":"5:686:3317","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:29093":{"id":"2:12524:29093","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:2692":{"id":"2:12555:2692","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::split_whitespace":"2:12533:32055","str::rsplit":"2:12561:29126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43648:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12591:33774":{"id":"2:12591:33774","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::match_indices":"2:12588:33773"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43816:3352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:34440":{"id":"5:5520:34440","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:521:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480:531":{"id":"0:480:531","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[603,4],"end":[605,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:63:2129":{"id":"0:63:2129","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3056:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12617:33782":{"id":"2:12617:33782","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:516:2017":{"id":"b:5:682-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:684:2369","5:685:2357","5:686:3317"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12534:32059":{"id":"2:12534:32059","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12533:32055"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43931:3357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:2017":{"id":"0:516:2017","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[400,0],"end":[402,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:195:1931"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:19","a:2:2845:3060-0:516:2017","a:2:2805:259-0:516:2017","a:2:8670:9554-0:516:2017","a:2:2788:249-0:516:2017","a:2:8669:2894-0:516:2017","b:2:2276-0:516:2017","b:2:2589-0:516:2017","b:2:2594-0:516:2017","b:2:2273-0:516:2017","b:2:2583-0:516:2017","b:2:2579-0:516:2017","b:2:7547-0:516:2017","b:2:3424-0:516:2017","b:5:682-0:516:2017","0:29","0:22","0:31","0:27","0:519"]}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[568,0],"end":[572,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3035:2509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12611:29135":{"id":"2:12611:29135","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2396":{"id":"0:49:2396","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:103:2125":{"id":"0:103:2125","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:196:2623":{"id":"0:196:2623","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[402,4],"end":[404,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:195:1931"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:7547-0:516:2017":{"id":"b:2:7547-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7690:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7549:174","2:7550:2384","2:7551:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:68:531":{"id":"0:68:531","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:531":{"id":"0:61:531","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3426:1641":{"id":"2:3426:1641","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39448:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:21:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:7550:2384":{"id":"2:7550:2384","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"2:12520:29091":{"id":"2:12520:29091","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2631":{"id":"0:201:2631","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[492,4],"end":[503,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:29126":{"id":"2:12561:29126","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::split":"2:12555:2692"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43666:3343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:29132":{"id":"2:12576:29132","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:2870":{"id":"2:12582:2870","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::rmatches":"2:12585:33772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43852:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12588:33773":{"id":"2:12588:33773","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::rmatch_indices":"2:12591:33774"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43798:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2592:135":{"id":"2:2592:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12518:2351":{"id":"2:12518:2351","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:33780":{"id":"2:12605:33780","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12620:33783":{"id":"2:12620:33783","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:30259":{"id":"2:12627:30259","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:34441":{"id":"5:5524:34441","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34443":{"id":"5:5535:34443","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:604":{"id":"0:216:604","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[569,4],"end":[571,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3022:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7634:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:30:880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2589-0:516:2017":{"id":"b:2:2589-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2592:135","2:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2273-0:472:135":{"id":"b:2:2273-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2275:2282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3424-0:472:135":{"id":"b:2:3424-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:640":{"id":"0:222:640","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[587,4],"end":[592,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:350":{"id":"0:289:350","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[986,4],"end":[988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2387":{"id":"0:28:2387","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:34440","5:5521:2968","5:5524:34441","5:5527:34442","5:5535:34443","5:5536:34444","5:5537:9481","5:5538:30341","5:5539:30342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[541,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:173:1040","0:175:2154","0:192:531","0:194:1774","0:195:1931","0:196:2623","0:197:2630","0:199:2634","0:201:2631","0:203:2659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12632:9380":{"id":"2:12632:9380","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:9380"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43956:3355","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2386":{"id":"0:26:2386","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2369":{"id":"5:684:2369","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:337:2710":{"id":"0:337:2710","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[98,0],"end":[98,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[972,0],"end":[976,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:285:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8669:2894-0:516:2017":{"id":"a:2:8669:2894-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:2894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12522:29092":{"id":"2:12522:29092","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:33779":{"id":"2:12602:33779","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12225:3333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:33778":{"id":"2:12601:33778","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:34444":{"id":"5:5536:34444","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2506","`String`":"5:7493:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2583-0:516:2017":{"id":"b:2:2583-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:265":{"id":"0:328:265","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[75,0],"end":[75,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:48:1938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:113","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:61:531","0:63:2129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213:261":{"id":"0:213:261","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[559,4],"end":[559,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"b:2:2276-0:516:2017":{"id":"b:2:2276-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2278:26163"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346:1932":{"id":"0:346:1932","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[120,0],"end":[143,1]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:135","crate::anyhow":"0:347:1940"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:70:2129":{"id":"0:70:2129","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3056:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:752":{"id":"0:287:752","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[979,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:7508":{"id":"2:12531:7508","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43624:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:30341":{"id":"5:5538:30341","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12628:30260"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[545,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:211:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12533:32055":{"id":"2:12533:32055","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12534:32059"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43922:3341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:30261":{"id":"2:12629:30261","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:7862":{"id":"2:12535:7862","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43902:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:516:2017":{"id":"b:2:2579-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2582:2364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12506:880":{"id":"2:12506:880","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12029:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:752":{"id":"0:211:752","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[550,4],"end":[553,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1054":{"id":"0:25:1054","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7690:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[985,0],"end":[989,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2547:79","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12517:348":{"id":"2:12517:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:472:135":{"id":"b:5:5793-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:214:602":{"id":"0:214:602","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[561,4],"end":[563,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3022:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505":{"id":"2:12505","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12506:880","2:12507:2337","2:12508:33763","2:12509:33764","2:12511:33765","2:12514:2355","2:12515:33766","2:12516:349","2:12517:348","2:12518:2351","2:12520:29091","2:12522:29092","2:12524:29093","2:12526:33767","2:12527:33768","2:12528:29115","2:12529:29116","2:12530:7496","2:12531:7508","2:12532:2360","2:12533:32055","2:12534:32059","2:12535:7862","2:12536:33769","2:12537:32064","2:12538:29134","2:12541:2684","2:12544:28727","2:12547:3282","2:12551:3314","2:12555:2692","2:12558:29124","2:12561:29126","2:12564:33770","2:12567:33771","2:12570:29128","2:12573:29130","2:12576:29132","2:12579:29133","2:12582:2870","2:12585:33772","2:12588:33773","2:12591:33774","2:12594:33775","2:12596:33776","2:12598:2690","2:12600:33777","2:12601:33778","2:12602:33779","2:12605:33780","2:12608:2374","2:12611:29135","2:12614:33781","2:12617:33782","2:12620:33783","2:12623:2450","2:12625:30256","2:12626:30257","2:12627:30259","2:12628:30260","2:12629:30261","2:12630:2413","2:12632:9380","2:12633:33784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[992,0],"end":[996,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2547:79","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:291:350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2593:1628":{"id":"2:2593:1628","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:33781":{"id":"2:12614:33781","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2597:135":{"id":"2:2597:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32106:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:199:2634":{"id":"0:199:2634","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[422,4],"end":[454,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2598:1626":{"id":"2:2598:1626","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12594:33775":{"id":"2:12594:33775","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:33776":{"id":"2:12596:33776","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:477:113":{"id":"0:477:113","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[601,0],"end":[613,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:472:135"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:480:531","0:482:2129"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:103:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:66","0:58"]}}},"2:12585:33772":{"id":"2:12585:33772","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12200:2956","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::matches":"2:12582:2870"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43870:3350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2659":{"id":"0:203:2659","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[506,4],"end":[524,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12579:29133":{"id":"2:12579:29133","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2588:752":{"id":"2:2588:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:34442":{"id":"5:5527:34442","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471-0:347:1940":{"id":"0:471-0:347:1940","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[270,0],"end":[270,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:347:1940","glob":false}}},"a:2:2788:249-0:516:2017":{"id":"a:2:2788:249-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:521:461":{"id":"0:521:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:2374":{"id":"2:12608:2374","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12623:2450":{"id":"2:12623:2450","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12161:134","`FromStr`":"2:12160:2953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12160:2953","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12160:2953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:9481":{"id":"5:5537:9481","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12598:2690":{"id":"2:12598:2690","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:472:135":{"id":"b:2:2589-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2592:135","2:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:880":{"id":"0:30:880","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1774":{"id":"0:194:1774","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[363,4],"end":[365,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available on the nightly channel.\nTracking issue: [rust-lang/rust#53487][tracking].\n\nOn stable compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```\n\n[tracking]: https://github.com/rust-lang/rust/issues/53487","links":{},"attrs":["#[cfg(any(backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"1:622:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:113","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"2:32106:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:68:531","0:70:2129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:752":{"id":"0:283:752","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[962,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:350":{"id":"0:291:350","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[993,4],"end":[995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1938":{"id":"0:48:1938","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:49:2396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"a:2:8670:9554-0:472:135":{"id":"a:2:8670:9554-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:9554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[978,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2506","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:1040":{"id":"0:21:1040","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:2129":{"id":"0:482:2129","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[609,4],"end":[612,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3056:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12509:33764":{"id":"2:12509:33764","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:531":{"id":"0:192:531","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[301,4],"end":[329,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:477:113"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:725":{"id":"0:220:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[581,4],"end":[583,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:29115":{"id":"2:12528:29115","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12529:29116"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:7496":{"id":"2:12530:7496","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43618:2950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:33767":{"id":"2:12526:33767","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12035:1544","str::slice_mut_unchecked":"2:12527:33768","crate::ops::Index":"2:3085:2944"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:32064":{"id":"2:12537:32064","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43940:3353","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:29124":{"id":"2:12558:29124","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12016:3358","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2583-0:472:135":{"id":"b:2:2583-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2805:259-0:472:135":{"id":"a:2:2805:259-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:485:204":{"id":"0:485:204","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[634,0],"end":[636,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:472:135":{"id":"b:2:2579-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2582:2364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8670:9554-0:516:2017":{"id":"a:2:8670:9554-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:9554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2273-0:516:2017":{"id":"b:2:2273-0:516:2017","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2275:2282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:7551:846":{"id":"2:7551:846","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2630:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12570:29128":{"id":"2:12570:29128","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956","str::rsplitn":"2:12573:29130"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43752:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12573:29130":{"id":"2:12573:29130","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12029:457","str::splitn":"2:12570:29128","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43770:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:33777":{"id":"2:12600:33777","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2707":{"id":"0:319:2707","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[53,0],"end":[53,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:195:1931":{"id":"0:195:1931","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:472:135":{"id":"b:2:2276-0:472:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2278:26163"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12541:2684":{"id":"2:12541:2684","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12633:33784":{"id":"2:12633:33784","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:33784"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43965:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:3273:3056":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2594:4322":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11245:4736":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40464:7424":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12294:4860":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12099:4814":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:10721:3348":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10371:7839":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:609:8123":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:6533:8318":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:3600:5522":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4449:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7365:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:4044:8265":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:21383:9618":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:5928:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:4373:2504":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:12220:3334":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11762:4746":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:4053:5528":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39299:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11152:7854":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13149:5030":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:41610:7463":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6263:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4428:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13011:5000":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:40103:7397":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44367:3324":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:491:4432":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40394:7414":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11609:2277":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:42041:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6456:5652":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2931:3043":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:1010:8239":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4610:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46901:7589":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12646:4930":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:21592:9623":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:4236:3069":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:42990:7486":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:42761:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:41762:2384":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:4527:5533":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:7552:3064":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:1145:8245":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4401:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2744:5487":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6017:21711":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11711:4703":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:43698:3346":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44069:7506":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8449:7482":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:9575:34999":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6700:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:42158:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10495:4623":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:3960:4281":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1092:8243":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2339:5465":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12268:4855":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:3301:2983":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4893:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:43202:3414":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:5484:4281":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11202:4687":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8810:7733":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:12030:1666":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:636:4457":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5301:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4595:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:2209:7838":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5648:8172":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10098:8133":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3267:3054":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13299:5054":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5574:5496":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:8134:5876":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7572:4358":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:1075:7826":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9661:34996":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:32146:5800":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:42316:8057":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:44684:7532":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:1764:7137":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6798:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8348:7709":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41834:204":{"crate_id":2,"path":["anyhow","Result","Ok"],"kind":"variant"},"5:1013:4258":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11175:7522":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"9:357:20717":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2472:5476":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"8:0:2768":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2904:3037":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1591:6241":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43770:3347":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2510:2125":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6155:4348":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13891:5256":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6041:21712":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:10280:2125":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12027:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:357:4251":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11688:21782":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:40384:7413":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6918:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44578:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40676:7434":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7635:2125":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3235:8294":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:21400:2125":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12889:4981":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6961:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9627:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:47161:7593":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:6830:3248":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:7556:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"14:215:5963":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:915:7875":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1822:7887":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"14:160:8229":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2878:3033":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:48042:7640":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6804:9611":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:44100:7510":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:646:2297":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4764:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14157:5323":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:4428:4283":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:0:2775":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:4462:5531":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:7746:8324":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11048:4367":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4783:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10772:4641":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:2260:8239":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:2962:34914":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8766:21770":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4808:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:3319:9477":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:41831:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:7657:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:11942:3364":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:3493:9448":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9278:4584":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12040:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2334:3070":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:43514:3406":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:42998:7487":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2940:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:5712:5562":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13907:5259":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:8115:5873":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43912:3342":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11359:21902":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21810:9620":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"0:472:135":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"1:4908:9543":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:12016:3358":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:474:238":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"1:1407:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2907:5494":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4388:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8854:7899":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:4889:5544":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:736:25740":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:363:8284":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10088:4322":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12686:4938":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"15:306:7861":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1563:6024":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12912:4990":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:44459:15035":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7639:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8216:3340":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12008:4799":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13260:5044":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:542:6153":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12877:4979":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:2012:7832":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9004:21778":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10764:7657":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2888:2940":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1697:6312":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13898:5258":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:555:6159":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44399:3326":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40914:4316":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:4365:4283":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7006:8194":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:13839:5240":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:1911:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:2150:21834":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3035:2509":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5885:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:12034:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:43752:3348":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44391:3331":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:1072:34982":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:699:4462":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40374:7411":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"14:187:8435":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:6459:4352":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7090:5751":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10152:8341":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5830:5578":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13229:5038":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:43922:3341":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:40063:31806":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6844:5719":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12423:4892":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13740:5221":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21159:2125":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:39343:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2862:3034":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:41874:3069":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:2881:5493":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3666:2384":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:40899:7439":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7391:21718":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4173:7896":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:3049:20851":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:40042:7391":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14515:5435":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12238:4843":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7067:5749":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"14:202:2934":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:41814:15004":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40202:7405":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43426:3394":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:8595:21757":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21815:9628":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6485:5498":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:860:2384":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13041:5005":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:564:4443":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43464:3400":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11273:4699":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14317:5386":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:42080:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21594:7157":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41804:8278":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9182:31303":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12544:4916":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2374:9446":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42706:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:1869:6023":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12622:4929":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8868:7736":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:46087:7555":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6222:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11602:27215":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:5424:8311":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10367:8139":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1484:7877":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13694:5212":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"0:345:2444":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"17:9446:7815":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2926:3041":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:32160:2504":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:6976:8415":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:14402:5409":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:21585:2125":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1505:7876":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11174:21900":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7861:7659":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4860:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5068:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11307:4703":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:41882:3070":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:7622:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43198:7489":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8541:3069":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4427:2920":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43716:3344":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4774:5540":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10937:8324":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10341:4619":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:992:5752":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10576:4630":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:2364:9441":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:40444:7422":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:10244:8524":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"14:31:8229":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7782:5817":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3240:6025":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:43816:3352":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:39221:2985":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5897:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9095:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:30552:31816":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:8181:5516":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6868:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11450:4370":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"14:221:5965":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:5564:9568":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"13:0:2766":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:10569:3396":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46711:7586":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14043:5293":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:30388:31823":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5017:5548":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:44260:3336":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5435:5554":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40496:7427":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7523:5807":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7792:21720":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:12028:1037":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8142:7700":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2916:3039":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11282:4700":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:12205:2946":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:6536:9580":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:929:9389":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9476:4361":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:2872:3030":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:41771:7469":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7513:5806":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9781:7821":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:6187:8064":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39635:30267":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:46665:7585":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:22361:31818":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:12853:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"9:177:8044":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39283:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4480:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:393:20703":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4745:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1761:7885":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8798:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"11:2351:2384":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:860:8237":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22448:7188":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10819:7701":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12474:4905":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12984:4998":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:2143:7111":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7911:8326":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8002:8065":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:868:8238":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10749:3397":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7041:5743":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44395:3325":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11296:4701":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10759:7756":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5829:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:7692:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13817:5236":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:11281:3409":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:9471:7888":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10166:21809":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:2348:9275":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6889:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:2473:6029":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11846:4757":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40115:3356":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44383:3332":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:10754:7754":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:39323:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:7371:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12453:4901":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:22269:7162":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:4079:2980":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6934:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12438:4896":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11236:4697":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:5374:8307":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4998:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:2178:7835":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1778:3241":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:9065:7744":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:7834:3636":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7736:5815":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:2526:5478":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:30091:9492":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:42197:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7360:34991":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:3246:3052":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:4299:8267":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:41737:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:563:6164":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5384:21708":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13711:5213":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:8687:21768":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:10140:21808":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:4148:8053":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4908:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6658:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8547:7729":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:12225:3333":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13555:5162":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14119:5315":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4376:8305":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12044:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:10529:8292":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:4557:5534":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"9:450:20702":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:4618:9497":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4814:9506":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3418:7704":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6361:5640":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6204:8014":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6742:5703":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42678:7471":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12599:4925":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:8954:21776":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14537:5441":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5322:5552":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6741:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:44212:7513":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4814:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:12011:2278":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10699:8156":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:40526:7429":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6603:4353":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9968:7460":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6514:4258":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14336:5392":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12048:1648":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5052:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:48157:7645":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:8670:9554":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6943:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:434:4530":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:1036:8241":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11194:7745":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12514:4913":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:46139:7557":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:4224:8303":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11474:4544":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4462:9518":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5363:5553":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11167:27120":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:45957:7546":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5773:8060":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4031:9499":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:21460:2125":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:21023:32485":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5976:4287":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7426:7130":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:10438:3069":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6261:8013":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"14:0:2773":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:7679:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14283:5374":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10686:8154":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4854:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:2245:7119":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4698:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:10763:3395":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:9986:7824":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2857:2939":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:8826:21772":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7660:5813":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:0:2771":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:3046:2662":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10241:4597":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14309:5383":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5009:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:21561:2125":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5104:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12791:4951":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:44226:14765":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2359:5471":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:23072:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:3596:3070":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9853:21790":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11049:8162":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:21253:9626":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:48095:7643":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:1546:3241":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12124:4817":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11338:21901":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:46355:7564":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:43634:2300":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7334:2384":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:574:4433":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10317:4617":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11449:21780":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:41457:7449":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:3173:3069":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:6666:4258":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11379:7773":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:40150:7399":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7492:5803":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:357:8283":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:45686:7535":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11163:4681":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8846:3069":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11995:8068":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10950:8312":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:7577:3241":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:7593:3242":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:45856:7542":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"11:1562:8247":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10837:27112":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44375:3329":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:12271:14758":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:80:7804":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5049:5549":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1275:8241":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44379:3328":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6781:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2682:2394":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:6423:8317":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:8927:21775":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7518:2937":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:1546:6210":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:6973:14954":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43618:2950":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:12214:3335":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:680:3070":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:12826:33187":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3162:27005":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1127:8244":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:548:6156":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6156:5627":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:22344:7173":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:0:2772":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:40277:4308":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4440:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:8281:5885":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:39387:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10431:8143":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:10789:7658":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:30922:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8228:7892":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"13:110:34983":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11534:8302":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:261:4258":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1576:6229":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13114:5018":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8165:9449":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:5739:8313":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6944:34986":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5121:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10127:4602":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:6872:3256":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11192:4685":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6960:8193":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:13102:2991":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:3441:7848":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:7506:14951":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46823:7588":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5974:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:22382:31808":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5233:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21025:32481":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14523:5438":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4196:4281":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10562:4629":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6691:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:5690:7141":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11262:4698":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:12051:855":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:8660:21755":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10735:3347":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3671:4258":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:2317:3069":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21209:32082":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:2848:2981":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6600:21714":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2616:8290":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4939:1104":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:2644:5483":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3663:9491":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12173:4827":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:6:737":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:41899:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:45732:7537":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46309:7562":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:538:4441":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4034:4258":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1759:7884":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:6962:4298":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1140:7879":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41823:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:4871:8270":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6352:5639":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:276:2506":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10789:21876":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8955:7740":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42734:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5085:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2074:8239":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6226:8180":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12075:4810":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:4949:5546":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:1539:2384":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11473:8300":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40666:7433":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:6091:7142":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"14:165:20787":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:12878:8273":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:6335:9704":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"9:237:7482":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4955:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10638:4638":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:423:7869":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3286:32334":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:46233:7559":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40426:7420":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7440:31810":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13724:5218":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44671:2990":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12209:4832":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:0:2767":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4641:5537":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:2303:8250":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:32106:2392":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11001:4678":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2943:3045":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5992:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5152:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11873:4765":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4841:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:149:4246":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:4076:3070":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:22973:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:2165:6026":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:4585:5535":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46331:7563":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4351:6331":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40051:7392":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44403:7522":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4523:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:22398:31803":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1596:6243":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43527:3401":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1864:1933":{"crate_id":1,"path":["std","error"],"kind":"module"},"16:7544:5808":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:46484:7567":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:1496:6186":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:40157:7400":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8987:26369":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:47943:7632":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10421:4523":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:42277:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7604:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:22336:7172":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10215:7830":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:4122:7893":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4914:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7482:4288":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:21344:3005":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42459:2912":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11548:4732":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:40138:14797":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10535:4627":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:5372:14750":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10521:4626":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44387:3330":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10487:3345":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2037:7109":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:7532:2279":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4824:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:707:3335":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13568:5169":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40512:4455":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47981:7635":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12659:4933":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8916:9584":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40183:7404":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:122:4249":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:46977:7591":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11789:4747":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:40932:7443":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5015:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42980:7482":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:7651:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2504:5477":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:23006:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4506:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:261:8125":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:5632:7652":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:1846:2384":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6819:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4304:8304":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7037:7882":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7582:5809":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:43666:3343":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8222:7890":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13869:5251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:47759:7628":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10037:4599":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:3565:7849":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:14164:5325":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40365:7410":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:2494:2948":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4584:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42718:5844":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:1703:6313":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8671:8054":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4733:9507":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3180:6023":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:7616:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:652:4433":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:12036:1631":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7709:2269":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4968:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43940:3353":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9373:4587":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:2185:3006":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:6801:3246":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8489:9563":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45816:7540":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13677:5210":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3973:9495":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:11965:3361":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:507:6127":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1904:2680":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:39182:3057":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:41587:31799":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2972:8824":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6169:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:7660:7654":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:7255:2935":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:8097:5870":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21468:9617":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:25921:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7534:5510":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4947:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6792:5717":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5625:4349":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11618:4736":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6583:5666":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:1051:20781":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2832:5491":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7591:4360":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:5561:6876":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10398:7840":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:2172:7113":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8186:2017":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6804:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:624:35002":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:495:6122":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:7998:3071":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:1862:6022":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:533:6147":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7128:7901":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42943:7478":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9044:26873":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3004:2984":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:574:6169":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9999:4567":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9897:21791":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:9286:8055":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7372:31090":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:4152:7895":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:12054:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13287:5047":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7381:2948":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:0:885":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4719:5538":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14297:5380":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:7088:14946":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13877:5254":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12035:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11352:4708":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6100:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:45976:7547":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10617:4634":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8296:7890":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:10462:3070":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6059:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4556:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43435:3392":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14014:5285":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:7493:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:12804:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8887:7737":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2596:5481":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9763:35001":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:590:4445":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:2921:3040":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:1073:8245":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:1551:6022":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:44568:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6290:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5117:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:4710:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:10642:3343":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:8849:21773":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2618:5482":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2284:20822":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:22874:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:39365:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8288:8333":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2670:5484":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:21008:32486":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22709:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10448:6026":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6386:5645":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:666:3069":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14347:5393":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12831:4955":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:49981:9630":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:44148:7511":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:9637:2912":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:4806:5541":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42119:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43965:3356":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6120:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14077:5306":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"10:44:6035":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5075:8306":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4578:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6086:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:10290:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:43501:3405":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4474:2921":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:7:8229":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:207:2994":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5634:5556":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5140:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44621:8282":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10535:8296":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:42452:2911":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43798:3351":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11587:4735":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22808:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4755:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5044:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7997:8328":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2580:4338":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12811:4954":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:1558:4281":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4455:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:940:8235":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9633:2910":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:868:6020":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1639:6277":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1055:8239":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:614:35005":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:910:7877":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44247:7518":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8209:3345":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12052:1706":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13990:5278":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:15:2305":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4884:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6893:5725":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12046:1650":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:4562:9535":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14127:5317":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"0:0:1940":{"crate_id":0,"path":["anyhow"],"kind":"module"},"11:389:4253":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:48001:7637":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41665:7465":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:727:4470":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10917:8159":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"0:347:1940":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"17:9173:4581":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:2085:8241":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:44054:7500":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:46453:7566":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1537:6204":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:6820:3247":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:40876:7437":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:46587:7569":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11216:4692":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3802:3241":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40307:8277":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:12043:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1682:6303":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:12041:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2362:9440":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11972:4794":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10680:3398":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40477:7425":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:40412:7417":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7326:2384":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2512:8289":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"9:330:6072":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:42688:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7054:5746":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:3232:5462":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:47961:7633":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42743:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1882:6025":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11141:7733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4737:9510":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:21161:9619":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:43624:3339":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5982:5596":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:7243:7128":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:1935:2987":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11813:4374":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"15:288:7856":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13086:5012":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9052:21756":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"9:426:20704":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6228:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:515:4436":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1744:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:30352:2416":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:39268:3050":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6268:34992":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:660:7810":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12672:4646":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:9888:7151":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3987:9497":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2853:3020":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8381:9550":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:483:6116":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12779:4950":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:9641:2913":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:6139:4332":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5121:5551":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:11978:8358":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:10941:2421":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:44175:7512":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7469:7135":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5138:4287":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6818:5718":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:481:4431":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10963:4676":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14057:5300":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8133:4472":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"10:36:6034":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11304:7766":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:5408:8310":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:7634:2389":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:40883:7438":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40536:7430":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6419:2283":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:4021:9498":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4035:9500":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:724:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:40197:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9017:8063":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8824:7734":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12137:4818":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3797:5524":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12532:4914":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10411:8141":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1521:6196":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9124:7745":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:1773:3022":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:5997:8825":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5388:8309":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:5818:2895":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:21330:9622":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:12029:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"9:0:2769":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:14034:5292":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44237:7514":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14479:5431":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4922:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3237:8295":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43947:3354":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:11760:2365":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:21006:32483":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:2864:5492":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:48080:7642":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10715:7844":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3219:33726":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:21416:9613":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7862:5829":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:557:8285":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10777:7760":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10318:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4473:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:47821:7629":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44280:2947":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3206:6024":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:2058:5752":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14222:5367":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11099:7852":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4043:9501":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1535:3069":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:7258:4472":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2909:3042":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:21566:9614":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13025:5003":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13633:5205":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:42002:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3338:2986":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:5861:2935":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:3915:5527":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3929:2362":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:2487:6031":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:13009:4332":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7507:2936":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:521:25742":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:8669:2894":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7474:8216":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12971:4996":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:12049:1649":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12497:4910":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9532:34995":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6531:5662":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:837:3069":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5023:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45838:7541":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5328:4258":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2183:3005":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4535:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13056:5009":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8304:7708":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:1514:6194":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14379:5408":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:8195:5878":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:12042:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:9643:2914":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5939:5593":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:946:8237":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47970:7634":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:101:6013":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:5632:7140":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13163:5031":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8969:8061":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12025:4801":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11382:4712":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2203:9434":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:4497:5532":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1875:2929":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:32167:7257":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11508:21781":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:1041:5752":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:7318:3966":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44371:3327":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12039:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14356:5395":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"15:394:20813":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:5798:5572":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2133:4275":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4870:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:96:7805":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3583:3069":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2420:2780":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5044:8306":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:671:7814":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2900:3035":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10094:8340":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:7655:8322":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11640:4685":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41754:3070":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:8002:14950":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1558:6219":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:46947:7590":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2286:8241":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:8896:21774":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:501:6124":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13827:5237":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14435:5416":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:7730:9410":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11390:7855":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:22775:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:7462:5802":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1734:6325":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4957:9546":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:4004:2935":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8974:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4977:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5910:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41746:3069":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:10965:27117":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7645:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:12998:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5955:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9192:7750":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:4613:5536":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:588:6177":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:47990:7636":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12485:4908":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11337:7770":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7891:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:4912:861":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13779:5230":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:43183:7488":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11491:4729":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6128:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9391:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:4179:7139":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:3390:4281":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:880:4266":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:8050:5866":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13189:5033":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:327:8030":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9103:4579":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:47619:7626":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:298:6014":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9351:4586":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10904:7846":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5004:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40487:7426":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47867:7630":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:6280:4314":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6889:4355":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6513:5654":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5859:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10828:27114":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:1842:3069":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2656:8291":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45887:7543":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10024:7819":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:2463:7120":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9456:35000":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12766:4949":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12033:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:4862:5543":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:755:4476":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"9:486:20701":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12712:4941":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10479:4621":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42951:7480":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"9:507:6093":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4488:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7269:34990":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11087:7851":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4932:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44083:7509":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:4447:2281":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13216:5037":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11408:21779":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:588:9379":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:504:4275":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:2766:5488":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4549:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2467:6028":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9960:7823":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:40079:7395":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8326:6955":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2380:5472":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:32153:8275":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:4160:9516":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:7456:7133":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11317:4705":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:582:4444":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11231:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:11662:4738":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:6101:4281":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11227:4696":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:6468:2935":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10060:4601":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:46263:7560":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5661:5560":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:8167:8228":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11616:2277":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40356:7408":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:4032:8264":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:1413:3069":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1635:4255":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6764:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:40123:3355":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:43536:3404":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6415:5648":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2196:8288":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12281:4859":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:824:4264":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:0:2478":{"crate_id":17,"path":["object"],"kind":"module"},"2:44659:7531":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4902:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10950:8161":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9208:4582":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:30446:31813":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:10335:8832":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:8072:5867":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:12791:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9887:7822":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:40230:7406":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7902:7661":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:3089:2945":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40690:7435":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:2968:2503":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14470:5429":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3737:8254":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11952:4784":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5088:5550":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:1750:3023":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"15:0:2774":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:41890:2384":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:22253:7161":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:536:5453":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:507:4433":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6718:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4724:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12751:4946":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3959:9494":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7610:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12577:4924":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:7995:2938":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5033:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6753:5704":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6248:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1674:6302":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:919:7876":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21211:3005":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10293:4612":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:1290:8239":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:427:7870":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:12433:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13102:5016":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9087:4578":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:1557:6023":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10266:7831":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5:1718":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"17:11328:4706":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22285:7166":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11590:7776":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:22147:7159":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:531:4438":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11112:8167":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:13047:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41686:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:40214:31810":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2842:3059":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6079:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6346:8029":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9022:8066":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7884:21721":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1104:7878":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6279:5634":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1674:4258":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:690:4461":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40905:7440":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43444:3393":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:22321:31807":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1568:6025":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8862:2384":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11513:8301":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:1428:3070":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7554:5511":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:14325:5387":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40343:2017":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:3274:8296":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6696:5691":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3332:3241":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12063:4807":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:78:20695":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9138:4580":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11911:4780":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11352:7771":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:7633:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:48027:7639":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4516:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2305:20848":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11720:21783":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40287:8276":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:9635:2911":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8932:9586":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13950:5267":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11212:7765":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:3923:2368":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:9271:3583":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:7668:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8282:9517":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6499:5515":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40164:14798":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13203:5036":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6189:5632":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5146:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6560:4248":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"13:226:6012":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6682:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11394:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45662:7534":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4989:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:8795:21771":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12960:4995":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:7502:14952":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6114:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4676:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3484:8439":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:822:8232":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13852:5246":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9868:4595":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:45939:7545":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11063:7850":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:39448:2507":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"0:346:1932":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"5:6587:2384":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:22029:2125":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13793:5234":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6898:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2692:7123":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10187:4609":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:22841:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6136:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:12160:2953":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:5995:5455":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:4166:4281":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14002:5284":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6927:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12935:4991":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1120:8823":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2907:4341":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5980:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10799:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:42968:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5130:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1710:6316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:47011:7592":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6879:5723":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1444:2384":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:785:2935":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4899:9542":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10809:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11031:4365":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:569:6167":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:3085:2944":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:32142:3735":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2795:2708":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:44032:14764":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14146:5322":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13915:5261":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7768:5502":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:4651:14791":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14461:5425":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21197:9621":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:41623:7706":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4830:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6107:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:4222:2919":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14091:5308":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4800:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:0:2776":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:6350:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:14084:5307":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3981:9496":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4666:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43475:3407":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7598:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5891:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7708:5514":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:4630:6968":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6666:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11385:7774":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6711:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:35:2993":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:43606:3338":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:39462:7263":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5673:5500":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6721:21715":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13668:5206":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2574:5480":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:9950:1512":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:12200:2956":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2955:3048":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9934:8130":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10981:4612":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:43454:3399":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:45754:7538":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40131:3354":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12087:4811":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4647:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46117:7556":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3830:8302":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:8779:2946":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:9913:8128":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45917:7544":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:2428:5474":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10735:8349":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5969:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4603:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4921:5545":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:4344:5529":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:897:3069":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:123:15309":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:766:25741":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13923:5263":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:7919:8327":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:654:15664":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:30318:2508":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:703:7875":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4735:9509":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8196:7433":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4566:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9010:8337":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6318:5637":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42438:2910":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6332:5495":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6047:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:7839:7888":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8153:7701":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:43556:3403":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2346:2996":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"18:681:4458":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:1184:7827":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4986:5547":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4144:7894":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:4418:4307":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:952:8238":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9329:2300":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:580:6172":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14174:5330":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43956:3355":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20993:32337":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13423:5056":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10508:4625":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14025:5289":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3195:8292":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46041:7549":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8792:7897":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7015:5742":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5419:4578":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1304:8245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7927:7109":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:3032:5517":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:7275:33719":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:582:4574":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:894:2935":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6159:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11992:4795":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10662:8153":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:759:6020":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:7235:2384":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10457:8149":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5941:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13245:5040":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13967:5275":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4791:4342":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:22434:7187":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:48016:7638":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7722:5504":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:2051:8254":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5403:4577":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13982:5277":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10441:8144":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12998:4999":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3065:4479":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7636:7653":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:48118:7644":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:46507:7568":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2960:3049":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:8039:8436":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:9608:7818":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41440:7447":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46285:7561":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7019:4356":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14421:5414":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:1651:2970":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9565:7817":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5618:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2933:20849":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9522:7816":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7102:21717":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:1681:1193":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:33:1555":{"crate_id":2,"path":["core","stringify"],"kind":"macro"},"2:2896:3036":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6915:5506":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11367:8321":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9973:8132":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1064:8241":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8900:9585":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3197:8293":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43852:3349":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5760:21710":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7597:34987":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43902:3340":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10575:4363":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1528:6199":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:6242:4349":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:9753:7820":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11743:4743":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42445:2909":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:5572:4281":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40314:3405":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:1494:7875":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:904:3241":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:10530:3358":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10384:8140":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:8714:21769":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13275:4703":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11125:7853":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:1259:5752":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13759:5222":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7724:2893":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2796:2982":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:47367:7624":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13686:5211":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"10:0:2770":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2548:5479":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:1525:20782":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:2479:34981":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:21907:3390":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:2722:5486":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5866:5585":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"7:31:20688":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:22200:7160":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13175:5032":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7621:21719":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:44586:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13576:5170":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7226:2992":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1604:6248":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:11730:3385":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4484:9519":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6243:8184":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6425:5649":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:11322:2426":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7828:5825":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7844:7657":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:4395:4281":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9922:8129":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10469:4620":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2321:5463":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12253:4849":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:10071:4321":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:8979:21777":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:4693:9544":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12306:4863":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6401:5497":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1913:16655":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47509:7625":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4543:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3531:2935":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:2394:3241":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:11905:3362":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8322:8334":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8233:9489":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:42783:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10589:4631":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:22460:9493":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:41646:7464":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:629:8251":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:22427:7184":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:43931:3357":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12112:4816":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8838:7735":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12226:4840":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7343:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3214:6022":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:3764:5523":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5727:5565":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39441:3053":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10113:7829":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1632:6273":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12053:1253":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:11755:1544":{"crate_id":2,"path":["core","str"],"kind":"module"},"2:23039:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12197:4831":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1691:6309":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:400:8126":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1466:6020":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6637:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:504:8127":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11155:7734":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10607:3410":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7409:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10548:4628":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7342:34989":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11887:4766":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:45708:7536":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:20965:4444":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:3276:8297":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:6275:7146":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12466:4903":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5816:5577":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1650:6285":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4632:6970":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:22309:7170":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7681:4363":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:46406:7565":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:3888:5526":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14069:5303":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:5964:4349":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7284:7469":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12555:4917":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12374:4867":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10751:4639":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11310:7900":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:47697:7627":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"0:516:2017":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"16:6467:5653":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1963:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2696:5485":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7897:7660":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2406:5473":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4738:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7694:5513":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:52:8034":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:4363:4306":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6687:5690":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:30358:2974":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:41963:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:4835:5542":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1797:7886":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4878:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4686:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9791:34994":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:829:9389":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"14:40:4781":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7613:8223":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13072:5010":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6354:1718":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"6:1507:6191":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2942:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:5588:5499":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:1855:3241":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:6569:5503":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4294:8266":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4616:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:1475:6021":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8472:7721":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:719:4467":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:3830:5525":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2969:20850":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11042:4366":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10739:7845":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8531:7726":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13488:5107":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:8239:5800":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8007:9480":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22031:9616":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:113:7808":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:527:6144":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:6269:7147":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:5696:21709":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44447:7525":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:41924:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9243:4583":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:14449:5423":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"0:477:113":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"2:2867:3031":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9071:4577":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4529:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10983:7735":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"11:772:6021":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:3461:5521":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:5376:14751":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:10532:8294":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:5493:8312":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2884:3032":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4789:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10427:7897":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12946:4993":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39409:3051":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11816:4753":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10930:4673":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5746:8316":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14500:5434":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10103:4327":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:9651:4612":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:475:6111":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:30950:4444":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:6063:4344":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:5439:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:20978:32337":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:9883:9454":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:784:4261":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40403:7416":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:1876:6024":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6913:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:9281:8438":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5123:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4461:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:41417:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4847:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:7297:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:344:7866":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13974:5276":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12155:4826":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12725:4942":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:622:2268":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3725:8300":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:533:4335":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:1850:2935":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44629:7528":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6545:5664":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10279:8138":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:11981:3363":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:21919:32335":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:42959:7481":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11138:8168":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11368:4709":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7568:5512":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43870:3350":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22907:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:5612:5501":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:43375:7883":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6083:20821":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6929:5727":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:44642:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3475:2393":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:7702:7107":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8980:2284":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:1966:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7318:5783":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6813:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:6589:8828":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3156:31576":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4375:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:256:8124":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12185:4830":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46741:7587":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40036:3355":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10085:7828":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12738:4944":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:43648:3345":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10727:8158":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7521:4574":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6968:21716":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10228:8137":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5982:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:30374:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:2199:2639":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13452:5076":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:3503:9469":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:5634:3246":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10198:8134":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8399:7718":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10604:4633":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40435:7421":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10092:7904":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:6837:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:23519:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5867:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40334:7881":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9824:21789":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12699:4939":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14111:5314":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1718:6320":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:119:15308":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9105:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:4833:33225":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5905:5587":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:796:3241":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:45786:7539":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:641:2295":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9618:34993":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7393:9388":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:2238:5752":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:3159:27010":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10013:4612":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:731:7876":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:48065:7641":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13803:5235":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47905:7631":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:40890:2283":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:22940:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12847:4960":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4364:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:45642:7533":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:62:15254":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:9030:7741":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:14101:5311":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4628:6966":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10673:7841":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:9143:7746":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12050:1646":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12045:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:10470:4362":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:3722:7109":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:41837:134":{"crate_id":2,"path":["core","result","Result","Err"],"kind":"foreign_type"},"2:41474:9490":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:638:2292":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"0:485:204":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"17:9702:7819":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10647:4717":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21482:7157":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:841:8235":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3655:4484":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21297:9627":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6901:5505":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45994:7548":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:40093:7396":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:4:1117":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3315:5520":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2225:34959":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12032:1154":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:2368:2935":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:599:35003":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:21462:9615":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40455:7423":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5075:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:12000:2276":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12044:4806":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:644:4433":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:881:6021":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2810:2761":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11935:4781":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7874:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6071:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:9581:2393":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:9489:34998":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:6987:4302":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2810:5490":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11024:4679":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:12047:1647":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2845:3060":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11075:8166":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7128:7741":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2450:5475":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:9100:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:22742:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:3362:7440":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:46187:7558":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:4417:5530":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43546:3402":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:324:6017":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:923:8232":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:1541:8246":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9946:4597":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7651:8224":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:29:484":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"17:9712:34997":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:41503:7456":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:8205:21722":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:596:6182":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:11248:3408":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"1:9090:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10629:4637":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8203:2300":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7436:5600":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:2964:7116":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7750:3735":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2947:3046":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3185:33725":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4776:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40924:7441":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14135:5318":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:850:3070":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4696:9518":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5743:5567":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11574:4733":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4628:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7851:7658":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:3232:7847":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:2461:6027":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13547:5159":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:2194:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:9464:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:4988:4281":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:482:4334":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7289:2384":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:2951:3047":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2937:3044":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13612:5200":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14270:5368":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10073:7886":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8270:7706":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6012:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:693:2384":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7305:7129":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11536:4731":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8558:7730":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44422:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:8154:8225":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7503:5509":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:11746:3387":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2788:5489":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:2961:2369":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:9260:725":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"5:7265:4269":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8277:7707":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:7388:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:1570:6227":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4496:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13136:5029":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5921:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:3436:8299":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5963:8174":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11287:4368":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:1501:6188":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43592:2951":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1542:2935":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:9631:2909":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10005:4318":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9160:8338":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:489:6119":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:3728:8301":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:817:7877":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4434:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1820:3583":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:4745:5539":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:1664:6296":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2511:2907":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:9426:2928":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:32254:3063":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2892:3038":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1525:7880":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5111:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6376:21713":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:40244:9421":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}