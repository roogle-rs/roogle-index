{"root":"0:0:2495","crate_version":"1.0.86","includes_private":false,"index":{"0:220:639":{"id":"0:220:639","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[583,4],"end":[585,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3452:125","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5736:32823":{"id":"4:5736:32823","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13616:32090":{"id":"1:13616:32090","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13645:32099":{"id":"1:13645:32099","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13544:32072":{"id":"1:13544:32072","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"5:12440:1741","crate::ops::IndexMut":"1:3522:3493","str::slice_unchecked":"1:13543:32071"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3031-0:533:2572":{"id":"b:1:3031-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3034:138","1:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5737:32824":{"id":"4:5737:32824","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:3063","`String`":"4:7798:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13602:3372":{"id":"1:13602:3372","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::rmatches":"1:13605:32086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44495:3940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:3189":{"id":"0:203:3189","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[436,4],"end":[468,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32713:3657-0:479:138":{"id":"a:1:32713:3657-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32713:3657","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:291:841":{"id":"0:291:841","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1007,4],"end":[1009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2750:9569":{"id":"1:2750:9569","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2684":{"id":"0:67:2684","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3493:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:811":{"id":"0:224:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[595,4],"end":[597,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13547:10226":{"id":"1:13547:10226","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13548:32075"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13655:10545":{"id":"1:13655:10545","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5056:10545"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44599:3946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:3214":{"id":"0:207:3214","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[520,4],"end":[538,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13590:32082":{"id":"1:13590:32082","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552","str::rsplitn":"1:13593:32083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44395:3939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:637":{"id":"0:218:637","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3452:125","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13605:32086":{"id":"1:13605:32086","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::matches":"1:13602:3372"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44513:3941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:116","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"1:32578:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:72:2486","0:74:2684"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5740:32826":{"id":"4:5740:32826","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13649:32103"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[582,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3465:3067","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:639"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8340-0:533:2572":{"id":"b:1:8340-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8482:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8336:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:8342:173","1:8343:2941","1:8344:966"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:4:784-0:533:2572":{"id":"b:4:784-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:780:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["4:786:2926","4:787:2914","4:788:27873"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13539:28610":{"id":"1:13539:28610","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13614:32089":{"id":"1:13614:32089","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3031-0:479:138":{"id":"b:1:3031-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3034:138","1:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13618:3248":{"id":"1:13618:3248","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:2970":{"id":"1:13653:2970","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5055:2970"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44590:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:337":{"id":"0:293:337","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1014,4],"end":[1016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2493":{"id":"0:52:2493","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:53:2953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"a:1:3244:247-0:479:138":{"id":"a:1:3244:247-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13545:32073":{"id":"1:13545:32073","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13547:10226","str::split_at_mut":"1:13546:32074"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5722:3563":{"id":"4:5722:3563","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[572,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3452:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:217:249","0:218:637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13526:32068":{"id":"1:13526:32068","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13528:32069":{"id":"1:13528:32069","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13526:32068"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13578:10227":{"id":"1:13578:10227","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13027:3949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2684":{"id":"0:74:2684","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3493:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13608:32087":{"id":"1:13608:32087","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::rmatch_indices":"1:13611:32088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44441:3942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5721:32820":{"id":"4:5721:32820","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8342:173":{"id":"1:8342:173","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8482:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:13575:3029":{"id":"1:13575:3029","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::split_whitespace":"1:13553:10228","str::rsplit":"1:13581:32079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44291:3936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:193":{"id":"0:492:193","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[647,0],"end":[649,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13553:10228":{"id":"1:13553:10228","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13554:10225"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44565:3932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2944":{"id":"0:32:2944","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8482:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13640:32098":{"id":"1:13640:32098","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:811":{"id":"0:222:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[589,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2718:2833":{"id":"1:2718:2833","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13531:2912":{"id":"1:13531:2912","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12759:2922"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:32091":{"id":"1:13620:32091","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[588,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:788:27873":{"id":"4:788:27873","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:538:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13599:32085":{"id":"1:13599:32085","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13532:32070":{"id":"1:13532:32070","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13522":{"id":"1:13522","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13523:1008","1:13524:2895","1:13525:9966","1:13526:32068","1:13528:32069","1:13531:2912","1:13532:32070","1:13533:336","1:13534:2988","1:13535:2909","1:13537:28609","1:13539:28610","1:13541:28611","1:13543:32071","1:13544:32072","1:13545:32073","1:13546:32074","1:13547:10226","1:13548:32075","1:13550:7909","1:13551:7920","1:13552:2917","1:13553:10228","1:13554:10225","1:13555:8289","1:13556:32077","1:13557:9870","1:13558:31191","1:13561:3242","1:13564:32078","1:13567:3872","1:13571:3905","1:13575:3029","1:13578:10227","1:13581:32079","1:13584:32080","1:13587:32081","1:13590:32082","1:13593:32083","1:13596:32084","1:13599:32085","1:13602:3372","1:13605:32086","1:13608:32087","1:13611:32088","1:13614:32089","1:13616:32090","1:13618:3248","1:13620:32091","1:13621:32092","1:13622:32093","1:13625:32094","1:13628:2931","1:13631:32095","1:13634:32096","1:13637:32097","1:13640:32098","1:13643:3008","1:13645:32099","1:13646:32100","1:13647:32101","1:13648:32102","1:13649:32103","1:13650:32104","1:13651:32105","1:13652:32106","1:13653:2970","1:13655:10545","1:13656:32107"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:177:1192","0:179:2710","0:196:2486","0:198:2021","0:199:2485","0:200:3179","0:201:974","0:203:3189","0:205:3186","0:207:3214"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:841":{"id":"0:215:841","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[564,4],"end":[567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42516:10616-0:533:2572":{"id":"a:1:42516:10616-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42516:10616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13611:32088":{"id":"1:13611:32088","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::match_indices":"1:13608:32087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44459:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:2486":{"id":"0:487:2486","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[616,4],"end":[618,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:3021-0:479:138":{"id":"b:1:3021-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3024:2921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13643:3008":{"id":"1:13643:3008","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13173:137","`FromStr`":"1:13172:3549"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13172:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13172:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:678":{"id":"0:226:678","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[601,4],"end":[606,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3860-0:533:2572":{"id":"b:1:3860-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3862:1841":{"id":"1:3862:1841","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40137:3064","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13554:10225":{"id":"1:13554:10225","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13553:10228"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44574:3948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3030:841":{"id":"1:3030:841","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13552:2917":{"id":"1:13552:2917","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44277:2858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8427:2946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:34:1008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[559,0],"end":[568,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3036-0:533:2572":{"id":"b:1:3036-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3039:138","1:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:484:116":{"id":"0:484:116","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[614,0],"end":[626,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:479:138"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:487:2486","0:489:2684"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:107:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:70","0:62"]}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[594,0],"end":[598,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:224:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:353:2495":{"id":"0:353:2495","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[200,0],"end":[219,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:479:138"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:343:3267":{"id":"0:343:3267","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[100,0],"end":[100,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:13525:9966":{"id":"1:13525:9966","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3279:3655-0:479:138":{"id":"a:1:3279:3655-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3279:3655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:5973-0:479:138":{"id":"b:4:5973-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5971:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5975:1801"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted_by","sum","rev","max","try_reduce","partition_in_place","map_windows","skip_while","intersperse","last","is_sorted_by_key","product","le","unzip","min","find","ge","is_partitioned","lt","fuse","by_ref","take_while","intersperse_with","next_chunk","__iterator_get_unchecked","cmp_by","gt","copied","take","max_by_key","find_map","try_fold","inspect","map_while","for_each","advance_by","all","partial_cmp_by","cloned","max_by","try_find","try_for_each","try_collect","ne","scan","filter","any","nth","chain","eq_by","cycle","min_by_key","enumerate","position","fold","collect_into","flat_map","filter_map","count","step_by","eq","size_hint","is_sorted","array_chunks","min_by","map","rposition","skip","reduce","cmp","partition","partial_cmp","flatten","collect","peekable","zip"],"trait":{"name":"Iterator","id":"1:8482:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:28:173","0:29:1206","0:30:2943"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3025-0:533:2572":{"id":"b:1:3025-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:2680":{"id":"0:107:2680","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13543:32071":{"id":"1:13543:32071","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"5:12440:1741","str::slice_mut_unchecked":"1:13544:32072","crate::ops::Index":"1:39968:3492"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:5728:32822":{"id":"4:5728:32822","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13551:7920":{"id":"1:13551:7920","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"5:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44267:3930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3035:1828":{"id":"1:3035:1828","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5738:10536":{"id":"4:5738:10536","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13537:28609":{"id":"1:13537:28609","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:3264":{"id":"0:325:3264","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[55,0],"end":[55,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"1:13621:32092":{"id":"1:13621:32092","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13548:32075":{"id":"1:13548:32075","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13547:10226"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2721:27872":{"id":"1:2721:27872","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:3179":{"id":"0:200:3179","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[416,4],"end":[418,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:199:2485"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3860-0:479:138":{"id":"b:1:3860-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13596:32084":{"id":"1:13596:32084","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13587:32081":{"id":"1:13587:32081","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13212:3552","str::split":"1:13575:3029","prim@char":"5:12434:476","str::split_terminator":"1:13584:32080"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44359:3935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:52:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:484:116","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:65:2486","0:67:2684"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5739:32825":{"id":"4:5739:32825","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13648:32102"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3036-0:479:138":{"id":"b:1:3036-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3039:138","1:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3028-0:479:138":{"id":"b:1:3028-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3030:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2748-0:533:2572":{"id":"b:1:2748-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2746:3575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2750:9569"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:481:226":{"id":"0:481:226","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:484:116"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"1:13555:8289":{"id":"1:13555:8289","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44545:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2486":{"id":"0:196:2486","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[316,4],"end":[347,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:484:116"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:2572":{"id":"0:533:2572","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[413,0],"end":[415,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:199:2485"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:23","a:1:32713:3657-0:533:2572","a:1:3244:247-0:533:2572","a:1:3279:3655-0:533:2572","a:1:42515:3463-0:533:2572","a:1:42516:10616-0:533:2572","a:1:32654:237-0:533:2572","b:1:8340-0:533:2572","b:1:3021-0:533:2572","b:1:3860-0:533:2572","b:1:3036-0:533:2572","b:1:3025-0:533:2572","b:1:3031-0:533:2572","b:1:2748-0:533:2572","b:1:2719-0:533:2572","b:1:2716-0:533:2572","b:4:784-0:533:2572","0:536","0:31","0:33","0:26","0:35"]}}},"0:198:2021":{"id":"0:198:2021","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[377,4],"end":[379,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available when using Rust &ge;\n1.65. On older compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation. The return type of this\nfunction on old compilers is `&(impl Debug + Display)`.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```","links":{},"attrs":["#[cfg(any(std_backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"5:661:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13625:32094":{"id":"1:13625:32094","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13546:32074":{"id":"1:13546:32074","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13545:32073","str::split_at_mut_checked":"1:13548:32075"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2485":{"id":"0:199:2485","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3186":{"id":"0:205:3186","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[506,4],"end":[517,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:249":{"id":"0:217:249","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[573,4],"end":[573,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"0:295:337":{"id":"0:295:337","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[1021,4],"end":[1023,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3244:247-0:533:2572":{"id":"a:1:3244:247-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13557:9870":{"id":"1:13557:9870","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44583:3944","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:32100":{"id":"1:13646:32100","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40323:10529","Self::is_ascii":"1:13645:32099"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40323:10529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3034:138":{"id":"1:3034:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:42515:3463-0:533:2572":{"id":"a:1:42515:3463-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42515:3463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13648:32102":{"id":"1:13648:32102","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32654:237-0:533:2572":{"id":"a:1:32654:237-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32713:3657-0:533:2572":{"id":"a:1:32713:3657-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32713:3657","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13523:1008":{"id":"1:13523:1008","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"5:12434:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13533:336":{"id":"1:13533:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13534:2988","`u8`":"5:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:2684":{"id":"0:489:2684","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:481:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3493:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:13571:3905":{"id":"1:13571:3905","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3024:2921":{"id":"1:3024:2921","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2998:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2716-0:479:138":{"id":"b:1:2716-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2718:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13534:2988":{"id":"1:13534:2988","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"5:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13581:32079":{"id":"1:13581:32079","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13212:3552","`DoubleEndedIterator`":"1:8374:130","prim@char":"5:12434:476","str::split":"1:13575:3029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44309:3934","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:841":{"id":"0:289:841","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[1001,4],"end":[1003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2495":{"id":"0:0:2495","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[730,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the [`std::error::Error`] trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using Rust &ge; 1.65, a backtrace is captured and printed with the\n  error if the underlying error type does not already provide its own. In\n  order to see backtraces, they must be enabled through the environment\n  variables described in [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, almost all of the same API is available and works the same\nway. To depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:479:138","`std::error::Error`":"1:3084:138"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.85\")]","#![feature(error_generic_member_access)]","#![no_std]","#![deny(dead_code, unused_imports, unused_mut)]","#![deny(unsafe_op_in_unsafe_fn)]","#![allow(clippy::doc_markdown, clippy::enum_glob_use,\nclippy::explicit_auto_deref, clippy::extra_unused_type_parameters,\nclippy::incompatible_msrv, clippy::let_underscore_untyped,\nclippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::module_name_repetitions, clippy::must_use_candidate,\nclippy::needless_doctest_main, clippy::new_ret_no_self,\nclippy::redundant_else, clippy::return_self_not_must_use,\nclippy::struct_field_names, clippy::unused_self,\nclippy::used_underscore_binding, clippy::wildcard_imports,\nclippy::wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:478-0:353:2495","0:479:138","0:533:2572","0:481:226","0:484:116","0:492:193","0:351:3002","0:353:2495","0:532:2487"],"is_stripped":false}}},"0:532:2487":{"id":"0:532:2487","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[127,4],"end":[150,5]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:138","crate::anyhow":"0:353:2495"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:65:2486":{"id":"0:65:2486","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13558:31191":{"id":"1:13558:31191","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2953":{"id":"0:53:2953","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:42516:10616-0:479:138":{"id":"a:1:42516:10616-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42516:10616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:786:2926":{"id":"4:786:2926","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1000,0],"end":[1004,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:289:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42515:3463-0:479:138":{"id":"a:1:42515:3463-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42515:3463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:25:1192"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:1008":{"id":"0:34:1008","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13556:32077":{"id":"1:13556:32077","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44555:3933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1006,0],"end":[1010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:291:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3025-0:479:138":{"id":"b:1:3025-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:287:841":{"id":"0:287:841","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[990,4],"end":[997,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13564:32078":{"id":"1:13564:32078","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13584:32080":{"id":"1:13584:32080","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13212:3552","str::split":"1:13575:3029","prim@char":"5:12434:476","`DoubleEndedIterator`":"1:8374:130","str::rsplit_terminator":"1:13587:32081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44341:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13628:2931":{"id":"1:13628:2931","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13631:32095":{"id":"1:13631:32095","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13650:32104":{"id":"1:13650:32104","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:39970"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8343:2941":{"id":"1:8343:2941","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"1:13550:7909":{"id":"1:13550:7909","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"5:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44261:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13567:3872":{"id":"1:13567:3872","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13524:2895":{"id":"1:13524:2895","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:787:2914":{"id":"4:787:2914","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:480":{"id":"0:538:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32654:237-0:479:138":{"id":"a:1:32654:237-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:60":{"id":"0:36:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2486":{"id":"0:72:2486","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:138":{"id":"0:479:138","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[387,0],"end":[389,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:176","a:1:32713:3657-0:479:138","a:1:3244:247-0:479:138","a:1:3279:3655-0:479:138","a:1:42515:3463-0:479:138","a:1:42516:10616-0:479:138","a:1:32654:237-0:479:138","b:1:3021-0:479:138","b:1:3860-0:479:138","b:1:3036-0:479:138","b:1:3025-0:479:138","b:1:3028-0:479:138","b:1:3031-0:479:138","b:1:2719-0:479:138","b:1:2716-0:479:138","b:4:5973-0:479:138","0:288","0:221","0:290","0:223","0:216","0:213","0:225","0:294","0:219","0:292","0:286"]}}},"0:179:2710":{"id":"0:179:2710","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:253":{"id":"0:334:253","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[77,0],"end":[77,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:1:2719-0:479:138":{"id":"b:1:2719-0:479:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2721:27872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2719-0:533:2572":{"id":"b:1:2719-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2721:27872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13535:2909":{"id":"1:13535:2909","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13541:28611":{"id":"1:13541:28611","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13593:32083":{"id":"1:13593:32083","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"5:12434:476","str::splitn":"1:13590:32082","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44413:3938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3039:138":{"id":"1:3039:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32578:2949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13649:32103":{"id":"1:13649:32103","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:974":{"id":"0:201:974","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1013,0],"end":[1017,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2989:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:293:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3040:1826":{"id":"1:3040:1826","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[1020,0],"end":[1024,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2989:78","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:337"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3021-0:533:2572":{"id":"b:1:3021-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3024:2921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3073:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:36:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:351:3002":{"id":"0:351:3002","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:479:138","crate::anyhow":"0:353:2495"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[988,0],"end":[998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"4:297:3063","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13634:32096":{"id":"1:13634:32096","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1192":{"id":"0:25:1192","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:173":{"id":"0:28:173","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"0:30:2943":{"id":"0:30:2943","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13561:3242":{"id":"1:13561:3242","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478-0:353:2495":{"id":"0:478-0:353:2495","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:353:2495","glob":false}}},"1:8344:966":{"id":"1:8344:966","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:32093":{"id":"1:13622:32093","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13238:3923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13652:32106":{"id":"1:13652:32106","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:39970"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13656:32107":{"id":"1:13656:32107","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5053:32107"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44608:3947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5725:32821":{"id":"4:5725:32821","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3027:841":{"id":"1:3027:841","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1192":{"id":"0:177:1192","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"1:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13647:32101":{"id":"1:13647:32101","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8374:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:2944"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5720":{"id":"4:5720","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5721:32820","4:5722:3563","4:5725:32821","4:5728:32822","4:5736:32823","4:5737:32824","4:5738:10536","4:5739:32825","4:5740:32826"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13651:32105":{"id":"1:13651:32105","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:39970"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3279:3655-0:533:2572":{"id":"a:1:3279:3655-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3279:3655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13637:32097":{"id":"1:13637:32097","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"5:12434:476","self::pattern":"1:13212:3552"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[600,0],"end":[607,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3481:3217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:479:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:226:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2716-0:533:2572":{"id":"b:1:2716-0:533:2572","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:3265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:533:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2718:2833"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5975:1801":{"id":"4:5975:1801","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1206":{"id":"0:29:1206","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8482:178","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15641:5385":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6437:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6526:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:22709:15816":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15602:5376":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:3695:5769":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:7765:6035":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:8909:7461":{"crate_id":5,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:2242:129":{"crate_id":5,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:6018:4341":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:12583:4825":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:14821:5153":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:13877:7829":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:42619:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:46241:7950":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4899:16166":{"crate_id":5,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4184:5773":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6749:5883":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:46211:7946":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1838:10483":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:14627:5107":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:42717:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5348:5796":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:5762":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6700:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:7980:5757":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:45274:7941":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4902:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1083:6004":{"crate_id":5,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6790:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15701:5395":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:6225:220":{"crate_id":5,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:2840:5734":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:8528:6122":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7431:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12176:4776":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:1589:6455":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:671:3665":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15953:5462":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10977:37055":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10394:23278":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:2435:22347":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:8058:8662":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:12052:4382":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:5603:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:23509:7601":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:1580:8684":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13554:4894":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:41421:7843":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:8267:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:1595:8304":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12044:8583":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:41193:7831":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15981:5469":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13662:4909":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:42475:7878":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:11775:3939":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12776:8275":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:2148:7378":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:8263:7390":{"crate_id":5,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:42557:193":{"crate_id":1,"path":["anyhow","Result","Ok"],"kind":"variant"},"17:13398:4886":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5126:10563":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:14168:4456":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:45013:3919":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11757:23317":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:8052:4371":{"crate_id":5,"path":["std","thread","Thread"],"kind":"struct"},"6:4875:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11516:3666":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:10551:114":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:6814:7546":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:929:4390":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"8:0:3395":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:44673:10674":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3349:8700":{"crate_id":5,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:8261:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:613:37063":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7416:8633":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:44189:3990":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:44877:7926":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:34015:3632":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"0:0:2495":{"crate_id":0,"path":["anyhow"],"kind":"module"},"16:7192:23215":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:7718:4409":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15963:5465":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:31067:28801":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:11335:2680":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4914:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7521:6001":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2746:3575":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"5:4411:8710":{"crate_id":5,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:8199:4657":{"crate_id":5,"path":["std","fs","Metadata"],"kind":"struct"},"1:41105:7511":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:23454:7596":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"4:6178:9333":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:677:2850":{"crate_id":5,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:597:8691":{"crate_id":5,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:47493:8062":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10446:120":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:1616:8303":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:45029:3921":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:0:3037":{"crate_id":17,"path":["object"],"kind":"module"},"16:7168:5943":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4120:5771":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4957:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10460:3517":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6781:5886":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:8371:16131":{"crate_id":5,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:9380:34993":{"crate_id":5,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:23432:7594":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:43643:7894":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:8096:8663":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:559:6380":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:23531:7603":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:42546:3586":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:532:6366":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6188:5815":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:44900:3926":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1696:6525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:23321:7584":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2748:5730":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:11167:4375":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:44723:7921":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1852:703":{"crate_id":5,"path":["std","env"],"kind":"module"},"18:718:4593":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:4826:7242":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:11335:7491":{"crate_id":5,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:11291:37050":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:1785:4384":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14507:5088":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:5282:8713":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:11300:7490":{"crate_id":5,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:22753:15817":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:43867:7901":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:44097:3981":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1703:6528":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5325:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13854:4955":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:1514:6408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:553:6377":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:546:5700":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:8284:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1507:6406":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6623:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5395:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:43353:7882":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:212:3591":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2550:5721":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1597:6460":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:923:6234":{"crate_id":5,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:12743:3976":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:23983:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4869:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:22791:15818":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:7120:3506":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"18:538:4567":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:3800:4384":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:5141:4341":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:22965:15813":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8209:5749":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:43421:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3375:3638":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7058:5918":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:44740:7922":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10418:23279":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4976:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15689:5392":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:21956:29415":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:15121:5202":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"17:12869:4889":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:2018:794":{"crate_id":5,"path":["std","ffi"],"kind":"module"},"17:11465:4738":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"5:10660:8318":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4520:3574":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15160:5209":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10709:7553":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:2790:8698":{"crate_id":5,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13515:23286":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:10978:7480":{"crate_id":5,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:47502:8063":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3279:3655":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:12762:8602":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:9308:8483":{"crate_id":5,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7949:5756":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:34467:3636":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:3085:2926":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5375:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:2715:4337":{"crate_id":5,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:12448:920":{"crate_id":5,"path":["std","i8"],"kind":"primitive"},"17:14335:5063":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10167:23271":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:9354:8485":{"crate_id":5,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:45347:7945":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:2378:23342":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:6041:3500":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"4:3086:34853":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:34082:3631":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6904:5902":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:5664:8719":{"crate_id":5,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15931:5457":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7746:34929":{"crate_id":5,"path":["std","panicking","Hook"],"kind":"enum"},"16:5172:5790":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:12459:1933":{"crate_id":5,"path":["std","usize"],"kind":"primitive"},"4:2162:8773":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7645:2941":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:628:16054":{"crate_id":5,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1569:6441":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14483:5087":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:3304:6236":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:22894:3605":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:11161:4374":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:12449:902":{"crate_id":5,"path":["std","i16"],"kind":"primitive"},"6:7308:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3244:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:41246:7836":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12840:4840":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12122:4772":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:8492:4598":{"crate_id":5,"path":["std","io","util","Empty"],"kind":"struct"},"17:13205:8282":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12191:4778":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11720:4747":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:11503:4741":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:4984:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:46550:7982":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:31035:2973":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4805:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6708:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6544:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5085:5787":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6480:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:9455:4363":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:1106:8679":{"crate_id":5,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7954:4367":{"crate_id":5,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:42458:3666":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:1675:6515":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5295:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12335:8265":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1907:6236":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:15665:5390":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7508:5998":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:8549:7842":{"crate_id":5,"path":["std","io","Take"],"kind":"struct"},"11:2533:6240":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12234:4866":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:7548:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4937:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:40971:10593":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15586:5373":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:5614:8714":{"crate_id":5,"path":["std","process","Child"],"kind":"struct"},"1:7009:7550":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10729:4725":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1625:6485":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:43113:3514":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:785:6234":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:570:6385":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13119:4862":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15024:5189":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:10568:9330":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:3967:3500":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6269:5826":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11579:8246":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2155:3618":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10843:4728":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12108:4771":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:297:3063":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"15:288:8283":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1563:6439":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8325:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6573:5875":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5593:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2052:3565":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:40022:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12149:4774":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:23443:7595":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5069:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:7637:2941":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5007:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2590:5723":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:6283:4341":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6443:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:2348:34353":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:4822:7238":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:46579:7983":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:9244:16231":{"crate_id":5,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:8000:5758":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:11492:2978":{"crate_id":5,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:13958:4972":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5057:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:31414:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13266:23284":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6302:5833":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:38565:3641":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:33881:3540":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:47574:8069":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7907:6054":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:41114:7820":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43674:7899":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5533:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:873:8676":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:12450:908":{"crate_id":5,"path":["std","i32"],"kind":"primitive"},"17:16187:5541":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:8302:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7518:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:8287:7378":{"crate_id":5,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:15973:5468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15896:5446":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:46920:8014":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:3889:4613":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:11759:7503":{"crate_id":5,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15475:5355":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12787:4829":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:4915:2840":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:988:8676":{"crate_id":5,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:521:27473":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:43682:7900":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:9481:7476":{"crate_id":5,"path":["std","time","SystemTime"],"kind":"struct"},"17:13838:4951":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:46326:7961":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:8366:8491":{"crate_id":5,"path":["std","io","error","Custom"],"kind":"struct"},"16:5282:5794":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6462:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13471:4833":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:2266:7516":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"0:532:2487":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"4:3343:34851":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15997:5472":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:202:3536":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11448:8565":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:46837:8011":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:2539:6241":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:8739:16197":{"crate_id":5,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:2368:7522":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:44261:3546":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11958:8261":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12897:4847":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14099:5005":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:46617:7985":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:11318:7476":{"crate_id":5,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:7030:5916":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:43627:7891":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11432:23296":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:12460:1435":{"crate_id":5,"path":["std","reference"],"kind":"primitive"},"5:4566:8712":{"crate_id":5,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7578:7472":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:22970:15811":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:41143:7823":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:10090:8904":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6652:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:7774:7539":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2328:3194":{"crate_id":5,"path":["std","fs","read"],"kind":"function"},"5:6893:4360":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:14832:5154":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6998:5907":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:12455:1859":{"crate_id":5,"path":["std","u32"],"kind":"primitive"},"11:351:8293":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:12989:3954":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:34640:3637":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:322:8559":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:44267:3930":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:9463:162":{"crate_id":5,"path":["std","time","Instant"],"kind":"struct"},"1:3731:3581":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:80:8226":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:8330:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:685:2855":{"crate_id":5,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15905:5447":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:766:154":{"crate_id":5,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:42402:7874":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13692:4913":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:21941:29413":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6381:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:44555:3933":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6825:16226":{"crate_id":5,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:38620:3642":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:1880:3665":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:42422:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:46949:8015":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:2011:3238":{"crate_id":5,"path":["std","error","Indented"],"kind":"struct"},"5:5359:204":{"crate_id":5,"path":["std","path","PathBuf"],"kind":"struct"},"1:8374:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5727:4718":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:885:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3237:3577":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:3347:8699":{"crate_id":5,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:16613:4950":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:7647:3846":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:41205:7832":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:7528:3495":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:21958:29417":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47180:8053":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14859:5157":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:47476:8061":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:23328:7587":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5381:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:23410:7592":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13222:23283":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8711:6137":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:23487:7599":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:13942:29376":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13095:4861":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:23050:7559":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:43429:3523":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:5757:5802":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:32713:3657":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:40820:7810":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:45335:3590":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:45233:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7333:8876":{"crate_id":5,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1633:6235":{"crate_id":5,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3493:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:889:4387":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12687:8271":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:11041:35575":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10516:23282":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5179:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6691:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"4:7110:3505":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11630:4744":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:685:3666":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:12009:7510":{"crate_id":5,"path":["std","alloc","System"],"kind":"struct"},"5:11149:4373":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:680:2853":{"crate_id":5,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:7539:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:726:4596":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14796:5149":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:41123:7821":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7495:5995":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6389:8612":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:10411:8752":{"crate_id":5,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:3441:5767":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:5734:8720":{"crate_id":5,"path":["std","process","Stdio"],"kind":"struct"},"17:11539:4742":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12280:8263":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:2082:1373":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:5574:16014":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:3084:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:13733:4922":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5060:5786":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:155:4319":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:517:6357":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:3088:7519":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"7:79:22194":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:7734:7534":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:10780:8703":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:47597:8075":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:16632:5657":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5271:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3317:3578":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:11892:8707":{"crate_id":5,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:40130:3649":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:2518:16098":{"crate_id":5,"path":["std","fs","exists"],"kind":"function"},"17:13181:8281":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:10458:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11878:4757":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1674:4327":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:6400:4352":{"crate_id":5,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12028:8578":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:3566:4341":{"crate_id":5,"path":["std","io","Guard"],"kind":"struct"},"1:23259:28714":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3617:8706":{"crate_id":5,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11566:8568":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13635:4903":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:8361:8737":{"crate_id":5,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:47008:8018":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:45017:3918":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11831:4742":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4890:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:8034:7381":{"crate_id":5,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13290:4677":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:40771:7805":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:6305:7545":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11309:8243":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:7577:7532":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:7086:3504":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:8296:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11706:8251":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:9159:7464":{"crate_id":5,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1624:3500":{"crate_id":5,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12163:4775":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5265:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:8100:16072":{"crate_id":5,"path":["std","env","VarError"],"kind":"enum"},"6:4990:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:40735:3946":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10115:23269":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15418:5317":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6794:5887":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:6337:5835":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10462:3518":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13983:4974":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:47689:8094":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4308:8314":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:7178:16234":{"crate_id":5,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6882:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:8501:7429":{"crate_id":5,"path":["std","io","util","Sink"],"kind":"struct"},"17:10296:23275":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3665:8901":{"crate_id":5,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:29:512":{"crate_id":1,"path":["core","concat"],"kind":"macro"},"1:41026:4442":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11998:8576":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:8510:7430":{"crate_id":5,"path":["std","io","IoSlice"],"kind":"struct"},"13:229:6225":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:2559:6244":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:1914:6237":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:16555:5643":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11319:37056":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:16008:5476":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:4346:16164":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13361:4883":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1539:6422":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8292:10605":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11789:3938":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:9142:8318":{"crate_id":5,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10704:10647":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5198:5791":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:43363:3523":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:46273:7954":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8836:8902":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:2081:198":{"crate_id":5,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5441:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:45033:3915":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6713:8624":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:21929:29413":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:2493:16090":{"crate_id":5,"path":["std","fs","read_link"],"kind":"function"},"17:13970:4973":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:44694:7912":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:10283:7869":{"crate_id":5,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:1489:156":{"crate_id":5,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:14533:4795":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14031:4986":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5224:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:22843:3605":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:2486:5718":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:1564:22279":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:46681:7989":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:12439:1707":{"crate_id":5,"path":["std","slice"],"kind":"primitive"},"5:957:8302":{"crate_id":5,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:9193:3665":{"crate_id":5,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:3126:22350":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5450:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11232:23297":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10095:8499":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3249:3319":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7212:5955":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8336:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6658:8443":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:11804:7507":{"crate_id":5,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:16761:5687":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5428:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6770:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:8319:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:6597:1949":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:46226:7949":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43884:4003":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:1524:3665":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:40:3497":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:9319:2842":{"crate_id":5,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13145:8279":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13757:4936":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12095:4770":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:7545:7531":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:16595:4940":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:10784:8563":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:8598:8667":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:661:2826":{"crate_id":5,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11584:3949":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11358:23294":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7259:5969":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7554:23217":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:7692:3496":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:42537:10624":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:985:4392":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:835:8671":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:9359:8492":{"crate_id":5,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:23352:10377":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:40797:7808":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6666:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:2998:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"14:220:6217":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:2860:5735":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:8094:3462":{"crate_id":5,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:44237:3547":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:708:8302":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14845:5156":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:1555:2941":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:14612:5104":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:2530:5720":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:14072:4996":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12319:8590":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4881:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:479:6332":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"0:479:138":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"1:23294:28722":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"9:390:22201":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15731:5406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:8249:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:23520:7602":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:10097:23268":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:4947:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:8562:3936":{"crate_id":5,"path":["std","io","Split"],"kind":"struct"},"5:5111:16186":{"crate_id":5,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:11032:7430":{"crate_id":5,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:6521:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:1577:6233":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6866:23213":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:22462:15736":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14692:5113":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8345:3660":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14886:5161":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:821:10364":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:11088:35541":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10031:23267":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12886:4846":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:892:3666":{"crate_id":5,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:12434:476":{"crate_id":5,"path":["std","char"],"kind":"primitive"},"17:14599:5102":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4539:10546":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:7424:23216":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10803:2858":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:16362:5588":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:45208:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:8014:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:16198:5546":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:8258:7387":{"crate_id":5,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:42902:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:11013:140":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:40000:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:6588:5878":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:2506:5719":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:44250:3929":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14220:5023":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5117:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:7567:4395":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12723:8273":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15573:5368":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6813:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:9440:234":{"crate_id":5,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:16701:5671":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:9754:4369":{"crate_id":5,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"9:445:22200":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:2420:2941":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:2596:679":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:6838:2941":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:4677:16166":{"crate_id":5,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:10477:9015":{"crate_id":5,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:4893:3525":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:7454:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5301:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:31441:4570":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6042:5746":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:16283:5568":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:910:6233":{"crate_id":5,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:45324:7944":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:7557:3500":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16507:4936":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:7609:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14460:5083":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:4997:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"17:2406:8257":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1005:6004":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5224:5792":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6564:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:6525:4419":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"5:12447:742":{"crate_id":5,"path":["std","f128"],"kind":"primitive"},"1:47627:8077":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:32624:6052":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:41161:7826":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5019:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3074:138":{"crate_id":5,"path":["std","io","error","Error"],"kind":"struct"},"17:14327:5061":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14405:5074":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6368:5841":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:10994:7484":{"crate_id":5,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:317:8558":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4636:7543":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14140:5016":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3522:3493":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11135:4454":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"4:3096:9332":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7391:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15410:5314":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:45298:8806":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"11:2400:3666":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:465:6324":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:42216:10612":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:4763:8787":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:47347:8056":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:23235:7572":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46518:7980":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"14:160:8668":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11592:4701":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10793:4603":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:7731:7878":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1930:8308":{"crate_id":5,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4100:2941":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43467:2703":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:8216:7385":{"crate_id":5,"path":["std","fs","FileTimes"],"kind":"struct"},"1:23373:2680":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:5341:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:5313:8713":{"crate_id":5,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41056:8803":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:8756:7447":{"crate_id":5,"path":["std","path","Prefix"],"kind":"enum"},"17:15812:5421":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:22484:3979":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"15:0:3401":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5051:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:680:4584":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:44441:3942":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:6879:8487":{"crate_id":5,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:14738:5137":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2995:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3073:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:6064:5748":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4694:5777":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4816:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:15939:5460":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:16786:5693":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:4605:8497":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:1064:22278":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15351:5262":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:2349:8679":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:40893:7812":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10663:4723":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7807:37047":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5488:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:9201:8319":{"crate_id":5,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:26383:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:8320:23221":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:842:16057":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:41175:7829":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3656:2950":{"crate_id":5,"path":["std","io","Write"],"kind":"trait"},"6:5477:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15919:5454":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:34813:3639":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12056:4765":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12931:4851":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12736:8601":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10534:4718":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:659:8232":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:42328:28733":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:8028:6061":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:1415:8683":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12860:4845":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:32743:3576":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:6631:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:9274:16232":{"crate_id":5,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2148:3620":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:13172:3549":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15431:5324":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11952:8440":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4267:5775":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:44277:2858":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:46535:7981":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:47559:8068":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:39309:3645":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:16159:5534":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2834:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:2295:7518":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:44126:3989":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6748:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13818:4950":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:42466:2941":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:12906:4848":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6758:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:5151:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3125:2951":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:41435:7844":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:2121:6004":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15887:5443":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:11582:4376":{"crate_id":5,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:8165:5751":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3487:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:23476:7598":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:8581:8313":{"crate_id":5,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:43134:3516":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3987:4621":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:39985:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:2148:8679":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13169:8280":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:44116:3988":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:4241:5774":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:45094:10685":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14043:4987":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4359:8317":{"crate_id":5,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:472:8560":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5230:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6098:8610":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44208:3991":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9904:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:4160:16141":{"crate_id":5,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:7368:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5165:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:563:4569":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11386:23295":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:12440:1741":{"crate_id":5,"path":["std","str"],"kind":"primitive"},"17:14312:5059":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:12457:1847":{"crate_id":5,"path":["std","u128"],"kind":"primitive"},"6:5334:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:3364:6238":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:41276:7838":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:3014:22348":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:1972:2488":{"crate_id":5,"path":["std","error"],"kind":"module"},"5:2479:16086":{"crate_id":5,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:45225:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:1220:8248":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:41621:7846":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:9209:2941":{"crate_id":5,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6738:37043":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:22174:2680":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:6432:8486":{"crate_id":5,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:2332:16083":{"crate_id":5,"path":["std","fs","read_to_string"],"kind":"function"},"4:6711:3500":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"0:533:2572":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"17:15531:5361":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8101:4344":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:32654:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:824:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:12018:8577":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:8209:7384":{"crate_id":5,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:45041:7490":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:46664:7988":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5399:988":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:5520:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:1893:3498":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3305:3628":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:16084:5521":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:12433:1188":{"crate_id":5,"path":["std","never"],"kind":"primitive"},"17:12976:4855":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6723:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:11777:4754":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:12293:8588":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2415:22320":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3452:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:10409:8324":{"crate_id":5,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:2798:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:8539:2572":{"crate_id":5,"path":["std","io","Chain"],"kind":"struct"},"17:12135:4773":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:726:8771":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:44583:3944":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:3931:3498":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:16171:5537":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14773:5148":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:5971:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:47548:8067":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:5834:3504":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3716:31690":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12648:4827":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13385:4884":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:42791:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12759:2922":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:22841:28768":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:30773:10352":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:538:6369":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5255:5793":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12673:8596":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:481:4557":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5471:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:6384:4349":{"crate_id":5,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3848:16139":{"crate_id":5,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:7284:4435":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:6157:4413":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11864:8574":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:282:4384":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:16798:5696":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12306:4785":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:7563:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:5424:4415":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:14019:4983":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7586:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11527:8567":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6449:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:11353:162":{"crate_id":5,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:12035:6239":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:16019:5477":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:22066:15733":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:0:3398":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:44852:7925":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:4573:4406":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2045:678":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:15753:5411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10456:3516":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:7818:8329":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"9:53:8463":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:44106:3982":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3092:3060":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:8882:7455":{"crate_id":5,"path":["std","path","Components"],"kind":"struct"},"6:5405:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7392:4364":{"crate_id":5,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5551:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11281:8242":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12409:23387":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:4133:3500":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:4983:5785":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15050:5191":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43392:6096":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14127:5015":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2803:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:3851:7378":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5186:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16684:5669":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:33185:3627":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2920:5738":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:6308:4346":{"crate_id":5,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:9423:187":{"crate_id":5,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8789:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:8636:23222":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:8519:16100":{"crate_id":5,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2966:5740":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:46358:7963":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:491:4558":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:45021:3922":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:11427:8765":{"crate_id":5,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:3834:5770":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:2566:3496":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13041:8606":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"14:31:8668":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:2620:5724":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:8343:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13451:4889":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:809:3498":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:41063:3994":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10448:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:8014:7380":{"crate_id":5,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12952:4853":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12260:23386":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:7016:5914":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3325:3580":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15785:5417":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:33397:3626":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11515:8566":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2989:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:5319:28747":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2900:5737":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12347:8592":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:11292:35573":{"crate_id":5,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:32:22187":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:12973:3952":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6507:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:8014:5759":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:10954:8760":{"crate_id":5,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:10998:4453":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"5:384:8690":{"crate_id":5,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:378:8689":{"crate_id":5,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:3141:4608":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:40998:2858":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:6123:5747":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6421:5702":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:44088:3983":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:43408:28800":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:11747:7499":{"crate_id":5,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:22923:2680":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:46258:7953":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:41650:7849":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:8273:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9583:3544":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"9:355:22215":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:46808:8010":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:11105:7466":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6672:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:772:6233":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:42516:10616":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:4940:16157":{"crate_id":5,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:4222:16146":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:578:6390":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13547:8441":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"4:3456:3498":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:11787:8729":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5507:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:4754:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:13427:4887":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"4:1605:8302":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:47522:8065":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:96:8227":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4829:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:42560:137":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"1:10991:4452":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"4:7587:34339":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"9:0:3396":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7462:8634":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:11383:7492":{"crate_id":5,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:42200:7858":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:8669:6052":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6440:23210":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:21987:29410":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:44574:3948":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:32578:2949":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:8612:5763":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10487:23281":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:16145:5528":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:45308:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6970:5745":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6716:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:11733:23316":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:41152:7825":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:42941:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:4482:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1982:3534":{"crate_id":5,"path":["std","error","Report"],"kind":"struct"},"5:2323:139":{"crate_id":5,"path":["std","fs","File"],"kind":"struct"},"5:7804:8877":{"crate_id":5,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:12992:4856":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4946:3526":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:42643:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:1339:8249":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11805:8252":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:11057:8743":{"crate_id":5,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:8031:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:531:4564":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:40934:7814":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"4:5570:16013":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:32645:7669":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:22496:29408":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:3707:3665":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10938:37051":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:41677:7852":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:6578:16030":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:6502:22319":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:952:8304":{"crate_id":5,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:1049:8679":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13349:4882":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:2366:8688":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:36689:3640":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:8804:7895":{"crate_id":5,"path":["std","path","State"],"kind":"enum"},"1:42450:3665":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:8620:7435":{"crate_id":5,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14547:5096":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:2440:3500":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12920:4849":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:4152:5772":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7838:23218":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:14393:5072":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:46710:7990":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12249:8587":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2610:3605":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:16036:5484":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:473:6329":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:2990:5741":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:12437:1329":{"crate_id":5,"path":["std","pointer"],"kind":"primitive"},"5:9445:235":{"crate_id":5,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:10390:8307":{"crate_id":5,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:4970:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:40927:7813":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:4208:3666":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:8008:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2450:5710":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11817:3984":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:2729:4335":{"crate_id":5,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:11073:8720":{"crate_id":5,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:46425:7967":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:9584:8099":{"crate_id":5,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:6927:4384":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:7259:4432":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:113:8230":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:46763:7993":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3768:3585":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:4328:4341":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13933:4967":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:903:8558":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:3443:8703":{"crate_id":5,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:9172:7465":{"crate_id":5,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:34294:3635":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:11932:8708":{"crate_id":5,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:422:22202":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:7869:10597":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:4884:4441":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2660:5726":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11457:4737":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:1711:6532":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:16642:5658":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11075:37052":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:854:8674":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2684:5727":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:40:4937":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:41659:4449":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:42594:3665":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:7003:7551":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:6808:5742":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:4938:16156":{"crate_id":5,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:7747:10593":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1628:3498":{"crate_id":5,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:9400:7475":{"crate_id":5,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:545:6372":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:45287:28727":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:15549:5366":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3858:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:5044:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:22:826":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"10:0:3397":{"crate_id":10,"path":["adler"],"kind":"module"},"1:41411:7842":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5635:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:1586:6234":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:11753:8320":{"crate_id":5,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:47302:8055":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:564:6382":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:396:4325":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:8066:23219":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15829:5429":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:9148:199":{"crate_id":5,"path":["std","process","Output"],"kind":"struct"},"5:12461:13":{"crate_id":5,"path":["std","fn"],"kind":"primitive"},"5:4330:8315":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:7899:4708":{"crate_id":5,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15148:5205":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:40810:7809":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:5102:16185":{"crate_id":5,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5984:8721":{"crate_id":5,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2343:3588":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"0:351:3002":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"16:4902:5782":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:1869:8306":{"crate_id":5,"path":["std","env","VarsOs"],"kind":"struct"},"17:10368:23277":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:8353:7376":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:47455:8060":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:11953:8709":{"crate_id":5,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:12035:2836":{"crate_id":5,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:896:8609":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:34149:3633":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"9:500:6306":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:1214:8325":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:0:1923":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:39888:3653":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12550:4822":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6823:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:23341:7588":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6191:7544":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:12432:420":{"crate_id":5,"path":["std","bool"],"kind":"primitive"},"17:13909:4963":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:41644:7848":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:1023:8678":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2820:5733":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7361:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13491:4891":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3674:16099":{"crate_id":5,"path":["std","io","Seek"],"kind":"trait"},"1:4485:8785":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14917:5167":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43015:8501":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:507:4559":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:2751:8697":{"crate_id":5,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:3866:8773":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:12435:1893":{"crate_id":5,"path":["std","unit"],"kind":"primitive"},"16:6680:8619":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:5255:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11114:8240":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"13:0:3394":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:3297:3665":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4497:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:32745:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:38730:3644":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:12417:2837":{"crate_id":5,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14560:5097":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:44788:7923":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8288:10606":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13014:8604":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:8199:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:2173:8774":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:7798:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:22060:15730":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:44608:3947":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:40960:7816":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14084:4999":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5357:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"11:123:4321":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4964:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:8267:6077":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:46858:8012":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:15844:5431":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5088:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:8556:2858":{"crate_id":5,"path":["std","io","Bytes"],"kind":"struct"},"16:6159:5810":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:21919:4570":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:1002:3665":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:16656:5662":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:11065:8239":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12699:8600":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:961:8303":{"crate_id":5,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"0:353:2495":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"17:16264:5563":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:754:4602":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:40100:3647":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6419:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:45005:3914":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:3720:8269":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1969:4341":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12216:4781":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:44709:7918":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:13027:3949":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:46468:7970":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:6757:4384":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:42602:3666":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:47513:8064":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44887:7930":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:46731:7991":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:45009:3917":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:42865:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:31041:3568":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:1601:8685":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:47612:8076":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:8503:6119":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:5805:16214":{"crate_id":5,"path":["std","process","Termination"],"kind":"trait"},"5:4812:16143":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:1085:37031":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13306:4880":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:47053:8019":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:6744:4359":{"crate_id":5,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:22615:2680":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:2477:3594":{"crate_id":5,"path":["std","fs","metadata"],"kind":"function"},"16:6953:5906":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:9295:7471":{"crate_id":5,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14640:5108":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7828:8879":{"crate_id":5,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:9470:8498":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"9:328:6285":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:13233:3924":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:12446:763":{"crate_id":5,"path":["std","f64"],"kind":"primitive"},"1:44413:3938":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:5300:4413":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"5:5192:16193":{"crate_id":5,"path":["std","panic","always_abort"],"kind":"function"},"6:1530:6416":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3400:8701":{"crate_id":5,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:2256:4330":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4:1271":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:4015:8709":{"crate_id":5,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:42384:7873":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:40839:3946":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3910:8707":{"crate_id":5,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:11281:7465":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6822:8726":{"crate_id":5,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6144:23208":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:22005:2680":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:12458:977":{"crate_id":5,"path":["std","isize"],"kind":"primitive"},"5:4230:16148":{"crate_id":5,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10669:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:11163:4757":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:2495:16091":{"crate_id":5,"path":["std","fs","canonicalize"],"kind":"function"},"1:41669:7850":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:42362:7435":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:41133:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7350:5977":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:12438:335":{"crate_id":5,"path":["std","array"],"kind":"primitive"},"17:2437:8260":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:532:4330":{"crate_id":5,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:12752:1741":{"crate_id":1,"path":["core","str"],"kind":"module"},"17:3503:8268":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:8892:3665":{"crate_id":5,"path":["std","path","Iter"],"kind":"struct"},"1:8792:3667":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:41227:7834":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:8482:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5648:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4473:8784":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12371:4788":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:12335:3998":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:41184:7830":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14346:5066":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:8827:7450":{"crate_id":5,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3320:3579":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:7919:8655":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7350:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:41635:2841":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5709:23207":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1690:6524":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:3330:6237":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7789:37045":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6173:5813":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1584:6453":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13006:4859":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5379:5797":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12625:4826":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:3445:8704":{"crate_id":5,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:6018:8482":{"crate_id":5,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:965:8671":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10409:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:44341:3937":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:5298:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:11345:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6680:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6765:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:23421:7593":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:14260:3494":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:23465:7597":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:8115:8733":{"crate_id":5,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:46305:7956":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:16739:5685":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:12444:744":{"crate_id":5,"path":["std","f16"],"kind":"primitive"},"16:2950:5739":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3691:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40040:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:4908:811":{"crate_id":4,"path":["alloc","fmt"],"kind":"module"},"1:23279:28713":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2149:3594":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"0:492:193":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"17:16385:5592":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"11:430:8296":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:4163:4384":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:5870:4353":{"crate_id":5,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14708:5118":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:15876:5439":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:46987:8017":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:11736:7895":{"crate_id":5,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:2760:3827":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:23498:7600":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:13238:3923":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:9259:16230":{"crate_id":5,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:44918:3927":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:10983:7384":{"crate_id":5,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13719:4921":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:3295:3630":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15621:5377":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:14001:4982":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:7601:2941":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:1230:9331":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:13286:10668":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6411:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13592:4899":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2146:3619":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:5863:220":{"crate_id":5,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5482:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:9749:8309":{"crate_id":5,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:40942:7815":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:9742:139":{"crate_id":5,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:7282:5970":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16399:5595":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5249:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:22815:2680":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:8638:8742":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15714:5401":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:3587:5768":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"5:4174:16143":{"crate_id":5,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2840:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15439:5325":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16714:5677":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:7414:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3001:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:10778:8562":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:8798:10604":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:7469:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:5628:8717":{"crate_id":5,"path":["std","process","ChildStdin"],"kind":"struct"},"6:1489:6398":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4208:16144":{"crate_id":5,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3307:36771":{"crate_id":5,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:364:4323":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1645:6237":{"crate_id":5,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"9:480:22199":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:573:4559":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:706:3925":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13537:4851":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:6535:220":{"crate_id":5,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:9909:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:491:6337":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:42610:2941":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:10774:8699":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:11222:8241":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:9347:8751":{"crate_id":5,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12066:4766":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6611:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:12456:1865":{"crate_id":5,"path":["std","u64"],"kind":"primitive"},"11:102:6226":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:45215:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10696:4724":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:740:8303":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:583:8561":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:573:4331":{"crate_id":5,"path":["std","thread","Packet"],"kind":"struct"},"1:47533:8066":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:33609:3629":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:497:6340":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6462:23211":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11788:8570":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:5473:203":{"crate_id":5,"path":["std","path","Path"],"kind":"struct"},"16:3110:5764":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11617:8241":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:0:1733":{"crate_id":5,"path":["std"],"kind":"module"},"1:2713:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12962:23412":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14807:5151":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:16775:5691":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:40854:10568":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:16332:5583":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:46343:7962":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12605:4757":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:23221:28718":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6408:5844":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:11065:8733":{"crate_id":5,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:46372:7964":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:22058:2680":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8041:4598":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:3268:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:40847:3945":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:11268:7464":{"crate_id":5,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:8483:6118":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:902:2941":{"crate_id":5,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14672:5112":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:21975:29407":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:43635:7893":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7816:8878":{"crate_id":5,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:8646:8311":{"crate_id":5,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:4110:2925":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:7703:15997":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10141:23270":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:2228:6239":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:698:4588":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11026:37053":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6209:4353":{"crate_id":5,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:2227:8254":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:7909:2838":{"crate_id":5,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6942:5905":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:13448:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:7617:7533":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7358:5752":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:5991:8724":{"crate_id":5,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12941:4852":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10246:23273":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5036:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:299:6227":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"15:394:22311":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:5742:4719":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1632:6489":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13193:8608":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11553:8245":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:14375:5071":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2570:5722":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:39924:3583":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:2545:6242":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:8565:6128":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15760:5412":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:44599:3946":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:44176:3995":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:47103:8021":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40831:3947":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:44359:3935":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:7537:2941":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:12220:4383":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6599:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:40137:3064":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:11696:3934":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:44590:3945":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1650:6238":{"crate_id":5,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:9367:7472":{"crate_id":5,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:11049:35570":{"crate_id":5,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1928:8099":{"crate_id":5,"path":["std","env","Args"],"kind":"struct"},"17:15739:5409":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10774:1707":{"crate_id":1,"path":["core","slice"],"kind":"module"},"17:16668:5664":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:3470:3584":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:10928:8237":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3913:8708":{"crate_id":5,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:8627:7436":{"crate_id":5,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2969:3511":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4929:5783":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7716:37044":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10823:4727":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:22617:15732":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:434:8297":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15836:5430":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:689:4587":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:236:7895":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11623:3985":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7305:5971":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:47650:8078":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:15557:5367":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:8652:7437":{"crate_id":5,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:4404:5776":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:13969:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14152:5019":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7014:4448":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:5525:4384":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4218:16145":{"crate_id":5,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3703:3652":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11173:37054":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12983:23413":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:8697:7438":{"crate_id":5,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14573:5099":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:5680:114":{"crate_id":5,"path":["std","process","Command"],"kind":"struct"},"11:1884:2941":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:7842:8880":{"crate_id":5,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"4:780:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6902:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12570:8595":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:789:119":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7159:5942":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10564:4720":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12008:4656":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2640:5725":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:982:8674":{"crate_id":5,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:42978:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:42162:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:4497:4406":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:32714:3658":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:10703:4370":{"crate_id":5,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13570:23287":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:328:6230":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14416:5075":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:1487:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6852:5894":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:8204:8309":{"crate_id":5,"path":["std","fs","ReadDir"],"kind":"struct"},"17:16218:5549":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:14114:5011":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3048:22349":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:5877:7379":{"crate_id":5,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5366:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:635:4583":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:47257:8054":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:3854:8270":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:15655:5389":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:22829:15819":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1920:6238":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:8586:16138":{"crate_id":5,"path":["std","net","Shutdown"],"kind":"enum"},"6:6493:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:42554:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:7448:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4397:4341":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:7487:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2968:2680":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5205:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:41237:7835":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3005:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:46454:7969":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:9185:7466":{"crate_id":5,"path":["std","process","ExitCode"],"kind":"struct"},"4:4368:3665":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:523:6360":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:7316:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13082:8241":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:2084:197":{"crate_id":5,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:9313:116":{"crate_id":5,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6731:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:8569:3931":{"crate_id":5,"path":["std","io","Lines"],"kind":"struct"},"6:5311:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:22880:15820":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:16728:5680":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:42754:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:38675:3643":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:43652:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15777:5415":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10630:4722":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:670:8236":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:16132:5522":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:437:185":{"crate_id":5,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5449:5799":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5658:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5541:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:4994:4342":{"crate_id":5,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:8632:16165":{"crate_id":5,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:3290:3539":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13781:4937":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:40080:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5025:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:7498:8321":{"crate_id":5,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15852:5432":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:9428:4356":{"crate_id":5,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"5:1621:2941":{"crate_id":5,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:8252:128":{"crate_id":5,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7938:6055":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3536:7849":{"crate_id":5,"path":["std","io","util","Repeat"],"kind":"struct"},"1:23171:7562":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1521:6411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:4298:4341":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7986:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6822:23212":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:6559:16028":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"5:8730:8744":{"crate_id":5,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:11818:8573":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12826:4835":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:581:4570":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14750:5139":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:46393:7965":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12950:3955":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:22184:15731":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4842:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5570:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14299:5057":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:12816:4833":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6114:4341":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13945:4970":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"0:484:116":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"6:5420:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12711:8272":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11926:4764":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:1539:3666":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:946:3498":{"crate_id":5,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:6740:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2612:3606":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:798:3500":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:46497:7979":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12524:8267":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4810:5779":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2736:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:44495:3940":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"14:187:8900":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:1123:4384":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"0:481:226":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"1:44866:10675":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:47434:8059":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:41092:2572":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:5305:8278":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:14997:5187":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14269:5048":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:10069:811":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"5:5648:8718":{"crate_id":5,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14055:4988":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:12452:895":{"crate_id":5,"path":["std","i128"],"kind":"primitive"},"1:11661:3999":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3402:8702":{"crate_id":5,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:23210:7570":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7883:5848":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:39968:3492":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:4527:4341":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:16297:5570":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11492:3665":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:32656:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1097:8678":{"crate_id":5,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:46875:8013":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6659:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1617:3665":{"crate_id":5,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1905:8307":{"crate_id":5,"path":["std","env","SplitPaths"],"kind":"struct"},"5:12021:36990":{"crate_id":5,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:6:824":{"crate_id":4,"path":["alloc","format"],"kind":"macro"},"1:10452:3514":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:13322:23285":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:8105:6065":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:3239:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:7762:7537":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:23156:7561":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:8029:8731":{"crate_id":5,"path":["std","thread","Builder"],"kind":"struct"},"1:31056:3523":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11401:4735":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15315:5231":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15090:5196":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7753:10572":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:44395:3939":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14586:5100":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6111:5808":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12749:8274":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4766:5778":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5670:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:5541:129":{"crate_id":5,"path":["std","path","Display"],"kind":"struct"},"11:2301:6004":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:13055:4742":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"11:2551:37032":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11803:3986":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5125:16187":{"crate_id":5,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:5802:7148":{"crate_id":5,"path":["std","process","exit"],"kind":"function"},"6:5622:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5319:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:6704:2841":{"crate_id":5,"path":["std","sync","once","Once"],"kind":"struct"},"17:16179:5540":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:12451:914":{"crate_id":5,"path":["std","i64"],"kind":"primitive"},"1:41628:7847":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:3694:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:11003:7385":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:12851:4844":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:11773:7504":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7752:10571":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:16026:5479":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:43120:3513":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10443:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:4684:3524":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"14:165:22285":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6914:5903":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:7811:3537":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:667:4708":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:44218:3992":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:5107:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:1888:3500":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14520:5091":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:43664:7895":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:3613:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:765:27472":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:327:8459":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:13218:3544":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:13854:8797":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:32638:3061":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:32631:8801":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:2222:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:12454:1853":{"crate_id":5,"path":["std","u16"],"kind":"primitive"},"6:1727:6537":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7542:6003":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11902:4762":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:41262:4581":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6638:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5462:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:13994:8798":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:515:4562":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6917:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5196:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:9326:34902":{"crate_id":5,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40986:7817":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:9436:4341":{"crate_id":5,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:3686:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13070:4757":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:8179:6067":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:4116:2919":{"crate_id":5,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5641:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:5689:5801":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3599:7433":{"crate_id":5,"path":["std","io","Read"],"kind":"trait"},"16:7990:6060":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:8585:8664":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:8308:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:8043:37041":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7604:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:44459:3943":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5649:5800":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6731:8442":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:7463:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7959:6058":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:505:4329":{"crate_id":5,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10332:23276":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7401:37039":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14975:5176":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:7896:3499":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7223:5956":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12798:23411":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11734:3987":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:41286:7839":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:31003:3065":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:4699:16167":{"crate_id":5,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:4492:8711":{"crate_id":5,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:0:3400":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:879:3665":{"crate_id":5,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:1105:8681":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:46439:7968":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15769:5413":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:2466:3498":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:45083:7937":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6473:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:2585:7523":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:44513:3941":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:10820:4371":{"crate_id":5,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:3308:5709":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1657:6508":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:44291:3936":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"11:1900:6235":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:8898:7460":{"crate_id":5,"path":["std","path","Ancestors"],"kind":"struct"},"17:14902:5163":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7471:5994":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:23187:7566":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:33948:3634":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:42441:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:5113:5788":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1643:6497":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6598:186":{"crate_id":5,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:608:8557":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:32620:8106":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:12537:8593":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1667:6514":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"10:44:6248":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:2137:8678":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6239:5820":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12913:3953":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5217:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5387:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6534:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9433:8792":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:45266:8805":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:6125:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"18:643:4559":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:10973:7478":{"crate_id":5,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1158:8683":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11606:4757":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:3338:6235":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3434:3582":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:3493:16126":{"crate_id":5,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:9771:128":{"crate_id":5,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:5131:8277":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:6876:5899":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3465:3067":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2992:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:15:2863":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:971:16057":{"crate_id":5,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6837:8458":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"9:176:8473":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:45037:3916":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:12401:8494":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:13212:3552":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44565:3932":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:1684:6521":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:45211:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13871:4957":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"14:214:6215":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:44037:8330":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2710:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:4824:7240":{"crate_id":5,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11851:8253":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:42244:7865":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15077:5195":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:1115:8683":{"crate_id":5,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14947:5170":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"14:7:8668":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:2380:3665":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14652:5109":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4792:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"5:9215:7467":{"crate_id":5,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12225:4782":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:5017:16153":{"crate_id":5,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:13837:8794":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:6890:5744":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1494:6400":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7341:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:3481:3217":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:12406:2835":{"crate_id":5,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:22186:7558":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11678:8250":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7075:23214":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:8290:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14358:5068":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:3310:36908":{"crate_id":5,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7969:6059":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13890:4962":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1639:6236":{"crate_id":5,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5127:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:623:37062":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"6:485:6335":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14438:5082":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:43880:7902":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:994:8677":{"crate_id":5,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:40150:7675":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:42184:7856":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13921:4966":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"3:0:3393":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:44815:7924":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:7786:4414":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11971:8575":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:2551:3331":{"crate_id":5,"path":["std","io"],"kind":"module"},"16:6625:5881":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:33:1752":{"crate_id":1,"path":["core","stringify"],"kind":"macro"},"5:8675:7227":{"crate_id":5,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:16750:5686":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:7332:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2880:5736":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5139:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:8255:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10863:4451":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:15864:5438":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14872:5158":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15540:5365":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:12373:2983":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6876:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6777:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11475:23297":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:15946:5461":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8427:2946":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4837:3061":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:2772:5731":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:42506:8804":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12727:3974":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10390:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:23103:7560":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4997:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:15106:5198":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6205:23209":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:4338:8316":{"crate_id":5,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11653:4746":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:8013:2680":{"crate_id":5,"path":["std","sealed","Sealed"],"kind":"trait"},"16:908:8559":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:6843:5893":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4758:8786":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44198:3993":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:47405:8058":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:8080:2827":{"crate_id":5,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"13:110:37034":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:22937:15812":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6696:8622":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:589:4571":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2505:16096":{"crate_id":5,"path":["std","fs","read_dir"],"kind":"function"},"17:12392:4790":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:12441:1831":{"crate_id":5,"path":["std","tuple"],"kind":"primitive"},"1:42350:7872":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:11869:4378":{"crate_id":5,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3490:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:46632:7986":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:506:4663":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3072:226":{"crate_id":5,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5629:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:6063:3464":{"crate_id":5,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:4146:16140":{"crate_id":5,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15496:5360":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5349:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:46649:7987":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:4168:16142":{"crate_id":5,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5417:5798":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:586:6394":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:16377:5589":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:8151:5761":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:16520:5613":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:10661:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:16822:4967":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:598:37060":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:41214:7833":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:12445:747":{"crate_id":5,"path":["std","f32"],"kind":"primitive"},"5:8271:8735":{"crate_id":5,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7386:5979":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:8546:6125":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:44163:3994":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:47376:8057":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7337:5975":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:1386:8679":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5676:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10391:2950":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:16494:4922":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:46748:7992":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:46600:7984":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"10:36:6247":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11691:8569":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5144:5789":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5562:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:0:3403":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:21973:29403":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:8842:16209":{"crate_id":5,"path":["std","path","Component"],"kind":"enum"},"4:7880:3498":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:2796:5732":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:16323:5579":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:1636:8327":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:14148:4349":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3304:36274":{"crate_id":5,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10235:3533":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15036:5190":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:2645:8696":{"crate_id":5,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:3309:34850":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:12453:1871":{"crate_id":5,"path":["std","u8"],"kind":"primitive"},"4:3720:3666":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:16832:4972":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:2704:5728":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:22457:2680":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:47082:8020":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:15679:5391":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:4956:5784":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:8626:6130":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2467:5712":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7044:5750":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:8137:5760":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4896:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:14205:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5282:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:2325:8695":{"crate_id":5,"path":["std","fs","DirEntry"],"kind":"struct"},"5:6708:8725":{"crate_id":5,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:40782:28730":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:22007:15734":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:1627:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:698:2941":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:23243:7573":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1401:8678":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2724:5729":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15064:5194":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:8298:6081":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6640:8618":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:7577:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:8671:8743":{"crate_id":5,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:14963:5174":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8223:6069":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:46410:7966":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6256:5825":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11541:3936":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"11:1140:8682":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:16311:5577":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3676:3648":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13028:8276":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5241:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:40741:7804":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:43380:7889":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:32655:3265":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:11985:8262":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:42828:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:45025:3920":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:41083:8328":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:22078:7558":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12082:4768":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:44309:3934":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:43127:3515":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:11020:7487":{"crate_id":5,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:8279:8736":{"crate_id":5,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:4560:4341":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:3039:4340":{"crate_id":5,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:830:8304":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:4936:16154":{"crate_id":5,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11124:37057":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16209:5547":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:8238:140":{"crate_id":5,"path":["std","fs","FileType"],"kind":"struct"},"6:5288:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6028:5743":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13798:4940":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:8233:23220":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11421:8244":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:2323:8678":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:1551:6431":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:13227:3925":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:0:3399":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10442:23280":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:4896:16188":{"crate_id":5,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11016:8238":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:8226:7386":{"crate_id":5,"path":["std","fs","Permissions"],"kind":"struct"},"1:3697:3650":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:735:27471":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:4777:16184":{"crate_id":5,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:4844:5780":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10218:23272":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:46290:7955":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:7211:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:42515:3463":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3684:16119":{"crate_id":5,"path":["std","io","BufRead"],"kind":"trait"},"17:16341:5585":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:881:8677":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:4873:5781":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:45059:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:10274:23274":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:5357:8790":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:10777:8701":{"crate_id":5,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6084:5804":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12302:3997":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:7423:4365":{"crate_id":5,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:15010:5188":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12359:8266":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:44545:3931":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5586:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4827:4440":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:41036:8802":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:4929:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1500:6403":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:2816:7526":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7372:5753":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14933:5168":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:12028:2836":{"crate_id":5,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:1889:3498":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10450:3513":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41008:10579":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:40323:10529":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:3286:3616":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10454:3515":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5318:5795":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"15:306:8288":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:46970:8016":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:11798:7506":{"crate_id":5,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:15136:4851":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:16812:5697":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:40060:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:0:3402":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:16241:5562":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13157:8607":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:936:3500":{"crate_id":5,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:44137:3996":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:9232:7468":{"crate_id":5,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:8575:8311":{"crate_id":5,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4921:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:9499:7477":{"crate_id":5,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10549:4719":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5494:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"4:1370:6004":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15286:5211":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:45203:7940":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:7821:3538":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:40955:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5682:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:43446:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:15989:5471":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14284:5052":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:651:4559":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:14125:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:6950:233":{"crate_id":5,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:12385:8768":{"crate_id":5,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:1867:8305":{"crate_id":5,"path":["std","env","Vars"],"kind":"struct"},"4:1250:8326":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:9450:4362":{"crate_id":5,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:13610:4902":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:6487:4353":{"crate_id":5,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:39972:3646":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12204:4779":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10597:4721":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}