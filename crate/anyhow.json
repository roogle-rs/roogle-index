{"root":"0:0:1839","crate_version":"1.0.75","includes_private":false,"index":{"5:5536:26616":{"id":"5:5536:26616","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12474:25373"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2288":{"id":"0:26:2288","crate_id":0,"name":"size_hint","span":{"filename":"src/chain.rs","begin":[50,4],"end":[53,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:715":{"id":"0:283:715","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[962,4],"end":[969,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2289":{"id":"0:28:2289","crate_id":0,"name":"next_back","span":{"filename":"src/chain.rs","begin":[58,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7582:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:502":{"id":"0:192:502","crate_id":0,"name":"context","span":{"filename":"src/error.rs","begin":[301,4],"end":[329,5]},"visibility":"public","docs":"Wrap the error value with additional context.\n\nFor attaching context to a `Result` as it is propagated, the\n[`Context`][crate::Context] extension trait may be more convenient than\nthis function.\n\nThe primary reason to use `error.context(...)` instead of\n`result.context(...)` via the `Context` trait would be if the context\nneeds to depend on some data held by the underlying error:\n\n```\n# use std::fmt::{self, Debug, Display};\n#\n# type T = ();\n#\n# impl std::error::Error for ParseError {}\n# impl Debug for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n# impl Display for ParseError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\nuse anyhow::Result;\nuse std::fs::File;\nuse std::path::Path;\n\nstruct ParseError {\n    line: usize,\n    column: usize,\n}\n\nfn parse_impl(file: File) -> Result<T, ParseError> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\npub fn parse(path: impl AsRef<Path>) -> Result<T> {\n    let file = File::open(&path)?;\n    parse_impl(file).map_err(|error| {\n        let context = format!(\n            \"only the first {} lines of {} are valid\",\n            error.line, path.as_ref().display(),\n        );\n        anyhow::Error::new(error).context(context)\n    })\n}\n```","links":{"crate::Context":"0:477:107"},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[57,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"2:7473:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:28:2289"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12381:32344":{"id":"2:12381:32344","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43662:3243","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12365:25457":{"id":"2:12365:25457","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12371:32342":{"id":"2:12371:32342","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12055:1448","str::slice_mut_unchecked":"2:12372:32343","crate::ops::Index":"2:3069:2847"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1837":{"id":"0:48:1837","crate_id":0,"name":"StdError","span":{"filename":"src/context.rs","begin":[12,4],"end":[16,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:49:2298"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[558,0],"end":[564,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2986:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:213:233","0:214:567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2578-0:472:128":{"id":"b:2:2578-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2581:128","2:2582:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:7441:2287":{"id":"2:7441:2287","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:7582:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"2:12389:25500":{"id":"2:12389:25500","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:32346":{"id":"2:12412:32346","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12052:2860","str::split":"2:12400:2595","prim@char":"1:12049:428","str::split_terminator":"2:12409:32345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43466:3245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:32354":{"id":"2:12445:32354","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:32360":{"id":"2:12465:32360","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:25371":{"id":"2:12472:25371","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2287":{"id":"0:24:2287","crate_id":0,"name":"Item","span":{"filename":"src/chain.rs","begin":[36,4],"end":[36,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}}},"2:12351:836":{"id":"2:12351:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12049:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[35,0],"end":[54,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["product","unzip","take","map","min","try_reduce","cmp","partition_in_place","map_windows","skip_while","intersperse","__iterator_get_unchecked","cmp_by","copied","max_by_key","find","is_partitioned","chain","fuse","partial_cmp","take_while","intersperse_with","enumerate","next_chunk","partial_cmp_by","cloned","position","max_by","size_hint","find_map","try_fold","inspect","map_while","for_each","advance_by","skip","count","eq_by","cycle","min_by_key","eq","try_find","try_for_each","gt","try_collect","all","scan","lt","filter","ge","nth","is_sorted","array_chunks","min_by","any","last","rposition","fold","collect_into","flat_map","filter_map","step_by","by_ref","is_sorted_by","sum","rev","ne","max","reduce","partition","flatten","collect","peekable","zip","is_sorted_by_key","le"],"trait":{"name":"Iterator","id":"2:7582:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:24:2287","0:25:978","0:26:2288"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12477:8806":{"id":"2:12477:8806","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4557:8806"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43706:3256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:521:432":{"id":"0:521:432","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:472:128":{"id":"b:2:2567-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211:715":{"id":"0:211:715","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[550,4],"end":[553,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[574,0],"end":[578,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:218:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:285:715":{"id":"0:285:715","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[973,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[580,0],"end":[584,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:220:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[960,0],"end":[970,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:283:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12473:25372":{"id":"2:12473:25372","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:33018":{"id":"5:5524:33018","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471-0:347:1839":{"id":"0:471-0:347:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[270,0],"end":[270,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"anyhow","name":"format_err","id":"0:347:1839","glob":false}}},"2:12475:2315":{"id":"2:12475:2315","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4556:2315"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43697:3255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:223-0:472:128":{"id":"a:2:2772:223-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8557:2798-0:516:1916":{"id":"a:2:8557:2798-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8557:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12374:25483":{"id":"2:12374:25483","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12373:25482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2610":{"id":"0:319:2610","crate_id":0,"name":"Adhoc","span":{"filename":"src/kind.rs","begin":[53,0],"end":[53,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"a:2:8558:8975-0:516:1916":{"id":"a:2:8558:8975-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8558:8975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:32:60":{"id":"0:32:60","crate_id":0,"name":"default","span":{"filename":"src/chain.rs","begin":[95,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:1916":{"id":"0:516:1916","crate_id":0,"name":"Chain","span":{"filename":"src/lib.rs","begin":[400,0],"end":[402,1]},"visibility":"public","docs":"Iterator of a chain of source errors.\n\nThis type is the iterator returned by [`Error::chain`].\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{"`Error::chain`":"0:195:1830"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:19","a:2:8557:2798-0:516:1916","a:2:8558:8975-0:516:1916","a:2:2789:231-0:516:1916","a:2:2772:223-0:516:1916","a:2:2829:2967-0:516:1916","b:2:2257-0:516:1916","b:2:2260-0:516:1916","b:2:2563-0:516:1916","b:2:3408-0:516:1916","b:2:2573-0:516:1916","b:2:7439-0:516:1916","b:2:2567-0:516:1916","b:2:2578-0:516:1916","b:5:680-0:516:1916","0:519","0:22","0:27","0:31","0:29"]}}},"0:482:2028":{"id":"0:482:2028","crate_id":0,"name":"with_context","span":{"filename":"src/lib.rs","begin":[609,4],"end":[612,25]},"visibility":"default","docs":"Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3020:2030","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:346:1831":{"id":"0:346:1831","crate_id":0,"name":"ensure","span":{"filename":"src/macros.rs","begin":[120,0],"end":[143,1]},"visibility":"public","docs":"Return early with an error if a condition is not satisfied.\n\nThis macro is equivalent to `if !$cond { return\nErr(`[`anyhow!($args...)`][anyhow!]`); }`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\nAnalogously to `assert!`, `ensure!` takes a condition and exits the function\nif the condition fails. Unlike `assert!`, `ensure!` returns an `Error`\nrather than panicking.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{ensure, Result};\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#\nensure!(user == 0, \"only user 0 is allowed\");\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{ensure, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nensure!(depth <= MAX_DEPTH, ScienceError::RecursionLimitExceeded);\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:128","crate::anyhow":"0:347:1839"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! ensure {\n    ($cond:expr $(,)?) => { ... };\n    ($cond:expr, $msg:literal $(,)?) => { ... };\n    ($cond:expr, $err:expr $(,)?) => { ... };\n    ($cond:expr, $fmt:expr, $($arg:tt)*) => { ... };\n}"}},"2:12462:32359":{"id":"2:12462:32359","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:33016","5:5518:2872","5:5521:33017","5:5524:33018","5:5532:33019","5:5533:33020","5:5534:8902","5:5535:26615","5:5536:26616"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:203:2562":{"id":"0:203:2562","crate_id":0,"name":"downcast_mut","span":{"filename":"src/error.rs","begin":[506,4],"end":[524,5]},"visibility":"public","docs":"Downcast this error object by mutable reference.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2257-0:472:128":{"id":"b:2:2257-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2251:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2259:2183"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2573-0:516:1916":{"id":"b:2:2573-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2543:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2576:128","2:2577:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12361:320":{"id":"2:12361:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12362:319","`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2872":{"id":"5:5518:2872","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:32357":{"id":"2:12450:32357","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[586,0],"end":[593,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3010:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:222:604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:477:107":{"id":"0:477:107","crate_id":0,"name":"Context","span":{"filename":"src/lib.rs","begin":[601,0],"end":[613,1]},"visibility":"public","docs":"Provides the `context` method for `Result`.\n\nThis trait is sealed and cannot be implemented for types outside of\n`anyhow`.\n\n<br>\n\n# Example\n\n```\nuse anyhow::{Context, Result};\nuse std::fs;\nuse std::path::PathBuf;\n\npub struct ImportantThing {\n    path: PathBuf,\n}\n\nimpl ImportantThing {\n    # const IGNORE: &'static str = stringify! {\n    pub fn detach(&mut self) -> Result<()> {...}\n    # };\n    # fn detach(&mut self) -> Result<()> {\n    #     unimplemented!()\n    # }\n}\n\npub fn do_it(mut it: ImportantThing) -> Result<Vec<u8>> {\n    it.detach().context(\"Failed to detach the important thing\")?;\n\n    let path = &it.path;\n    let content = fs::read(path)\n        .with_context(|| format!(\"Failed to read instrs from {}\", path.display()))?;\n\n    Ok(content)\n}\n```\n\nWhen printed, the outermost context would be printed first and the lower\nlevel underlying causes would be enumerated below.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nRefer to the [Display representations] documentation for other forms in\nwhich this context chain can be rendered.\n\n[Display representations]: Error#display-representations\n\n<br>\n\n# Effect on downcasting\n\nAfter attaching context of type `C` onto an error of type `E`, the resulting\n`anyhow::Error` may be downcast to `C` **or** to `E`.\n\nThat is, in codebases that rely on downcasting, Anyhow's context supports\nboth of the following use cases:\n\n  - **Attaching context whose type is insignificant onto errors whose type\n    is used in downcasts.**\n\n    In other error libraries whose context is not designed this way, it can\n    be risky to introduce context to existing code because new context might\n    break existing working downcasts. In Anyhow, any downcast that worked\n    before adding context will continue to work after you add a context, so\n    you should freely add human-readable context to errors wherever it would\n    be helpful.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct SuspiciousError;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(SuspiciousError);\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(\"Failed to complete the work\")?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<SuspiciousError>() {\n            // If helper() returned SuspiciousError, this downcast will\n            // correctly succeed even with the context in between.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```\n\n  - **Attaching context whose type is used in downcasts onto errors whose\n    type is insignificant.**\n\n    Some codebases prefer to use machine-readable context to categorize\n    lower level errors in a way that will be actionable to higher levels of\n    the application.\n\n    ```\n    # use anyhow::bail;\n    # use thiserror::Error;\n    #\n    # #[derive(Error, Debug)]\n    # #[error(\"???\")]\n    # struct HelperFailed;\n    #\n    # fn helper() -> Result<()> {\n    #     bail!(\"no such file or directory\");\n    # }\n    #\n    use anyhow::{Context, Result};\n\n    fn do_it() -> Result<()> {\n        helper().context(HelperFailed)?;\n        # const IGNORE: &str = stringify! {\n        ...\n        # };\n        # unreachable!()\n    }\n\n    fn main() {\n        let err = do_it().unwrap_err();\n        if let Some(e) = err.downcast_ref::<HelperFailed>() {\n            // If helper failed, this downcast will succeed because\n            // HelperFailed is the context that has been attached to\n            // that error.\n            # return;\n        }\n        # panic!(\"expected downcast to succeed\");\n    }\n    ```","links":{"Error#display-representations":"0:472:128"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:480:502","0:482:2028"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"context::private::Sealed","id":"0:103:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:58","0:66"]}}},"2:12456:25501":{"id":"2:12456:25501","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:2593":{"id":"2:12443:2593","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2576:128":{"id":"2:2576:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12382:30936":{"id":"2:12382:30936","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43690:3254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2566:2265":{"id":"2:2566:2265","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2540:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:502":{"id":"0:61:502","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[46,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2259:2183":{"id":"2:2259:2183","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2829:2967-0:516:1916":{"id":"a:2:2829:2967-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2829:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:345:2346":{"id":"0:345:2346","crate_id":0,"name":"bail","span":{"filename":"src/macros.rs","begin":[56,0],"end":[66,1]},"visibility":"public","docs":"Return early with an error.\n\nThis macro is equivalent to `return Err(`[`anyhow!($args...)`][anyhow!]`)`.\n\nThe surrounding function's or closure's return value is required to be\n`Result<_,`[`anyhow::Error`][crate::Error]`>`.\n\n[anyhow!]: crate::anyhow\n\n# Example\n\n```\n# use anyhow::{bail, Result};\n#\n# fn has_permission(user: usize, resource: usize) -> bool {\n#     true\n# }\n#\n# fn main() -> Result<()> {\n#     let user = 0;\n#     let resource = 0;\n#\nif !has_permission(user, resource) {\n    bail!(\"permission denied for accessing {}\", resource);\n}\n#     Ok(())\n# }\n```\n\n```\n# use anyhow::{bail, Result};\n# use thiserror::Error;\n#\n# const MAX_DEPTH: usize = 1;\n#\n#[derive(Error, Debug)]\nenum ScienceError {\n    #[error(\"recursion limit exceeded\")]\n    RecursionLimitExceeded,\n    # #[error(\"...\")]\n    # More = (stringify! {\n    ...\n    # }, 1).1,\n}\n\n# fn main() -> Result<()> {\n#     let depth = 0;\n#\nif depth > MAX_DEPTH {\n    bail!(ScienceError::RecursionLimitExceeded);\n}\n#     Ok(())\n# }\n```","links":{"crate::Error":"0:472:128","crate::anyhow":"0:347:1839"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! bail {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:347:1839":{"id":"0:347:1839","crate_id":0,"name":"anyhow","span":{"filename":"src/macros.rs","begin":[190,0],"end":[209,1]},"visibility":"public","docs":"Construct an ad-hoc error from a string or existing non-`anyhow` error\nvalue.\n\nThis evaluates to an [`Error`][crate::Error]. It can take either just a\nstring, or a format string with arguments. It also can take any custom type\nwhich implements `Debug` and `Display`.\n\nIf called with a single argument whose type implements `std::error::Error`\n(in addition to `Debug` and `Display`, which are always required), then that\nError impl's `source` is preserved as the `source` of the resulting\n`anyhow::Error`.\n\n# Example\n\n```\n# type V = ();\n#\nuse anyhow::{anyhow, Result};\n\nfn lookup(key: &str) -> Result<V> {\n    if key.len() != 16 {\n        return Err(anyhow!(\"key length must be 16 characters, got {:?}\", key));\n    }\n\n    // ...\n    # Ok(())\n}\n```","links":{"crate::Error":"0:472:128"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! anyhow {\n    ($msg:literal $(,)?) => { ... };\n    ($err:expr $(,)?) => { ... };\n    ($fmt:expr, $($arg:tt)*) => { ... };\n}"}},"0:220:689":{"id":"0:220:689","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[581,4],"end":[583,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9456:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9437:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2262:25165":{"id":"2:2262:25165","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:567":{"id":"0:214:567","crate_id":0,"name":"deref","span":{"filename":"src/error.rs","begin":[561,4],"end":[563,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2986:117","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[399,9],"end":[399,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2273:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:521:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:2028":{"id":"0:63:2028","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[58,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3020:2030","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:30942":{"id":"2:12378:30942","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12379:30934"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43672:3242","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:25493":{"id":"2:12406:25493","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split":"2:12400:2595"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43416:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:3183":{"id":"2:12392:3183","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:33020":{"id":"5:5533:33020","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2408","`String`":"5:7475:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:689":{"id":"0:218:689","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[575,4],"end":[577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["formatter",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9456:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9437:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2772:223-0:516:1916":{"id":"a:2:2772:223-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:173:964":{"id":"0:173:964","crate_id":0,"name":"new","span":{"filename":"src/error.rs","begin":[32,4],"end":[38,5]},"visibility":"public","docs":"Create a new error object from any error type.\n\nThe error type must be threadsafe and `'static`, so that the `Error`\nwill be as well.\n\nIf the error type does not provide a backtrace, a backtrace will be\ncreated here to ensure that a backtrace exists.","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3218":{"id":"5:684:3218","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:978":{"id":"0:25:978","crate_id":0,"name":"next","span":{"filename":"src/chain.rs","begin":[38,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7582:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12470:25368":{"id":"2:12470:25368","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2569:715":{"id":"2:2569:715","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3410:1542":{"id":"2:3410:1542","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39283:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[568,0],"end":[572,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2999:2412","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12380:7238":{"id":"2:12380:7238","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43652:3241","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2582:1528":{"id":"2:2582:1528","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12441:32353":{"id":"2:12441:32353","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:1830":{"id":"0:195:1830","crate_id":0,"name":"chain","span":{"filename":"src/error.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"An iterator of the chain of source errors contained by this Error.\n\nThis iterator will visit every error in the cause chain of this error\nobject, beginning with the error that this error object was created\nfrom.\n\n# Example\n\n```\nuse anyhow::Error;\nuse std::io;\n\npub fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {\n    for cause in error.chain() {\n        if let Some(io_error) = cause.downcast_ref::<io::Error>() {\n            return Some(io_error.kind());\n        }\n    }\n    None\n}\n```","links":{},"attrs":["#[cfg(feature = \"std\")]","#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:569":{"id":"0:216:569","crate_id":0,"name":"deref_mut","span":{"filename":"src/error.rs","begin":[569,4],"end":[571,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2986:117","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:128":{"id":"0:472:128","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[374,0],"end":[376,1]},"visibility":"public","docs":"The `Error` type, a wrapper around a dynamic error type.\n\n`Error` works a lot like `Box<dyn std::error::Error>`, but with these\ndifferences:\n\n- `Error` requires that the error is `Send`, `Sync`, and `'static`.\n- `Error` guarantees that a backtrace is available, even if the underlying\n  error type does not provide one.\n- `Error` is represented as a narrow pointer &mdash; exactly one word in\n  size instead of two.\n\n<br>\n\n# Display representations\n\nWhen you print an error object using \"{}\" or to_string(), only the outermost\nunderlying error or context is printed, not any of the lower level causes.\nThis is exactly as if you had called the Display impl of the error from\nwhich you constructed your anyhow::Error.\n\n```console\nFailed to read instrs from ./path/to/instrs.json\n```\n\nTo print causes as well using anyhow's default formatting of causes, use the\nalternate selector \"{:#}\".\n\n```console\nFailed to read instrs from ./path/to/instrs.json: No such file or directory (os error 2)\n```\n\nThe Debug format \"{:?}\" includes your backtrace if one was captured. Note\nthat this is the representation you get by default if you return an error\nfrom `fn main` instead of printing it explicitly yourself.\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n```\n\nand if there is a backtrace available:\n\n```console\nError: Failed to read instrs from ./path/to/instrs.json\n\nCaused by:\n    No such file or directory (os error 2)\n\nStack backtrace:\n   0: <E as anyhow::context::ext::StdError>::ext_context\n             at /git/anyhow/src/backtrace.rs:26\n   1: core::result::Result<T,E>::map_err\n             at /git/rustc/src/libcore/result.rs:596\n   2: anyhow::context::<impl anyhow::Context<T,E> for core::result::Result<T,E>>::with_context\n             at /git/anyhow/src/context.rs:58\n   3: testing::main\n             at src/main.rs:5\n   4: std::rt::lang_start\n             at /git/rustc/src/libstd/rt.rs:61\n   5: main\n   6: __libc_start_main\n   7: _start\n```\n\nTo see a conventional struct-style Debug representation, use \"{:#?}\".\n\n```console\nError {\n    context: \"Failed to read instrs from ./path/to/instrs.json\",\n    source: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"No such file or directory\",\n    },\n}\n```\n\nIf none of the built-in representations are appropriate and you would prefer\nto render the error and its cause chain yourself, it can be done something\nlike this:\n\n```\nuse anyhow::{Context, Result};\n\nfn main() {\n    if let Err(err) = try_main() {\n        eprintln!(\"ERROR: {}\", err);\n        err.chain().skip(1).for_each(|cause| eprintln!(\"because: {}\", cause));\n        std::process::exit(1);\n    }\n}\n\nfn try_main() -> Result<()> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # Ok(())\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:172","a:2:8557:2798-0:472:128","a:2:8558:8975-0:472:128","a:2:2789:231-0:472:128","a:2:2772:223-0:472:128","a:2:2829:2967-0:472:128","b:2:2257-0:472:128","b:2:2260-0:472:128","b:2:2563-0:472:128","b:2:3408-0:472:128","b:2:2573-0:472:128","b:2:2570-0:472:128","b:2:2567-0:472:128","b:2:2578-0:472:128","b:5:5778-0:472:128","0:209","0:217","0:284","0:219","0:282","0:212","0:221","0:290","0:286","0:288","0:215"]}}},"b:2:3408-0:516:1916":{"id":"b:2:3408-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3406:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3410:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:964":{"id":"0:21:964","crate_id":0,"name":"new","span":{"filename":"src/chain.rs","begin":[28,4],"end":[32,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["head",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[26,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:21:964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:7439-0:516:1916":{"id":"b:2:7439-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:7582:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7435:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:7441:2287","2:7442:2285","2:7443:807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2578-0:516:1916":{"id":"b:2:2578-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2581:128","2:2582:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12439:32352":{"id":"2:12439:32352","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:2261":{"id":"2:12377:2261","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43384:2201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:233":{"id":"0:213:233","crate_id":0,"name":"Target","span":{"filename":"src/error.rs","begin":[559,4],"end":[559,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}},"2:12400:2595":{"id":"2:12400:2595","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split_whitespace":"2:12378:30942","str::rsplit":"2:12406:25493"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43398:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:321":{"id":"0:291:321","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[993,4],"end":[995,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:25499":{"id":"2:12383:25499","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[76,0],"end":[91,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"2:7526:2291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:30:836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2054":{"id":"0:175:2054","crate_id":0,"name":"msg","span":{"filename":"src/error.rs","begin":[79,4],"end":[84,5]},"visibility":"public","docs":"Create a new error object from a printable error message.\n\nIf the argument implements std::error::Error, prefer `Error::new`\ninstead which preserves the underlying error's cause chain and\nbacktrace. If the argument may or may not implement std::error::Error\nnow or in the future, use `anyhow!(err)` which handles either way\ncorrectly.\n\n`Error::msg(\"...\")` is equivalent to `anyhow!(\"...\")` but occasionally\nconvenient in places where a function is preferable over a macro, such\nas iterator or stream combinators:\n\n```\n# mod ffi {\n#     pub struct Input;\n#     pub struct Output;\n#     pub async fn do_some_work(_: Input) -> Result<Output, &'static str> {\n#         unimplemented!()\n#     }\n# }\n#\n# use ffi::{Input, Output};\n#\nuse anyhow::{Error, Result};\nuse futures::stream::{Stream, StreamExt, TryStreamExt};\n\nasync fn demo<S>(stream: S) -> Result<Vec<Output>>\nwhere\n    S: Stream<Item = Input>,\n{\n    stream\n        .then(ffi::do_some_work) // returns Result<Output, &str>\n        .map_err(Error::msg)\n        .try_collect()\n        .await\n}\n```","links":{},"attrs":["#[cold]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["message",{"generic":"M"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"M"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:480:502":{"id":"0:480:502","crate_id":0,"name":"context","span":{"filename":"src/lib.rs","begin":[603,4],"end":[605,43]},"visibility":"default","docs":"Wrap the error value with additional context.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12372:32343":{"id":"2:12372:32343","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12055:1448","crate::ops::IndexMut":"2:3073:2848","str::slice_unchecked":"2:12371:32342"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:6879":{"id":"2:12376:6879","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43374:3240","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:2587":{"id":"2:12386:2587","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[20,0],"end":[541,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:173:964","0:175:2054","0:192:502","0:194:1673","0:195:1830","0:196:2526","0:197:2533","0:199:2537","0:201:2534","0:203:2562"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12356:32340":{"id":"2:12356:32340","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12354:32339"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:7443:807":{"id":"2:7443:807","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:2774":{"id":"2:12427:2774","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatches":"2:12430:32349"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43602:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:25369":{"id":"2:12471:25369","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39470:25379","Self::is_ascii":"2:12470:25368"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39470:25379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[972,0],"end":[976,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:285:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197:2533":{"id":"0:197:2533","crate_id":0,"name":"is","span":{"filename":"src/error.rs","begin":[414,4],"end":[419,5]},"visibility":"public","docs":"Returns true if `E` is the type held by this error object.\n\nFor errors with context, this method returns true if `E` matches the\ntype of the context `C` **or** the type of the error on which the\ncontext has been attached. For details about the interaction between\ncontext and downcasting, [see here].\n\n[see here]: trait.Context.html#effect-on-downcasting","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:836":{"id":"0:30:836","crate_id":0,"name":"len","span":{"filename":"src/chain.rs","begin":[77,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:32349":{"id":"2:12430:32349","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::matches":"2:12427:2774"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43620:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2537":{"id":"0:199:2537","crate_id":0,"name":"downcast","span":{"filename":"src/error.rs","begin":[422,4],"end":[454,5]},"visibility":"public","docs":"Attempt to downcast the error object to a concrete type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403:25491":{"id":"2:12403:25491","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11868:3259","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[42,0],"end":[68,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"ext::StdError","id":"0:48:1837","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:107","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"items":["0:61:502","0:63:2028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12354:32339":{"id":"2:12354:32339","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:32341":{"id":"2:12360:32341","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:6867":{"id":"2:12375:6867","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43368:2854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:32347":{"id":"2:12421:32347","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3408-0:472:128":{"id":"b:2:3408-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3406:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3410:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:604":{"id":"0:222:604","crate_id":0,"name":"drop","span":{"filename":"src/error.rs","begin":[587,4],"end":[592,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:319":{"id":"2:12362:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:25482":{"id":"2:12373:25482","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12374:25483"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:3215":{"id":"2:12396:3215","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8558:8975-0:472:128":{"id":"a:2:8558:8975-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8558:8975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:472:128":{"id":"b:2:2563-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2566:2265"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:2024":{"id":"0:103:2024","crate_id":0,"name":"Sealed","span":{"filename":"src/context.rs","begin":[189,4],"end":[189,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12353:32338":{"id":"2:12353:32338","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2577:1529":{"id":"2:2577:1529","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[545,0],"end":[554,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"E"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:211:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12433:32350":{"id":"2:12433:32350","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatch_indices":"2:12436:32351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43548:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:2352":{"id":"2:12468:2352","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12013:127","`FromStr`":"2:12012:2857"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12012:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12012:2857","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:2614":{"id":"0:337:2614","crate_id":0,"name":"Boxed","span":{"filename":"src/kind.rs","begin":[98,0],"end":[98,17]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:287:715":{"id":"0:287:715","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[979,4],"end":[981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:502":{"id":"0:68:502","crate_id":0,"name":"context","span":{"filename":"src/context.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:485:182":{"id":"0:485:182","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[634,0],"end":[636,1]},"visibility":"public","docs":"Equivalent to Ok::<_, anyhow::Error>(value).\n\nThis simplifies creation of an anyhow::Result in places where type inference\ncannot deduce the `E` type of the result &mdash; without needing to write\n`Ok::<_, anyhow::Error>(value)`.\n\nOne might think that `anyhow::Result::Ok(value)` would work in such cases\nbut it does not.\n\n```console\nerror[E0282]: type annotations needed for `std::result::Result<i32, E>`\n  --> src/main.rs:11:13\n   |\n11 |     let _ = anyhow::Result::Ok(1);\n   |         -   ^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `E` declared on the enum `Result`\n   |         |\n   |         consider giving this pattern the explicit type `std::result::Result<i32, E>`, where the type parameter `E` is specified\n```","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"0:474:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[985,0],"end":[989,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2531:75","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12447:32356":{"id":"2:12447:32356","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12077:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:2275":{"id":"2:12453:2275","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:2252":{"id":"2:12363:2252","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:321":{"id":"0:289:321","crate_id":0,"name":"as_ref","span":{"filename":"src/error.rs","begin":[986,4],"end":[988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[992,0],"end":[996,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"2:2531:75","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:291:321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:682:2270":{"id":"5:682:2270","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:201:2534":{"id":"0:201:2534","crate_id":0,"name":"downcast_ref","span":{"filename":"src/error.rs","begin":[492,4],"end":[503,5]},"visibility":"public","docs":"Downcast this error object by reference.\n\n# Example\n\n```\n# use anyhow::anyhow;\n# use std::fmt::{self, Display};\n# use std::task::Poll;\n#\n# #[derive(Debug)]\n# enum DataStoreError {\n#     Censored(()),\n# }\n#\n# impl Display for DataStoreError {\n#     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n#         unimplemented!()\n#     }\n# }\n#\n# impl std::error::Error for DataStoreError {}\n#\n# const REDACTED_CONTENT: () = ();\n#\n# let error = anyhow!(\"...\");\n# let root_cause = &error;\n#\n# let ret =\n// If the error was caused by redaction, then return a tombstone instead\n// of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n    Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n    None => Err(error),\n}\n# ;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"E"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:32345":{"id":"2:12409:32345","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12052:2860","str::split":"2:12400:2595","prim@char":"1:12049:428","`DoubleEndedIterator`":"2:7473:121","str::rsplit_terminator":"2:12412:32346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43448:3247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:32361":{"id":"2:12478:32361","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4554:32361"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43715:3257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:33019":{"id":"5:5532:33019","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2789:231-0:516:1916":{"id":"a:2:2789:231-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12379:30934":{"id":"2:12379:30934","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12378:30942"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43681:3258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:32348":{"id":"2:12424:32348","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:2613":{"id":"0:328:2613","crate_id":0,"name":"Trait","span":{"filename":"src/kind.rs","begin":[75,0],"end":[75,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"b:2:2260-0:472:128":{"id":"b:2:2260-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2254:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:25165"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2260-0:516:1916":{"id":"b:2:2260-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2254:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2262:25165"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2257-0:516:1916":{"id":"b:2:2257-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2251:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2259:2183"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5778-0:472:128":{"id":"b:5:5778-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2779:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1506"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474:212":{"id":"0:474:212","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[453,0],"end":[453,59]},"visibility":"public","docs":"`Result<T, Error>`\n\nThis is a reasonable return type to use throughout your application but also\nfor `fn main`; if you do, failures will be printed along with any\n[context][Context] and a backtrace if one was captured.\n\n`anyhow::Result` may be used with one *or* two type parameters.\n\n```rust\nuse anyhow::Result;\n\n# const IGNORE: &str = stringify! {\nfn demo1() -> Result<T> {...}\n           // ^ equivalent to std::result::Result<T, anyhow::Error>\n\nfn demo2() -> Result<T, OtherError> {...}\n           // ^ equivalent to std::result::Result<T, OtherError>\n# };\n```\n\n# Example\n\n```\n# pub trait Deserialize {}\n#\n# mod serde_json {\n#     use super::Deserialize;\n#     use std::io;\n#\n#     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n#         unimplemented!()\n#     }\n# }\n#\n# #[derive(Debug)]\n# struct ClusterMap;\n#\n# impl Deserialize for ClusterMap {}\n#\nuse anyhow::Result;\n\nfn main() -> Result<()> {\n    # return Ok(());\n    let config = std::fs::read_to_string(\"cluster.json\")?;\n    let map: ClusterMap = serde_json::from_str(&config)?;\n    println!(\"cluster info: {:#?}\", map);\n    Ok(())\n}\n```","links":{"Context":"0:477:107"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::result::Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]}}}},"5:5521:33017":{"id":"5:5521:33017","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:516:1916":{"id":"b:2:2567-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2569:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12415:25495":{"id":"2:12415:25495","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860","str::rsplitn":"2:12418:25497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43502:3249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2789:231-0:472:128":{"id":"a:2:2789:231-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/context.rs","begin":[90,0],"end":[113,1]},"visibility":"default","docs":"```\n# type T = ();\n#\nuse anyhow::{Context, Result};\n\nfn maybe_get() -> Option<T> {\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n\nfn demo() -> Result<()> {\n    let t = maybe_get().context(\"there is no T\")?;\n    # const IGNORE: &str = stringify! {\n    ...\n    # };\n    # unimplemented!()\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Context","id":"0:477:107","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Infallible","id":"2:31941:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:68:502","0:70:2028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:683:2258":{"id":"5:683:2258","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:2238":{"id":"2:12352:2238","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5780:1506":{"id":"5:5780:1506","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[978,0],"end":[982,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::boxed::Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}},"items":["0:287:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12350":{"id":"2:12350","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12351:836","2:12352:2238","2:12353:32338","2:12354:32339","2:12356:32340","2:12359:2256","2:12360:32341","2:12361:320","2:12362:319","2:12363:2252","2:12365:25457","2:12367:25458","2:12369:25459","2:12371:32342","2:12372:32343","2:12373:25482","2:12374:25483","2:12375:6867","2:12376:6879","2:12377:2261","2:12378:30942","2:12379:30934","2:12380:7238","2:12381:32344","2:12382:30936","2:12383:25499","2:12386:2587","2:12389:25500","2:12392:3183","2:12396:3215","2:12400:2595","2:12403:25491","2:12406:25493","2:12409:32345","2:12412:32346","2:12415:25495","2:12418:25497","2:12421:32347","2:12424:32348","2:12427:2774","2:12430:32349","2:12433:32350","2:12436:32351","2:12439:32352","2:12441:32353","2:12443:2593","2:12445:32354","2:12446:32355","2:12447:32356","2:12450:32357","2:12453:2275","2:12456:25501","2:12459:32358","2:12462:32359","2:12465:32360","2:12468:2352","2:12470:25368","2:12471:25369","2:12472:25371","2:12473:25372","2:12474:25373","2:12475:2315","2:12477:8806","2:12478:32361"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2829:2967-0:472:128":{"id":"a:2:2829:2967-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2829:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12474:25373":{"id":"2:12474:25373","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:26615":{"id":"5:5535:26615","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12473:25372"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2526":{"id":"0:196:2526","crate_id":0,"name":"root_cause","span":{"filename":"src/error.rs","begin":[402,4],"end":[404,5]},"visibility":"public","docs":"The lowest level cause of this error &mdash; this error's cause's\ncause's cause etc.\n\nThe root cause is the last error in the iterator produced by\n[`chain()`][Error::chain].","links":{"Error::chain":"0:195:1830"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"StdError","id":"2:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:516:1916":{"id":"b:2:2563-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2566:2265"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2570-0:472:128":{"id":"b:2:2570-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2540:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:2298":{"id":"0:49:2298","crate_id":0,"name":"ext_context","span":{"filename":"src/context.rs","begin":[13,8],"end":[15,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"C"}]],"output":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:70:2028":{"id":"0:70:2028","crate_id":0,"name":"with_context","span":{"filename":"src/context.rs","begin":[103,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["context",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"C"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3020:2030","args":{"parenthesized":{"inputs":[],"output":{"generic":"C"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:25497":{"id":"2:12418:25497","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12049:428","str::splitn":"2:12415:25495","self::pattern":"2:12052:2860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43520:3248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:25459":{"id":"2:12369:25459","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2572:715":{"id":"2:2572:715","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:32351":{"id":"2:12436:32351","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12052:2860","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::match_indices":"2:12433:32350"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43566:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8557:2798-0:472:128":{"id":"a:2:8557:2798-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8557:2798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/chain.rs","begin":[94,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:32:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2573-0:472:128":{"id":"b:2:2573-0:472:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2543:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:472:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2576:128","2:2577:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:516:1916":{"id":"b:5:680-0:516:1916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2273:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Chain","id":"0:516:1916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:682:2270","5:683:2258","5:684:3218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:7442:2285":{"id":"2:7442:2285","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:0:1839":{"id":"0:0:1839","crate_id":0,"name":"anyhow","span":{"filename":"src/lib.rs","begin":[1,0],"end":[689,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/anyhow)&ensp;[![crates-io]](https://crates.io/crates/anyhow)&ensp;[![docs-rs]](https://docs.rs/anyhow)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides [`anyhow::Error`][Error], a trait object based error\ntype for easy idiomatic error handling in Rust applications.\n\n<br>\n\n# Details\n\n- Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as\n  the return type of any fallible function.\n\n  Within the function, use `?` to easily propagate any error that implements\n  the `std::error::Error` trait.\n\n  ```\n  # pub trait Deserialize {}\n  #\n  # mod serde_json {\n  #     use super::Deserialize;\n  #     use std::io;\n  #\n  #     pub fn from_str<T: Deserialize>(json: &str) -> io::Result<T> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # struct ClusterMap;\n  #\n  # impl Deserialize for ClusterMap {}\n  #\n  use anyhow::Result;\n\n  fn get_cluster_info() -> Result<ClusterMap> {\n      let config = std::fs::read_to_string(\"cluster.json\")?;\n      let map: ClusterMap = serde_json::from_str(&config)?;\n      Ok(map)\n  }\n  #\n  # fn main() {}\n  ```\n\n- Attach context to help the person troubleshooting the error understand\n  where things went wrong. A low-level error like \"No such file or\n  directory\" can be annoying to debug without more context about what higher\n  level step the application was in the middle of.\n\n  ```\n  # struct It;\n  #\n  # impl It {\n  #     fn detach(&self) -> Result<()> {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  use anyhow::{Context, Result};\n\n  fn main() -> Result<()> {\n      # return Ok(());\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # let it = It;\n      # let path = \"./path/to/instrs.json\";\n      #\n      it.detach().context(\"Failed to detach the important thing\")?;\n\n      let content = std::fs::read(path)\n          .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n      #\n      # const _: &str = stringify! {\n      ...\n      # };\n      #\n      # Ok(())\n  }\n  ```\n\n  ```console\n  Error: Failed to read instrs from ./path/to/instrs.json\n\n  Caused by:\n      No such file or directory (os error 2)\n  ```\n\n- Downcasting is supported and can be by value, by shared reference, or by\n  mutable reference as needed.\n\n  ```\n  # use anyhow::anyhow;\n  # use std::fmt::{self, Display};\n  # use std::task::Poll;\n  #\n  # #[derive(Debug)]\n  # enum DataStoreError {\n  #     Censored(()),\n  # }\n  #\n  # impl Display for DataStoreError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  #\n  # impl std::error::Error for DataStoreError {}\n  #\n  # const REDACTED_CONTENT: () = ();\n  #\n  # let error = anyhow!(\"...\");\n  # let root_cause = &error;\n  #\n  # let ret =\n  // If the error was caused by redaction, then return a\n  // tombstone instead of the content.\n  match root_cause.downcast_ref::<DataStoreError>() {\n      Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n      None => Err(error),\n  }\n  # ;\n  ```\n\n- If using the nightly channel, or stable with `features = [\"backtrace\"]`, a\n  backtrace is captured and printed with the error if the underlying error\n  type does not already provide its own. In order to see backtraces, they\n  must be enabled through the environment variables described in\n  [`std::backtrace`]:\n\n  - If you want panics and errors to both have backtraces, set\n    `RUST_BACKTRACE=1`;\n  - If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n  - If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n    `RUST_LIB_BACKTRACE=0`.\n\n  The tracking issue for this feature is [rust-lang/rust#53487].\n\n  [`std::backtrace`]: https://doc.rust-lang.org/std/backtrace/index.html#environment-variables\n  [rust-lang/rust#53487]: https://github.com/rust-lang/rust/issues/53487\n\n- Anyhow works with any error type that has an impl of `std::error::Error`,\n  including ones defined in your crate. We do not bundle a `derive(Error)`\n  macro but you can write the impls yourself or use a standalone macro like\n  [thiserror].\n\n  [thiserror]: https://github.com/dtolnay/thiserror\n\n  ```\n  use thiserror::Error;\n\n  #[derive(Error, Debug)]\n  pub enum FormatError {\n      #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n      InvalidHeader {\n          expected: String,\n          found: String,\n      },\n      #[error(\"Missing attribute: {0}\")]\n      MissingAttribute(String),\n  }\n  ```\n\n- One-off error messages can be constructed using the `anyhow!` macro, which\n  supports string interpolation and produces an `anyhow::Error`.\n\n  ```\n  # use anyhow::{anyhow, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  return Err(anyhow!(\"Missing attribute: {}\", missing));\n  #     Ok(())\n  # }\n  ```\n\n  A `bail!` macro is provided as a shorthand for the same early return.\n\n  ```\n  # use anyhow::{bail, Result};\n  #\n  # fn demo() -> Result<()> {\n  #     let missing = \"...\";\n  bail!(\"Missing attribute: {}\", missing);\n  #     Ok(())\n  # }\n  ```\n\n<br>\n\n# No-std support\n\nIn no_std mode, the same API is almost all available and works the same way.\nTo depend on Anyhow in no_std mode, disable our default enabled \"std\"\nfeature in Cargo.toml. A global allocator is required.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nSince the `?`-based error conversions would normally rely on the\n`std::error::Error` trait which is only available through std, no_std mode\nwill require an explicit `.map_err(Error::msg)` when working with a\nnon-Anyhow error type inside a function that returns Anyhow's error type.","links":{"Error":"0:472:128"},"attrs":["#![doc(html_root_url = \"https://docs.rs/anyhow/1.0.75\")]","#![feature(error_generic_member_access)]","#![deny(dead_code, unused_imports, unused_mut)]","#![allow(clippy :: doc_markdown, clippy :: enum_glob_use, clippy ::\nexplicit_auto_deref, clippy :: extra_unused_type_parameters, clippy ::\nlet_underscore_untyped, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: needless_doctest_main, clippy ::\nnew_ret_no_self, clippy :: redundant_else, clippy :: return_self_not_must_use,\nclippy :: unused_self, clippy :: used_underscore_binding, clippy ::\nwildcard_imports, clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:471-0:347:1839","0:472:128","0:516:1916","0:474:212","0:477:107","0:485:182","0:345:2346","0:346:1831","0:347:1839"],"is_stripped":false}}},"2:12367:25458":{"id":"2:12367:25458","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:33016":{"id":"5:5517:33016","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2408","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:8902":{"id":"5:5534:8902","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12459:32358":{"id":"2:12459:32358","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:2860"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:2850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:32355":{"id":"2:12446:32355","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1673":{"id":"0:194:1673","crate_id":0,"name":"backtrace","span":{"filename":"src/error.rs","begin":[363,4],"end":[365,5]},"visibility":"public","docs":"Get the backtrace for this Error.\n\nIn order for the backtrace to be meaningful, one of the two environment\nvariables `RUST_LIB_BACKTRACE=1` or `RUST_BACKTRACE=1` must be defined\nand `RUST_LIB_BACKTRACE` must not be `0`. Backtraces are somewhat\nexpensive to capture in Rust, so we don't necessarily want to be\ncapturing them all over the place all the time.\n\n- If you want panics and errors to both have backtraces, set\n  `RUST_BACKTRACE=1`;\n- If you want only errors to have backtraces, set\n  `RUST_LIB_BACKTRACE=1`;\n- If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and\n  `RUST_LIB_BACKTRACE=0`.\n\n# Stability\n\nStandard library backtraces are only available on the nightly channel.\nTracking issue: [rust-lang/rust#53487][tracking].\n\nOn stable compilers, this function is only available if the crate's\n\"backtrace\" feature is enabled, and will use the `backtrace` crate as\nthe underlying backtrace implementation.\n\n```toml\n[dependencies]\nanyhow = { version = \"1.0\", features = [\"backtrace\"] }\n```\n\n[tracking]: https://github.com/rust-lang/rust/issues/53487","links":{},"attrs":["#[cfg(any(backtrace, feature = \"backtrace\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"std::backtrace::Backtrace","id":"1:622:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2581:128":{"id":"2:2581:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31941:2294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12359:2256":{"id":"2:12359:2256","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11612:2266"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5827:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10771:4014":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5509:7688":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44405:6902":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:10605:3298":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:9705:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10366:7516":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1575:5601":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:644:2978":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7530:3947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9207:3955":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8312:7264":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7210:3714":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2366:2900":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:12062:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:9488:2812":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:12069:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14134:4691":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3581:2977":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8948:9007":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13868:4624":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13676:4583":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6805:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:636:3828":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:2531:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:1103:7622":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4652:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13838:4613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"15:327:7406":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10494:3996":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14056:4673":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11307:3739":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:4032:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11351:4081":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4706:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9660:33933":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"14:165:20126":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4608:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10023:7195":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8932:9005":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:2625:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:10343:3246":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13298:4427":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:1634:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4844:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:534:3705":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4718:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:9173:7431":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40212:6783":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5798:4945":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6268:33922":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4558:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8097:5243":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6844:5092":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12846:4333":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:20840:3815":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8169:7072":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:12070:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:8713:21108":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6415:5021":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:2186:33915":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2907:4867":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10547:4001":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9701:7195":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:62:14665":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:599:33935":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:4557:4907":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6053:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:8134:5249":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:0:2676":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:5552:6509":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40292:6794":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:42740:6857":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4646:6334":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:7526:2291":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:40733:6811":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8547:7097":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:6320:9125":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40340:3826":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6485:4871":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14110:4687":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2461:6487":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7360:33925":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7271:2285":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:46333:6940":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5784:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:357:20056":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1257:5125":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43125:7257":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2251:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5575:6242":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6332:4868":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43384:2201":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9921:7506":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2380:4845":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11251:7116":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5696:21048":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10278:7515":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11337:21240":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11951:4157":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:31988:7649":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:31977:7648":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:41640:2285":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46199:6937":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8149:3843":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:41573:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:8666:2850":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13778:4603":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3513:7855":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:45388:6904":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21219:2909":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:44141:3232":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8244:7266":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:8978:21116":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:3915:4900":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:12057:2850":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:44332:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:5369:14171":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7782:5190":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:7473:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6607:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10738:7221":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4931:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:5846:2838":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9242:3956":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9070:3950":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9445:7191":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8985:7437":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:500:5496":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:1845:5396":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5802:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2888:3711":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:5373:14172":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22274:30881":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4951:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7865:7030":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:595:5554":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4055:2884":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3997:8917":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2810:4863":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4862:4916":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:844:7616":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:1012:7619":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:582:3815":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11261:4071":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1709:5688":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7544:5181":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7006:7572":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:755:3847":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:3204:5397":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2722:4859":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7860:7262":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:5866:4958":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4973:8967":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12711:4314":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:2180:5401":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4910:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14296:4753":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41584:182":{"crate_id":2,"path":["anyhow","Result","Ok"],"kind":"variant"},"1:5832:2799":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9116:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11191:4058":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1557:5591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2363:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8840:7105":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1681:5675":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12062:4180":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11272:4072":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:8953:21115":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:1288:7617":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11872:4138":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:2888:2942":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9086:3951":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2829:2967":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:4124:7429":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12765:4322":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"9:237:6853":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"14:160:7607":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4830:8927":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:207:2898":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:7931:7852":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7436:4973":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:10294:2977":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:9456:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6901:4878":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10561:4002":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:4784:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:14156:4696":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5646:7023":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:884:5394":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7862:5202":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8304:7710":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9081:7115":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9574:33932":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5088:4923":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5435:4927":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:5610:6510":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4589:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6339:1619":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"2:3230:2959":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:46647:6960":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4397:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11661:4111":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12208:4205":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7090:5124":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47716:7005":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:11607:1448":{"crate_id":2,"path":["core","str"],"kind":"module"},"11:1838:5395":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13286:4420":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12252:4222":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6180:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14221:4740":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2526:4851":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10197:7511":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10126:3975":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:2783:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5588:4872":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:8895:21113":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10227:7514":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5384:21047":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:4719:4911":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6960:7571":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:9486:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:25797:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4666:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"13:110:33916":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:8825:21111":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:22197:30890":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:793:7251":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41410:6835":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:10800:7132":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10980:3985":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:8195:5251":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11637:2178":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8990:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12671:4019":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:12052:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9328:2201":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12066:3236":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:39985:6769":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:12853:3702":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10949:7539":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:41564:14416":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8563:7100":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41496:2977":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10591:3248":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:47567:7000":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:4020:7640":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:7475:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:42195:2812":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9998:3940":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"0:0:1839":{"crate_id":0,"path":["anyhow"],"kind":"module"},"16:6792:5090":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:358:7656":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40305:6795":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9493:3732":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12154:4199":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4949:4919":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10259:7906":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:14282:4747":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9455:33930":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:8181:4889":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2696:4858":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5976:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:7489:2839":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:7595:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:43697:3255":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:10860:27362":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:2178:7211":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:39276:2960":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11111:7545":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3270:30865":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22145:6531":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40752:6812":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14434:4789":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:22185:6539":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:41521:6840":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10628:4010":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:41554:7651":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22717:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5886:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:47255:6996":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5070:6064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:8154:7603":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:6437:7693":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9051:21095":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:5404:3651":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:9886:7198":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10425:3297":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1138:7253":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7534:4883":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3679:8912":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7928:7703":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:11137:3310":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:5963:7552":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10165:21148":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:4527:4906":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12576:4297":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"10:36:5406":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:43850:6881":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11324:7138":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11845:4130":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9650:3985":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41512:2285":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:45633:6914":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13085:4385":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7287:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:45703:6917":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7912:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6318:5010":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:574:3804":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1495:5558":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7237:2838":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10672:7217":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4526:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2864:4865":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:707:3236":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6968:21055":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:40222:6784":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:276:2408":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5574:4869":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3465:7674":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:822:3633":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:6902:3726":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:46101:6935":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:41581:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:44030:2851":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41908:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:10486:3733":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:5017:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13135:4402":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39103:2957":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1557:2977":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5830:4951":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7269:33924":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:21782:3291":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:41624:2977":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:39966:3255":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4921:4918":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:47762:7009":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:8926:21114":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4343:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7041:5116":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11357:7142":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7733:2797":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:22212:6541":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:2201:2852":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:41947:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:568:5539":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:11794:3265":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8557:2977":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:4194:3651":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:22618:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:2170:6480":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3600:4895":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:638:2193":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9896:21130":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12098:4187":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7464:3658":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:9438:2295":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:1500:5560":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13723:4591":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2780:2886":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11535:4104":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:35:2897":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:4074:2978":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5049:4922":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"14:0:2677":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4462:4904":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:986:7617":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6582:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9026:7714":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:6201:7440":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4648:6336":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13010:4373":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14126:4690":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10960:7700":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10292:3985":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:7451:6502":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2772:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4772:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:7561:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4059:8922":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:22324:6557":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10851:27355":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:644:3804":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10616:4007":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:2382:8866":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:9945:3970":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46009:6931":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10370:7215":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14100:4684":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4750:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9823:21128":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2141:6478":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:39056:2890":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:9490:2813":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:2223:8860":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:12648:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:40504:6804":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:4348:2406":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:8594:21096":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3017:2956":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12053:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7102:21056":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14448:4796":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:12635:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:43976:14186":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"0:346:1831":{"crate_id":0,"path":["anyhow","ensure"],"kind":"macro"},"16:6083:20160":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"7:32:20027":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1076:7623":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6017:21050":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6361:5013":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12945:4366":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5017:4921":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:42709:6852":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:0:2671":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:14469:4802":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13758:4595":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:6453:2838":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:15:2206":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12074:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:4234:2977":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1822:2285":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10548:7669":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7128:7112":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10036:3972":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4330:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2841:2842":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:7308:2285":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2562:3708":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:4426:3653":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11387:7697":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12031:2179":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7660:5186":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2548:4852":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10265:7207":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10916:7537":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6226:7558":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:41302:8911":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11124:7229":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6600:21053":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:8659:21094":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14001:4657":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:4985:3651":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:2834:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:11507:21120":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:6086:3651":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:723:5393":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4680:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:474:5483":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7520:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:907:3142":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10186:3982":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2504:4850":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14335:4765":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39958:3256":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:49709:9051":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:44149:3227":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46411:6956":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:43185:3293":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:7217:2285":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2881:4866":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:531:3809":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41869:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10637:4011":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:609:7500":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:1825:2411":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14536:4814":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13906:4632":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42701:6851":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4897:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2596:4854":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6818:5091":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:4402:2823":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:21086:2909":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:1671:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13259:4417":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45787:6920":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:8686:21107":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4874:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11630:2178":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:41387:7077":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21337:9036":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7920:7702":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2450:4848":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46253:6939":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40202:6781":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1513:5566":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14269:4741":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6076:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12997:4372":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:39297:6633":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:12020:2177":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9121:7116":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:14145:4695":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:9745:6520":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:491:3803":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12048:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:113:7184":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43342:2855":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:42533:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:9488:7262":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:2856:2935":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:1638:5649":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3669:3627":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:44324:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10698:7534":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4508:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43251:3306":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:22948:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4465:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11372:7143":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:2273:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:47505:6999":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11161:7104":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11137:7546":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2321:4836":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:8281:5258":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43264:3307":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:21084:31846":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:4745:4912":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43672:3242":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10545:7667":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:9437:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7438:6500":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43374:3240":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3232:4835":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7375:8814":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:506:5499":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:4265:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:7472:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:40742:3686":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:5634:4929":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:9198:27575":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12724:4315":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2172:2910":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11389:7231":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:79:20034":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4458:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1527:5571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14316:4759":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9140:7117":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8808:7271":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40162:7255":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11195:6893":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"0:345:2346":{"crate_id":0,"path":["anyhow","bail"],"kind":"macro"},"6:6139:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"10:0:2674":{"crate_id":10,"path":["adler"],"kind":"module"},"18:507:3804":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10750:4012":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:7398:14366":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7767:7700":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10383:7517":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9106:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6753:5077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5727:4938":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2935:2952":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13851:4619":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:1121:7623":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9617:33934":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3504:2295":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:403:7243":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5060:6063":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:3217:33873":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11586:4108":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8574:7101":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7514:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2962:6483":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4417:4903":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21275:2024":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12685:4311":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:149:3615":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1411:2977":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10536:3299":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4940:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:7597:33919":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:2966:2405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12073:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:6195:6515":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12280:4232":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:12945:2895":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7771:7648":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:3010:2565":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14478:4804":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:42188:2813":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11173:21239":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:4008:7639":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12305:4236":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:8232:3241":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:2960:33844":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6086:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"15:288:7232":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6279:5007":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13739:4594":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3115:7665":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13215:4410":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11048:7540":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2872:2843":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:311:5390":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:6944:3668":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4957:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6499:4888":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40112:3678":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11761:4119":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13897:4631":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:1858:5398":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6696:5064":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:39017:2964":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:30281:30896":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8415:7089":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:7225:6495":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:918:7249":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6735:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9752:7196":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1569:5599":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4422:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44314:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:11757:3263":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7137:7275":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1690:5681":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:30153:2410":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10588:4004":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:7363:2852":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6189:5005":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:21469:6526":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4491:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:44172:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"18:652:3804":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7936:6476":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3212:5395":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:12077:3234":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12074:4183":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:1442:2285":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12050:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6729:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6560:3617":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4850:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:21036:9040":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:3391:6811":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"9:393:20042":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:41331:6827":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:332:3620":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11104:3309":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:5403:3950":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:4623:14213":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:22651:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:6969:3672":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11991:4168":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:5424:7685":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14355:4768":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9003:21117":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41791:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40240:6787":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12970:4369":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12778:4323":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47736:7007":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4317:5720":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:9147:689":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"6:4391:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6859:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6929:5100":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:119:14719":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:5909:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40065:6776":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:32089:2970":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8878:2285":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43898:6882":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42468:5217":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:47443:6998":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2986:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:9697:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21072:9042":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"9:426:20043":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13611:4573":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"14:40:4154":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:7718:2170":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13487:4480":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:1184:7203":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4805:32257":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:30193:2878":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39973:14219":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:9060:27358":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6879:5096":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:5978:3720":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12959:4368":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5964:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4924:8964":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41422:6836":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4856:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:913:7251":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14013:4658":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7708:4887":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:43398:3246":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:3257:2963":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:4269:7641":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:3049:20190":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:47773:7010":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14522:4811":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11162:4054":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43548:3252":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:21904:2024":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42730:6853":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12621:4302":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6156:5000":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5082:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9102:3952":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6045:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4293:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:3171:2977":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7751:8836":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5053:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:3529:8893":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1852:5397":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9780:7197":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:3655:3855":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:45979:6930":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11833:3745":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4946:6008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10059:3974":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:4363:3653":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:2216:7661":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3406:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2359:4844":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:1426:2978":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:22750:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7690:3734":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"0:485:182":{"crate_id":0,"path":["anyhow","Ok"],"kind":"function"},"17:11327:4079":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40037:6775":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7381:29865":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13922:4636":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:7555:3142":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:2540:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11187:27353":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:5:1619":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:41674:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:10318:2978":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:2614:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:1702:5685":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:7316:2285":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:2969:20189":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5712:4935":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:42209:2815":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:504:7504":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4168:7269":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6900:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6829:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1842:7261":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:22684:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10787:7030":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3073:2848":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3939:2269":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6583:5039":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2832:4864":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12911:4363":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3238:5398":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:782:3630":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:9137:3953":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:23395:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8916:9006":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7895:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10447:7524":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:45602:6913":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:5982:8158":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4430:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:564:3814":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11407:21118":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11226:4069":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:749:2838":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11086:7227":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5612:4874":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:9492:2814":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:39134:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10646:4090":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"15:0:2678":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:1517:7624":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8181:8875":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7581:3729":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4766:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11639:4058":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"18:766:25079":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3330:3142":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:2959:2270":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:699:3833":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5858:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"9:0:2673":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:949:7615":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1672:3627":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:12060:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10685:7532":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12554:4290":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:96:7181":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:40231:6786":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:590:3816":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:7890:2979":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:20881:32173":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:9168:7854":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:629:7626":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6304:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:400:7503":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10397:7216":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13981:4650":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10726:7536":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:43652:3241":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"0:472:128":{"crate_id":0,"path":["anyhow","Error"],"kind":"struct"},"1:2219:2542":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:10463:3311":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:878:3635":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11399:7145":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5929:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2851:2936":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12496:4283":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5010:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11934:4154":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:2868:2937":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5743:4940":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:12061:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:21685:9041":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:840:2977":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12043:4179":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7744:7027":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:9927:3691":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13685:4584":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7554:4884":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:32002:6627":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"18:624:33938":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:671:7190":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:6929:7256":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1579:5396":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4640:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13174:4405":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:5760:7692":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:4189:7270":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:8557:2798":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2368:8702":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:40184:6778":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7500:2840":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:6783:3147":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14068:4676":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14420:4787":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:7644:2024":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5639:3720":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14308:4756":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13188:4406":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:1818:2977":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4774:4913":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:4924":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:7444:2971":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10240:3970":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:630:2977":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:1273:7619":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"13:0:2670":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12278:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:1568:3142":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:4759:689":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:9959:3697":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:8848:21112":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:11178:2328":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6024:6227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12196:4204":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:9807:1418":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:22310:6556":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:2921:2949":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2779:2611":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5845:6130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:1523:7254":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11687:21121":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10468:3993":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:760:3142":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:42933:6859":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:31941:2294":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42438:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22161:6535":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:653:15074":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:719:3838":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3303:7671":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:6987:7831":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8225:3246":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:44133:3233":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:9740:14232":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:2049:7629":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3183:33872":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11214:7117":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:6031:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43194:3294":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:22303:6553":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1545:5582":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7828:5198":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:39222:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10478:3994":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1302:7623":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:39244:2958":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2638:7664":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6616:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:6802:3148":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:40272:6792":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6721:21054":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4003:8918":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7054:5119":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40324:6797":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:44145:3226":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:11582:3286":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:2543:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10822:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:9985:7200":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2254:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13071:4383":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4796:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13040:4378":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:11868:3259":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9972:7509":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40283:6793":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8016:8901":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5996:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:450:20041":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8158:7071":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7651:7602":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2766:4861":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:541:5525":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2826:2966":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:9500:2817":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"9:486:20040":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6433:2184":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7150:3843":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44193:6896":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2326:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7408:6497":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:6077:3715":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:0:2675":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:1895:2832":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5760:21049":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:42718:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:695:7250":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7513:5179":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9521:7192":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:3461:4894":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8011:7441":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:9111:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42748:6858":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5137:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:9861:3688":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:22076:6529":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:45478:6908":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:1501:20121":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7208:2896":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:187:7851":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:44117:3225":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:1075:7202":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:2170:2909":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:21467:9044":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7391:21057":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:41587:127":{"crate_id":2,"path":["core","result","Result","Err"],"kind":"foreign_type"},"1:9984:6831":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"0:474:212":{"crate_id":0,"path":["anyhow","Result"],"kind":"type_alias"},"2:42066:7433":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2880:2941":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39992:6770":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4498:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3744:7676":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:6499:3627":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:507:5465":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:21034:2024":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:9277:3957":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:3032:4890":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:10386:3259":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1733:5697":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12934:4364":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4537:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:7739:7026":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:6017:6226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6467:5026":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:12068:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:20868:32005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4500:8940":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:926:7610":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5249:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:39950:3257":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14324:4760":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13989:4651":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7736:5188":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11023:4052":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5808:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:12697:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10109:7717":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:2900:2944":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4915:8963":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7645:7024":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41351:30895":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12047:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46152:6936":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:481:3802":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3224:7667":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:12890:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10812:7031":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1492:7249":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2915:2948":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3188:30435":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"17:11244:4109":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10340:3992":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4835:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:8239:5173":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:261:3627":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"15:394:20152":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:21172:9048":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4176:8937":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10112:7205":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11201:4060":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10139:21147":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:3264:7669":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7600:3731":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:10146:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:41713:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9531:33929":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:12072:3235":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11215:4065":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9762:33931":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:4138:7267":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1884:1832":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:4749:8928":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10097:7510":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11235:4070":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:2394:8872":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11971:4167":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:5492:3651":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"1:11470:3741":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3936:3651":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11815:4126":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"14:7:7607":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:2033:5125":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:6814:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47365:6997":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40018:6774":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:2690:6490":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5091:7681":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2846:2939":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4047:8920":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4889:4917":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12267:4228":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:40315:6796":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:7855:3896":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8870:7273":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3447:7075":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6843:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5632:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11281:4073":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:2060:7619":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6720:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7621:21058":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14401:4782":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43620:3251":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2284:20161":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12750:4319":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13451:4449":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45408:6905":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12983:4371":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12543:4289":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2428:4847":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6915:4879":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11074:7544":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:40718:2184":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43804:6871":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6753:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:7555:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3649:2285":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10988:27357":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:47707:7004":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2160:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:1102:7252":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:256:7501":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11742:4116":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42952:3315":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:6189:6516":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2576:3692":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:6169:3719":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4376:5764":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:7532:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4051:8921":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:46077:6934":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:47903:7016":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4338:3676":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12007:4172":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:365:3622":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:39928:6766":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43602:3250":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:47747:7008":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2910:2946":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6261:7389":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22258:30879":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10903:7222":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:9944:3692":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4037:8919":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:1831:3142":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14460:4798":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:2035:6476":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:10577:3249":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:4002:2838":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40263:6791":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:44121:3228":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1585:5397":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12810:4327":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4520:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42693:6849":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6513:5027":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2931:2951":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13575:4543":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6714:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7503:4882":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5076:6066":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8238:7264":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:2243:6486":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:47651:7002":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:10619:3296":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41632:2978":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8465:6853":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12066:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11295:4074":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:4478:8939":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40079:8847":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:22220:6542":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9481:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:2618:4855":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43225:3308":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5982:4969":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2305:20187":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:895:2977":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10551:7671":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:8559:7430":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13816:4609":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4274:7642":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11405:7146":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12698:4312":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7541:2180":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10661:7531":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:5390:7682":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:4032:3627":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:202:2837":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:46055:6933":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:587:5549":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10456:7527":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"15:306:7237":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:20853:32005":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:8971:7111":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43286:3305":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46457:6957":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"10:44:5407":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4820:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3240:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:1573:5395":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:579:5544":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4477:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:526:5516":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:494:5494":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:558:7658":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4438:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1464:5393":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:40704:6807":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:11612:2266":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4802:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4783:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:7279:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10964:2323":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:11910:4153":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8167:7606":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:1548:3651":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:22:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:42202:2814":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43176:3295":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"14:221:5338":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12293:4233":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:4712:8939":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:12670:32319":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12111:4189":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:21343:9038":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3735:7629":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4344:4902":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13113:4391":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"8:0:2672":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14499:4807":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8814:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:3797:4897":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4919:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40494:6803":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22849:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9488:33928":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:80:7180":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14514:4808":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3741:7675":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:42484:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:667:7249":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:30209:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8249:8910":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:39886:6762":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:7669:7025":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6473:3723":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4742:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:1826:2838":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1536:5576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:505:3645":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7694:4886":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:39118:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1473:5394":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:39470:25379":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:6651:3627":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:7894:14365":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:7257:33374":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:12063:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:7422:30870":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41649:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3522:8874":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:646:2198":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:39999:14220":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:3720:6476":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:40711:6808":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:5135:3657":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7391:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:943:7613":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42456:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12054:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:9046:7112":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:3830:4898":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2409:2684":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:6812:3149":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:42948:6860":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"14:215:5336":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43204:3300":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:45833:6926":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11358:21241":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:43416:3244":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46230:6938":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:30187:2318":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7029:3727":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4835:4915":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:6980:14361":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"13:226:5385":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9852:21129":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:11534:7676":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1649:5657":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13162:4404":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:41436:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8505:8984":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4751:8930":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2832:2885":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:2970:8157":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:2209:7214":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12172:4200":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:0:2679":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9172:3954":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:43277:3302":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4634:8918":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10575:4003":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:43706:3256":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10167:7718":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4994:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13973:4649":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:41988:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12071:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:5419:3951":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4545:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12737:4317":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8202:1916":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"9:330:5444":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10758:7726":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:29961:8913":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6003:6215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:817:7613":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47613:7001":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:45562:6911":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4965:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6850:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3419:3651":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:41268:6818":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9607:7194":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4613:4909":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:6549:9001":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12024:4174":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40760:6814":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41245:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:41374:6834":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:5994:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47689:7003":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11617:4109":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:7618:6473":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45663:6915":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12842:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:21357:6526":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:43356:3239":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4578:8956":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10714:7220":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:12012:2857":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12830:4328":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4864:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:1737:2928":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3975:8915":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6657:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6456:5025":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12184:4203":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4471:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:1760:2927":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11053:3736":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6784:6388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13792:4607":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3305:7672":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9033:7439":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2905:2945":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"11:805:8815":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:4831:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:33:1459":{"crate_id":2,"path":["core","stringify"],"kind":"macro"},"17:2012:7208":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13546:4532":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:736:5394":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:21128:9047":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:5325:3627":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13024:4376":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:7887:2841":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:2174:5400":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7722:4877":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4789:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:1840:3484":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:22336:8914":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6401:4870":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:42027:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11611:7148":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:5455:7687":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12888:4354":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3846:7677":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:29:455":{"crate_id":2,"path":["core","concat"],"kind":"macro"},"5:2223:33376":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43306:3304":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:261:7502":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2670:4857":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:5648:7550":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2321:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:9498:2816":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1590:5613":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10788:21215":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:10782:7128":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"0:516:1916":{"crate_id":0,"path":["anyhow","Chain"],"kind":"struct"},"11:1611:3624":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:7394:14367":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47113:6995":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4155:6508":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12373:4240":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11547:4105":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:22915:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:40354:6799":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1482:7251":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5322:4925":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40171:1916":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3069:2847":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6037:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10973:7688":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4306:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7067:5122":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4240:7678":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4975:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12452:4274":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8219:2201":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:22783:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:5363:4926":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:7538:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7571:3143":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:2150:21173":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12072:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2547:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11490:4102":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2357:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5872:6150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:45722:6918":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:3441:7224":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3051:2889":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11330:7274":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12598:4298":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:7549:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:6881:14369":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:1118:8156":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:657:2285":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2789:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5838:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40032:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11098:7228":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11555:7677":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:6200:3684":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:7872:7031":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9159:7118":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:2168:5399":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7884:21060":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13667:4579":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2644:4856":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5027:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12136:4191":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:6153:3702":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:8115:5246":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:2837:2925":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4753:8931":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7015:5115":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8286:7077":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:8986:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4807:3712":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1520:5568":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12513:4286":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7792:21059":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12473:4278":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:660:7186":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40727:6809":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:1048:33914":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:22129:6530":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:45863:6927":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3226:7668":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:622:2169":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4725:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9481:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:836:7615":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:8794:21110":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:863:2285":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13826:4610":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:30223:30883":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6386:5018":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12225:4213":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11493:7675":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:614:33936":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12876:4352":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9038:7442":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:41285:6820":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:0:2380":{"crate_id":17,"path":["object"],"kind":"module"},"6:1631:5645":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2784:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:4449:2824":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7664:7698":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:8488:7092":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:736:25078":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10929:4046":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:573:5541":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2495:2810":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:14378:4781":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5787:7436":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9867:3968":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6574:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:8765:21109":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6376:21052":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:44137:3231":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6243:7562":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:39283:2409":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6893:5098":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4812:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:11598:3288":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:1911:16064":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:21205:9043":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:46723:6962":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:47727:7006":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:4197:2822":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11573:4106":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:43466:3245":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:47811:7012":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3020:2030":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:43566:3253":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12531:4287":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10316:3990":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13055:4382":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9959:7199":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:45454:6907":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4552:5849":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4986:4920":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:6011:6511":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2666:2296":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:47788:7011":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10084:7204":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44417:2894":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12645:4303":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:589:8805":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:40049:30870":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10334:7687":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:2999:2412":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43214:3301":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2499:7662":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:40254:6790":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1717:5692":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:0:2680":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:3167:2849":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4392:7680":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1776:3142":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:7431:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6165:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9288:3484":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5776:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9176:7715":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:44205:14446":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5746:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3178:5396":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43296:3303":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5891:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8996:2185":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5995:4828":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:5961:3657":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:4320:7679":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:45885:6928":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:12123:14179":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:45933:6929":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:9494:2815":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:21436:2024":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:12055:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:41487:2287":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11175:7105":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:22023:6528":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43520:3248":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:1641:2874":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4585:4908":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22585:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7247:3639":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12015:7444":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:6817:9032":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12484:4281":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11151:7230":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2794:2665":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1663:5668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5440:7686":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3191:30434":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:9484:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13228:4411":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8854:7106":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7768:4875":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13101:4389":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:6:700":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:3245:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11817:3262":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7608:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8397:8971":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1503:7250":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10534:4000":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5673:4873":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:871:5393":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:20898:32175":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:9564:7193":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10214:7206":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5814:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:39938:6767":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13148:4403":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6650:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43833:6880":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10591:3734":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7284:6840":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46031:6932":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:9350:3959":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:4393:3651":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13244:4413":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:853:2978":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:897:2838":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:547:5528":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2862:2938":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8826:7104":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:4164:3651":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5578:8989":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1924:2583":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11000:4051":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:44153:6893":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:6680:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:30785:3815":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21441:9035":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:40364:6800":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:45500:6909":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:47826:7013":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13274:4076":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:641:2196":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:681:3829":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13554:4535":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:2131:3645":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:39877:6761":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:8558:8975":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10107:7278":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"0:347:1839":{"crate_id":0,"path":["anyhow","anyhow"],"kind":"macro"},"2:1751:6504":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12437:4269":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:6627:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8364:7080":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14033:4665":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44367:7655":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:5776:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4403:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:538:3812":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:44375:6899":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40193:6780":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13632:4578":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4160:7268":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9003:27359":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13949:4640":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39898:30872":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5753:7689":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6687:5063":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:45532:6910":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:39158:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8121:7705":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:5905:4960":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11316:4078":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:483:3704":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:11833:3264":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:1922:2891":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:21258:9039":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:41752:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:1538:7625":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:364:7657":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:8981:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1595:5615":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13567:4542":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:10832:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13876:4627":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:521:25080":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5939:4966":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3515:2838":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:10136:2024":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42428:6842":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6531:5035":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12465:4276":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:21460:2024":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8212:6803":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39914:6765":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:4641:4910":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42493:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3945:2263":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4497:4905":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:932:8815":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:21291:9034":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:20883:32177":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:12059:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:4709:8965":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:97:5386":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13890:4629":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:2339:4838":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:582:3947":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6145:6256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:6616:3724":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2876:2943":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:8072:5240":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11006:7106":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11473:3917":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5404:7684":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44388:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:8205:21061":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4448:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6634:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:45740:6919":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:1011:3627":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11064:3737":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:46693:6961":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10088:7260":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:6742:5076":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7462:5175":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12086:4184":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4806:4914":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11623:30165":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:21794:32003":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6697:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8342:6321":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3266:7670":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:7582:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:515:3807":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12790:4324":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8338:7711":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22237:30887":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13966:4648":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:727:3841":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2472:4849":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:39871:3256":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4485:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2534:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:12722:7646":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:4644:6332":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:488:5491":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22816:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:7568:4885":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:123:14720":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:482:5488":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:798:7610":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7573:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44125:3230":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9711:33926":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42511:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:31995:2406":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:7281:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8884:7107":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6352:5012":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:285:5387":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5661:4933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6425:5022":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8862:2977":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1603:5620":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:43690:3254":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4826:5939":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6545:5037":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5816:4950":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43715:3257":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1564:2838":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11998:7735":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6041:21051":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4986:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3315:4893":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:10498:3244":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3989:8916":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:12052:2860":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4370:5763":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12237:4216":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13422:4429":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:1044:5125":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7318:5156":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:536:4826":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:690:3832":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:41830:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4628:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2049:7617":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43997:6889":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:3800:3142":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14346:4766":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:43925:6883":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12422:4265":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:8050:5239":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44129:3229":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4618:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8006:7704":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43662:3243":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7523:5180":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4731:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14173:4703":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10420:3895":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7492:5176":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40518:6805":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:10351:8165":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:14118:4688":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5899:6157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2788:4862":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14024:4662":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:43502:3249":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:1561:2285":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:30387:30893":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:31981:5173":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:10507:3998":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1696:5684":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3322:2888":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11710:4076":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10603:4006":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40122:7650":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:12065:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:922:7250":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43987:6885":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2598:7663":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7567:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:40142:3306":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13802:4608":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:39178:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12067:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:14163:4698":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:2744:4860":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:7584:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6944:33920":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:955:7616":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11232:7137":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:1058:7617":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12123:4190":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:9496:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7582:5182":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:6364:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3348:8898":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:45685:6916":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1673:5674":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4697:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7259:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8293:7078":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4570:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:5317:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:3232:7223":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:399:7242":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6346:7405":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7882:7032":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9933:7507":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1590:5398":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1506:5563":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2782:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:10777:7126":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3594:2978":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:3065:3850":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4889:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3185:28454":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:6602:8161":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:1779:7258":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10012:3985":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2927:2950":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:3764:4896":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:4422:2182":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6204:7390":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:4053:4901":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:47841:7014":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:46569:6959":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6256:3720":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11070:3738":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:43681:3258":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11381:4085":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6877:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11719:21122":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4756:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8320:7079":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10440:7521":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12056:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8903:7108":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21906:9037":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13914:4634":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14076:4679":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:43819:6877":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:22882:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:21335:2024":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4687:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9208:7122":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11788:4120":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:12064:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10520:3999":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"0:477:107":{"crate_id":0,"path":["anyhow","Context"],"kind":"trait"},"16:3888:4899":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8298:8938":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"9:52:7410":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11886:4139":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10962:4049":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:45584:6912":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:2406:4846":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2944:2954":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7342:33923":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:2537:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14042:4666":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:1027:20120":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7287:6496":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3285:2887":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44010:3237":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2384:8867":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:7435:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43448:3247":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:3565:7225":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:39200:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11367:4082":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:2194:5403":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:46907:6964":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43962:6884":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:532:5519":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5060:7681":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2893:2947":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13710:4586":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6598:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13693:4585":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10842:7072":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:30757:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4382:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12658:4306":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11306:4076":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:119:3618":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:1068:7621":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10443:7271":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:21690:9049":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:1067:7619":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:9372:3960":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46757:6963":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9790:33927":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10410:7518":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7304:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3014:2955":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1781:7259":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43368:2854":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43782:14185":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:20900:32178":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"9:177:7420":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7474:7594":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:11448:21119":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:562:5536":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14083:4680":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4415:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5988:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3251:2961":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1817:7260":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:5619:3147":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47864:7015":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:434:3903":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2939:2953":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6546:7694":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9912:7505":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:554:5531":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2574:4853":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13202:4409":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:45432:6906":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:2933:20188":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4393:3677":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"14:31:7607":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:41504:2978":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2884:2940":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12049:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:44430:6903":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:6792:3157":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10430:7520":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:968:5125":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11062:7226":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5046:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2494:2024":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7613:7601":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:7526:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6569:4876":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46487:6958":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14090:4681":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:6572:2285":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}