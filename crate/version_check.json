{"root":"0:0:2047","crate_version":"0.9.4","includes_private":false,"index":{"2:12383:30303":{"id":"2:12383:30303","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12382:30302"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43708:7025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2566-0:143:1825":{"id":"b:2:2566-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:1920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12434:31518":{"id":"2:12434:31518","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::matches":"2:12431:2526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43647:7021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2197":{"id":"0:12:2197","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1838":{"id":"0:27:1838","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12365:338":{"id":"2:12365:338","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12366:337","`u8`":"1:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12371:24367":{"id":"2:12371:24367","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12440:31520":{"id":"2:12440:31520","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::match_indices":"2:12437:31519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43593:7018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:13212":{"id":"5:5518:13212","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2237":{"id":"0:18:2237","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:652"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2570-0:143:1825":{"id":"b:2:2570-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:652"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2339":{"id":"0:35:2339","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:710":{"id":"0:57:710","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"2:2360:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:1822":{"id":"0:75:1822","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1823","`Version::read()`":"0:6:1838","`Channel`":"0:129:1824","crate":"0:0:2047","`Channel::read()`":"0:27:1838","`Date::read()`":"0:42:1838","`Date`":"0:143:1825"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:2776":{"id":"2:12396:2776","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41465:194","prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:24402":{"id":"2:12410:24402","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split":"2:12404:1787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43443:6928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:129:1824":{"id":"b:5:680-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2795","5:683:2796","5:684:2797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12385:31513":{"id":"2:12385:31513","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43689:7023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12466:1796":{"id":"2:12466:1796","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:25529":{"id":"2:12477:25529","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:7677":{"id":"2:12481:7677","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4560:7677"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43733:6945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1823":{"id":"0:93:1823","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:2832:2576-0:93:1823","a:2:2775:240-0:93:1823","a:2:2792:249-0:93:1823","a:2:8561:7863-0:93:1823","a:2:8560:7685-0:93:1823","b:2:2576-0:93:1823","b:2:2260-0:93:1823","b:2:2566-0:93:1823","b:2:3411-0:93:1823","b:2:2570-0:93:1823","b:2:2263-0:93:1823","b:2:2581-0:93:1823","b:5:5778-0:93:1823","b:5:680-0:93:1823","0:103","0:100","0:99","0:105","0:102","0:97","0:96","0:107","0:20","0:22"]}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:450":{"id":"0:142:450","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12367:24365":{"id":"2:12367:24365","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12400:2737":{"id":"2:12400:2737","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41465:194","prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1828":{"id":"0:45:1828","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:1836":{"id":"0:76:1836","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:457":{"id":"0:160:457","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30784:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2580:1579":{"id":"2:2580:1579","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2785:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2576-0:143:1825":{"id":"b:2:2576-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12355:864":{"id":"2:12355:864","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:31512":{"id":"2:12376:31512","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12057:1495","crate::ops::IndexMut":"2:3076:7711","str::slice_unchecked":"2:12375:31511"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:93:1823":{"id":"a:2:2775:240-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8561:7863-0:129:1824":{"id":"a:2:8561:7863-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8561:7863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61-0:24:1777":{"id":"0:61-0:24:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1777","glob":true}}},"2:12358:31508":{"id":"2:12358:31508","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:129:1824":{"id":"b:2:2576-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12404:1787":{"id":"2:12404:1787","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split_whitespace":"2:12382:30302","str::rsplit":"2:12410:24402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43425:6925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:31515":{"id":"2:12416:31515","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12056:13093","str::split":"2:12404:1787","prim@char":"1:12051:446","str::split_terminator":"2:12413:31514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43493:7012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:31517":{"id":"2:12428:31517","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5778-0:143:1825":{"id":"b:5:5778-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12431:2526":{"id":"2:12431:2526","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatches":"2:12434:31518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43629:7020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:143:1825":{"id":"b:2:2263-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:24029"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:652":{"id":"0:98:652","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:457":{"id":"0:108:457","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30784:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:249-0:129:1824":{"id":"a:2:2792:249-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2792:249-0:143:1825":{"id":"a:2:2792:249-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:1778":{"id":"0:39:1778","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143:1825"],"is_stripped":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:682:2795":{"id":"5:682:2795","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:62-0:39:1778":{"id":"0:62-0:39:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1778","glob":true}}},"2:12381:3988":{"id":"2:12381:3988","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43411:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:1794":{"id":"2:12469:1794","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12472:1828":{"id":"2:12472:1828","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12017:131","`FromStr`":"2:12016:7874"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12016:7874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12016:7874","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12475:25526":{"id":"2:12475:25526","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39497:24346","Self::is_ascii":"2:12474:25525"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39497:24346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:25530":{"id":"2:12478:25530","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:32186":{"id":"5:5532:32186","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:1795":{"id":"2:12449:1795","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:25661":{"id":"5:5536:25661","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12478:25530"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2792:249-0:93:1823":{"id":"a:2:2792:249-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2260-0:129:1824":{"id":"b:2:2260-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2366:204","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2786:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12479:31526":{"id":"2:12479:31526","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4559:31526"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43724:6949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8561:7863-0:143:1825":{"id":"a:2:8561:7863-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8561:7863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5533:32187":{"id":"5:5533:32187","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2583","`String`":"5:7475:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2583","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:32183","5:5518:13212","5:5521:32184","5:5524:32185","5:5532:32186","5:5533:32187","5:5534:7779","5:5535:25660","5:5536:25661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2572:736":{"id":"2:2572:736","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:129:1824":{"id":"b:2:3411-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:2222":{"id":"0:50:2222","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1851":{"id":"0:78:1851","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136:652":{"id":"0:136:652","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:7027":{"id":"2:12379:7027","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43395:7005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:652"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:710":{"id":"0:23:710","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1838","0:30:1828","0:32:1886","0:33:2331","0:34:2335","0:35:2339","0:36:2342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2263-0:129:1824":{"id":"b:2:2263-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:24029"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:450":{"id":"0:156:450","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:31507":{"id":"2:12357:31507","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:24391":{"id":"2:12377:24391","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12378:24392"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:1783":{"id":"2:12384:1783","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43679:7022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1828":{"id":"0:9:1828","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12437:31519":{"id":"2:12437:31519","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12056:13093","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatch_indices":"2:12440:31520"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43575:7017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1867":{"id":"0:80:1867","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:2796":{"id":"5:683:2796","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2230":{"id":"0:52:2230","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2576-0:143:1825":{"id":"a:2:2832:2576-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2576","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2260-0:143:1825":{"id":"b:2:2260-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12363:24347":{"id":"2:12363:24347","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11616:1814"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:31522":{"id":"2:12447:31522","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:93:1823":{"id":"b:2:3411-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12382:30302":{"id":"2:12382:30302","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12383:30303"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43699:7024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2576-0:93:1823":{"id":"a:2:2832:2576-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2576","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12386:30301":{"id":"2:12386:30301","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43717:7026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8560:7685-0:143:1825":{"id":"a:2:8560:7685-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8560:7685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12460:24407":{"id":"2:12460:24407","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:25525":{"id":"2:12474:25525","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:7779":{"id":"5:5534:7779","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1859":{"id":"0:79:1859","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1838":{"id":"0:6:1838","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:129:1824":{"id":"b:2:2566-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:1920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2047":{"id":"0:0:2047","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1823","`is_max_version`":"0:80:1867","`is_exact_version`":"0:81:1875","`is_max_date`":"0:77:1844","`is_exact_date`":"0:78:1851","`triple()`":"0:75:1822","`Date`":"0:143:1825","`Channel`":"0:129:1824"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1822","0:76:1836","0:77:1844","0:78:1851","0:79:1859","0:80:1867","0:81:1875","0:82:1885","0:84:1899","0:60-0:3:1671","0:61-0:24:1777","0:62-0:39:1778"],"is_stripped":false}}},"b:5:5778-0:93:1823":{"id":"b:5:5778-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:84:1899":{"id":"0:84:1899","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1885"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:1800":{"id":"2:12419:1800","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093","str::rsplitn":"2:12422:24405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43529:7014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2569:1920":{"id":"2:2569:1920","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:31516":{"id":"2:12425:31516","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354":{"id":"2:12354","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12355:864","2:12356:2738","2:12357:31507","2:12358:31508","2:12360:31509","2:12363:24347","2:12364:31510","2:12365:338","2:12366:337","2:12367:24365","2:12369:24366","2:12371:24367","2:12373:24368","2:12375:31511","2:12376:31512","2:12377:24391","2:12378:24392","2:12379:7027","2:12380:7037","2:12381:3988","2:12382:30302","2:12383:30303","2:12384:1783","2:12385:31513","2:12386:30301","2:12387:2314","2:12390:1914","2:12393:1791","2:12396:2776","2:12400:2737","2:12404:1787","2:12407:24400","2:12410:24402","2:12413:31514","2:12416:31515","2:12419:1800","2:12422:24405","2:12425:31516","2:12428:31517","2:12431:2526","2:12434:31518","2:12437:31519","2:12440:31520","2:12443:1786","2:12445:31521","2:12447:31522","2:12449:1795","2:12450:1793","2:12451:31523","2:12454:31524","2:12457:24184","2:12460:24407","2:12463:31525","2:12466:1796","2:12469:1794","2:12472:1828","2:12474:25525","2:12475:25526","2:12476:25528","2:12477:25529","2:12478:25530","2:12479:31526","2:12481:7677","2:12482:31527"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13:2209":{"id":"0:13:2209","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:652":{"id":"0:150:652","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2579:132":{"id":"2:2579:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:3413:1592":{"id":"2:3413:1592","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39310:4594","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:450":{"id":"0:104:450","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:31509":{"id":"2:12360:31509","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12358:31508"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:143:1825":{"id":"b:5:680-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2795","5:683:2796","5:684:2797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:38:710":{"id":"0:38:710","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1777":{"id":"0:24:1777","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:129:1824"],"is_stripped":true}}},"0:81:1875":{"id":"0:81:1875","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1885":{"id":"0:82:1885","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1899"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:129:1824":{"id":"b:2:2581-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5780:1554":{"id":"5:5780:1554","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2368":{"id":"0:48:2368","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8561:7863-0:93:1823":{"id":"a:2:8561:7863-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8561:7863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2585:1577":{"id":"2:2585:1577","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2832:2576-0:129:1824":{"id":"a:2:2832:2576-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2832:2576","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8560:7685-0:129:1824":{"id":"a:2:8560:7685-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8560:7685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:1844":{"id":"0:77:1844","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1671":{"id":"0:60-0:3:1671","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1671","glob":true}}},"2:12366:337":{"id":"2:12366:337","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:1091":{"id":"0:158:1091","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30784:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:2738":{"id":"2:12356:2738","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:24392":{"id":"2:12378:24392","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12377:24391"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:31514":{"id":"2:12413:31514","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12056:13093","str::split":"2:12404:1787","prim@char":"1:12051:446","`DoubleEndedIterator`":"2:7476:125","str::rsplit_terminator":"2:12416:31515"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43475:7011","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:1786":{"id":"2:12443:1786","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:1671":{"id":"0:3:1671","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1823"],"is_stripped":true}}},"0:14:2222":{"id":"0:14:2222","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1886":{"id":"0:32:1886","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32183":{"id":"5:5517:32183","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2583","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2583","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:4238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12454:31524":{"id":"2:12454:31524","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5778-0:129:1824":{"id":"b:5:5778-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143:1825":{"id":"0:143:1825","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:2832:2576-0:143:1825","a:2:2775:240-0:143:1825","a:2:2792:249-0:143:1825","a:2:8561:7863-0:143:1825","a:2:8560:7685-0:143:1825","b:2:2576-0:143:1825","b:2:2260-0:143:1825","b:2:2566-0:143:1825","b:2:3411-0:143:1825","b:2:2570-0:143:1825","b:2:2263-0:143:1825","b:2:2581-0:143:1825","b:5:5778-0:143:1825","b:5:680-0:143:1825","0:146","0:157","0:149","0:152","0:151","0:148","0:154","0:56","0:159","0:155"]}}},"b:2:2570-0:129:1824":{"id":"b:2:2570-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12482:31527":{"id":"2:12482:31527","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4557:31527"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43742:6948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2335":{"id":"0:34:2335","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2576-0:93:1823":{"id":"b:2:2576-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2579:132","2:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12364:31510":{"id":"2:12364:31510","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2570-0:93:1823":{"id":"b:2:2570-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12387:2314":{"id":"2:12387:2314","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:31511":{"id":"2:12375:31511","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12057:1495","str::slice_mut_unchecked":"2:12376:31512","crate::ops::Index":"2:3072:7710"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:24368":{"id":"2:12373:24368","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16:2230":{"id":"0:16:2230","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2797":{"id":"5:684:2797","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2237":{"id":"0:54:2237","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:1914":{"id":"2:12390:1914","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:24405":{"id":"2:12422:24405","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12051:446","str::splitn":"2:12419:1800","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43547:7015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2263-0:93:1823":{"id":"b:2:2263-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2265:24029"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5521:32184":{"id":"5:5521:32184","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:31523":{"id":"2:12451:31523","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12081:13090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:32185":{"id":"5:5524:32185","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8560:7685-0:93:1823":{"id":"a:2:8560:7685-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8560:7685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2584:132":{"id":"2:2584:132","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31968:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:42:1838":{"id":"0:42:1838","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:710":{"id":"0:147:710","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:7037":{"id":"2:12380:7037","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43401:7006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"2:2360:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12445:31521":{"id":"2:12445:31521","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:24366":{"id":"2:12369:24366","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2581-0:93:1823":{"id":"b:2:2581-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2262:2513":{"id":"2:2262:2513","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1838","0:9:1828","0:12:2197","0:13:2209","0:14:2222","0:16:2230","0:18:2237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:1824":{"id":"0:129:1824","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:2832:2576-0:129:1824","a:2:2775:240-0:129:1824","a:2:2792:249-0:129:1824","a:2:8561:7863-0:129:1824","a:2:8560:7685-0:129:1824","b:2:2576-0:129:1824","b:2:2260-0:129:1824","b:2:2566-0:129:1824","b:2:3411-0:129:1824","b:2:2570-0:129:1824","b:2:2263-0:129:1824","b:2:2581-0:129:1824","b:5:5778-0:129:1824","b:5:680-0:129:1824","0:140","0:132","0:137","0:134","0:141","0:37","0:135","0:138"]}}},"b:5:680-0:93:1823":{"id":"b:5:680-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2795","5:683:2796","5:684:2797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:1828":{"id":"0:30:1828","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2260-0:93:1823":{"id":"b:2:2260-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2262:2513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2581-0:143:1825":{"id":"b:2:2581-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:132","2:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12450:1793":{"id":"2:12450:1793","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12463:31525":{"id":"2:12463:31525","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1091":{"id":"0:106:1091","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30784:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2342":{"id":"0:36:2342","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:143:1825":{"id":"a:2:2775:240-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5535:25660":{"id":"5:5535:25660","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12477:25529"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:24400":{"id":"2:12407:24400","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11872:6927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:710":{"id":"0:21:710","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:93:1823":{"id":"b:2:2566-0:93:1823","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2569:1920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:2331":{"id":"0:33:2331","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3411-0:143:1825":{"id":"b:2:3411-0:143:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2782:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2265:24029":{"id":"2:2265:24029","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2775:240-0:129:1824":{"id":"a:2:2775:240-0:129:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:143:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1838","0:45:1828","0:48:2368","0:50:2222","0:52:2230","0:54:2237"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2366:204","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:710":{"id":"0:133:710","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12393:1791":{"id":"2:12393:1791","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12076:13091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:24184":{"id":"2:12457:24184","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12056:13093"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12061:7515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12476:25528":{"id":"2:12476:25528","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43493:7012":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5661:6823":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11886:4898":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10929:4861":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5070:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6156:6828":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14460:5554":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:11182:13087":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12945:5124":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:7897:13198":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12737:5075":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:42979:7004":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4706:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8878:2743":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4415:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40787:6994":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:5384:19961":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:10298:2800":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9933:7349":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:4787:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:12674:30420":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10788:20132":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11845:4889":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4526:6021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7771:7527":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:5743:6825":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9070:3402":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:21223:13240":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:5753:7568":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7247:3163":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7792:19973":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1631:5829":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10278:7364":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11472:3278":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:9502:2814":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:41667:2743":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9137:3406":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40342:6976":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7054:6864":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:42465:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:7529:2581":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12531:5045":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11374:4472":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2428:3469":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:2168:5654":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10351:26872":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:44180:4262":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47767:6691":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10628:6798":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:8050:3820":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4789:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3243:255":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:32015:7528":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2670:3479":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43647:7021":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"0:78:1851":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"17:11367:4878":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:45633:4286":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21471:7937":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5403:3402":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8286:7067":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:2359:3466":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4826:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43401:7006":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:45964:4302":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2546:259":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:43742:6948":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12830:5086":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5886:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13259:5175":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6572:2743":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:2141:6903":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9086:3403":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22328:4011":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4047:7800":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41818:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11261:6810":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4485:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:42745:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:853:2801":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12069:1598":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:2962:6659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21209:7936":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:9460:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:9208:6708":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5404:2547":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13778:5360":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:7257:32664":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44152:7055":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9985:7353":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:657:2743":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3522:2571":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:23399:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12496:5041":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:4351:2825":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1858:6901":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4973:7855":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2865:13220":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7544:6874":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2409:1972":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4438:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13487:5238":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["core"],"kind":"module"},"18:736:23998":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3264:7555":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:10347:6925":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11048:7398":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9242:3409":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6879:3695":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8249:7788":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2896:3716":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:12065:789":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:43717:7026":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:7523:6873":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:1520:5752":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5634:6819":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7568:3507":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:207:3149":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12237:4975":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3273:31184":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:31968:2558":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9660:32830":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:14401:5538":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:1561:2743":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:4344:3521":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:3447:1974":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3669:3151":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"9:486:18948":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46040:4304":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:12282:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6602:7892":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:10962:2968":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42483:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:7213:3251":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9701:7343":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:43278:6933":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44363:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13071:5141":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:538:4788":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6944:32820":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4910:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:8594:20011":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:1075:7329":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:4834:846":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:3226:7554":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:760:3193":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4652:6050":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:9442:2572":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:1638:5833":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4053:3520":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:3178:6899":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:1760:4591":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4742:6081":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13202:5167":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4392:7565":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14499:5563":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:582:3399":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4719:3530":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:41523:2800":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:793:7492":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7408:3983":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:7538:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:504:7328":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7503:3504":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11226:6808":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43291:7535":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:3888:3518":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:47758:6690":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8149:3757":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:3076:7711":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:609:7319":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:5648:7414":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:43203:6929":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13010:5131":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6697:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:32004:7527":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"0:82:1885":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"2:1671:1146":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4478:7823":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:4268:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40169:6933":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:47474:4368":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5575:2551":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8932:7894":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1118:32680":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10990:26170":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:46284:4312":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"7:32:18935":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:39965:4223":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:39497:24346":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11332:2565":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1696:5868":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5060:7566":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41974:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:9896:20045":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"14:202:13106":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12810:5085":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6616:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:6014:6915":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13710:5343":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8465:6681":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1302:7245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:39249:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40367:3730":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:149:3133":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6318:3627":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6145:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5929:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4330:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:8825:20026":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6467:3639":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:21361:4599":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11586:3441":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"3:0:471":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42720:6997":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1649:5841":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:2180:5656":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12970:5127":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:47747:6689":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13162:5162":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1536:5760":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7855:3348":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:1103:7491":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10107:7607":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:42775:7002":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12698:5070":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:4002:3174":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13148:5161":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4527:3525":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11389:7411":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:9172:30786":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39993:6949":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6180:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:7447:2582":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4994:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12959:5126":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6844:3690":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"14:221:5606":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:47144:4365":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"14:0:2421":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9945:4813":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:884:6897":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8312:7586":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2160:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:907:3193":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4545:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:7304:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42455:6672":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"15:306:19056":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11557:7562":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2891:13223":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"15:394:19066":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:22314:4010":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14110:5444":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12685:5069":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6960:7454":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10036:4815":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7768:3497":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:45753:4291":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:12050:990":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:526:5700":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8244:7588":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:44436:4273":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7934:30787":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:1464:6896":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13451:5207":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8574:4449":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8996:7595":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:10397:7368":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9959:7351":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:42960:6685":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:1492:7478":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6332:3490":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:8560:7685":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3305:7558":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:14308:5513":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:6304:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8169:2560":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7782:6875":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2918:3720":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:9749:4598":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12645:5062":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7744:7065":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:2574:3475":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:11586:13308":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40754:6991":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44419:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:2219:1838":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43231:6932":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3217:32672":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11234:4468":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:622:7256":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9277:3410":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:4234:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45531:4282":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:707:6774":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12007:4931":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5830:3564":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:629:7246":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12075:1206":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"11:285:6891":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2930:13227":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6569:3498":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:9500:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:8097:6880":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12473:5036":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6829:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:32116:2724":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5787:7572":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6076:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11281:4872":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12658:5065":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:9038:7601":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6582:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12070:1599":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1288:7487":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:96:23988":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10165:20063":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12452:5032":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11066:3274":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11710:4873":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:0:2415":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:6902:3263":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13422:5187":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:653:13983":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9060:26155":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5939:3581":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13113:5149":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1557:5775":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7137:28839":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:41659:2801":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:1590:5797":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3391:6993":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11201:6800":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10447:7375":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:21040:7933":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:6795:2749":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:8713:20023":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:41779:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:4023:7510":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:8990:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:541:5709":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12184:4962":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:39130:4086":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1842:2964":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10814:6700":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:7828:3784":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6433:6990":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"9:330:5664":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10661:7383":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44224:4265":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4666:6051":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10197:7358":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6574:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40731:6988":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11162:4868":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:39913:4219":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6805:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:9504:2815":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6901:3500":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12267:4987":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2201:3982":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:40211:6958":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4448:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4628:6048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1673:5858":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6784:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10494:6786":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2783:2716":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10789:7066":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3233:13232":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:47738:6688":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1545:5766":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:8659:20009":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"9:0:2417":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:39941:4222":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14156:5453":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5646:7063":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12123:4949":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14126:5447":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:507:3962":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:276:2583":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:749:3174":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:41591:13301":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:8794:20025":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41463:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:871:6896":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:40779:6669":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:7153:3757":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10588:6794":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:2785:247":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1840:2963":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4277:7249":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14269:5498":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:695:7479":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:955:7486":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10862:26169":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11327:6814":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:532:5703":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:579:5728":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11448:20034":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40381:6980":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:644:4783":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3744:7561":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:1548:3180":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2562:3244":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:22189:3997":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:638:7541":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:40760:6993":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3741:7560":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5909:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:5424:2548":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:2186:32801":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10547:6791":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"9:450:18949":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6814:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12225:4972":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4915:7848":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:45916:4301":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:42015:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10410:7369":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:21339:7755":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:727:4806":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10548:7555":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:39955:6947":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8862:2800":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40745:6990":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:4500:7824":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6753:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:39904:6946":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40092:4226":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2810:3485":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47778:6692":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43547:7015":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:30236:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:595:5738":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9790:32828":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13101:5147":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:0:1487":{"crate_id":1,"path":["std"],"kind":"module"},"1:9033:7600":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:4774:3532":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:3543":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12846:5091":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43323:6935":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:494:5679":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1568:3193":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:11108:7523":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13546:5290":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"13:226:5653":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:41608:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8320:4431":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10214:7361":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"15:288:19055":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7015:3699":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1764:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46754:4332":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6045:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10126:6782":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:11272:6811":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44057:7051":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:30214:6666":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:1737:13250":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1911:14974":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:943:7483":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10420:3347":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43304:6934":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14355:5524":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:46788:4333":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9762:32829":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:4949:3538":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:41449:4248":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4168:7819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8219:3411":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:2368:7741":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:690:6771":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10595:7015":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41378:30783":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11098:7405":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:393:18950":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:9972:7352":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:12016:7874":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:47536:4369":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:4320:7564":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:40319:6974":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3915:3519":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:3764:3515":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5905:3575":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40545:6986":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12437:5028":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6513:6836":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43152:7532":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:12949:7697":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:488:5677":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2744:3482":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6583:6846":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:42229:2816":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:39044:2804":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13567:5300":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:2131:3171":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47720:4373":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44164:7058":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10637:6799":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40332:6975":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:1184:7330":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:11616:1814":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:4032:3151":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4570:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4830:7808":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5995:3585":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6545:3641":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:45694:4288":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39985:6945":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4293:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9081:4459":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:15:2238":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12049:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13973:5406":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:8281:3827":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4059:7803":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4680:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7532:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4712:7823":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:21694:7942":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3513:27504":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4422:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1575:5785":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3020:2579":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:8895:20028":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"10:44:5661":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42215:2808":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43679:7022":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10507:6788":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:2526:3473":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:3494":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:0:2423":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:22919:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6714:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:1121:7245":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10545:7553":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:12054:1107":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4940:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:7618:6657":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10292:4820":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13244:5171":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8415:4443":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4:1070":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12465:5034":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5814:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:5249:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10366:7365":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:4058:13057":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:4158:4595":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12888:5112":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7271:2743":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:12076:13091":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7422:30785":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:80:23987":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:4405:2826":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43383:4256":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:30220:4018":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:10784:7072":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11719:20037":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40059:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6024:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4240:7563":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12543:5047":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11253:155":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12062:4939":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"0:81:1875":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"2:4035:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:5369:13078":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12280:4991":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40249:6964":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:20885:30030":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:40220:6960":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:4396:3213":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4391:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13135:5160":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:536:4576":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:12033:26178":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:12055:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10616:6796":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:630:2800":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:358:7538":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:39145:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9102:3404":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:4808:31022":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5435:5585":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:614:32837":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:47872:6698":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:43952:7041":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40000:13158":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:1663:5852":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1595:5799":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1895:7257":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13758:5352":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7381:24258":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:20872:29597":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1702:5869":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9617:32835":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:25:649":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:364:7539":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46183:4309":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:39324:6668":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1495:5742":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:4452:2827":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:4985:3180":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:3232:7336":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:8134:6886":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3720:4389":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10139:20062":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1482:7492":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2722:3481":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:47793:6693":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:44355:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:44003:13105":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:949:7485":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40267:6967":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:2960:32679":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13922:5394":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10186:6784":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4766:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2782:2575":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11971:4926":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2035:4389":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"14:160:7237":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6792:3687":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:895:2800":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7530:3399":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:6437:7574":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:7287:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8971:4455":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:1779:2947":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:30250:29989":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4003:7798":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:6320:8018":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10750:4827":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:667:7478":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14420:5543":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1690:5865":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4608:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:986:7487":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:7890:2802":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5010:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1681:5859":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2942:13230":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:1102:32723":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10853:26164":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7067:3700":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10167:7266":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:10581:7014":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:9498:2817":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:43529:7014":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"10:36:5660":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4889:3536":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:32008:3758":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:3565:7338":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2938:13229":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10980:4820":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9488:7577":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:7520:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2450:3470":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11326:7078":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1058:7487":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6720:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5712:3550":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9886:7346":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6041:19965":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"0:77:1844":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6968:19969":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5578:2553":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:491:6764":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12068:1601":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12043:4938":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:11872:6927":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40189:7531":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:42560:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13554:5293":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6735:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40064:4225":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11235:6809":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:123:13627":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:6425:3635":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22133:3991":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4520:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2690:4581":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5760:7571":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:113:23989":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8225:6925":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43689:7023":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2908:13225":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7644:7755":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12067:786":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:6983:13194":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14118:5445":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5798:3558":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45716:4289":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:11837:7019":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2394:7751":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7722:3499":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:39925:29991":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:7514:6634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:766:23999":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4856:6135":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:573:5725":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1506:5747":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10672:7384":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6401:3492":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13174:5163":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10802:4461":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:43369:4253":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10440:7372":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2548:3474":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13906:5390":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:5509:2550":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8903:4452":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1012:7489":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:805:7696":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13228:5169":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"9:237:6681":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:45593:4284":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:41701:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43708:7025":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:5455:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8557:2800":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:1838:6898":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11381:4881":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:11835:3282":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:97:6890":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6893:5588":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43313:7536":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14316:5516":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:1501:19031":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:1817:2957":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3594:2801":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:5961:3188":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3939:3180":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:4074:2801":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8121:2559":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:1573:6898":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2380:3467":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10738:7393":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10520:6789":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41329:7789":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9455:32833":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:3330:3193":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2382:7745":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:2881:3488":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47842:6696":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:14090:5438":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2924:3721":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:7893:2803":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12293:4992":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7690:3272":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5696:19962":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:30308:29980":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:11197:4262":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2883:13222":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7862:6876":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:40258:6966":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11309:3276":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5746:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14221:5497":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:21341:7929":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4897:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:3325:13059":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:4426:3182":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:6169:3255":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:6203:3220":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6473:3260":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4552:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:723:6896":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10370:7366":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11401:7081":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9912:7347":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:12058:1582":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:0:2425":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4783:6104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:22589:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"0:84:1899":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"8:0:2416":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:4745:3531":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:507:4783":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14173:5460":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4465:5989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6279:3623":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2832:2576":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46108:4307":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:41539:2743":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:40521:6984":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:1751:6662":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10383:7367":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:5994:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:22216:6665":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9744:13167":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10534:6790":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:918:7478":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4731:6076":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:9490:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41401:4245":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12934:5122":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12098:4946":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7308:2743":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6165:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:534:3241":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5574:3491":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1781:2948":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7751:2967":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8202:6957":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11295:6812":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:4417:3522":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:2033:6868":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:45864:4299":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3939:7794":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:2498:13163":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4957:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2923:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:660:7320":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:42054:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:10334:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10726:7392":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11761:3453":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:755:6781":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7621:19972":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6843:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:21440:7755":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:44024:7047":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44406:4270":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22241:29995":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2384:7746":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8304:7589":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6680:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2835:2721":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10443:2554":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5996:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44037:4259":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:7555:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13966:5405":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:5619:3191":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:5846:3174":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:403:32803":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11359:4471":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:6987:7265":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:3013:2577":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6386:3632":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1527:5755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11473:3369":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:878:3159":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:4272:7248":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:14478:5560":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:836:7485":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11872:4897":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:7237:3174":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12554:5048":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:21132:7940":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:12062:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6003:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1826:3174":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5053:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8505:7873":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:39161:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:9492:2809":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:2406:3468":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7694:3508":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:44398:4268":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10591:3272":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8826:2555":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:14469:5558":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:8562:7514":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46010:4303":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5976:6388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2472:3471":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:7549:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4138:28842":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7912:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4403:5960":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4462:3523":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:474:5669":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:41676:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7534:3505":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7475:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:22754:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:12061:7515":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"0:79:1859":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"11:736:6897":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10478:1823":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:20857:29597":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:5982:6826":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6915:3501":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:119:3138":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:14378:5537":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10760:7615":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:44014:7043":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3115:7550":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:2598:7260":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12373:4999":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9003:20032":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:7595:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:4613:3528":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:3212:6898":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8232:7022":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:1044:6868":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5639:3256":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:10150:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:30414:29996":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6531:6844":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:399:32808":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5808:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10966:3959":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:42538:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11490:3438":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8158:6701":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13868:5381":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12066:790":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:9709:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7736:3776":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:1845:6899":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4718:6072":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:2178:7332":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:21445:7928":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9823:20043":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:22165:3992":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:22820:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5322:3544":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:521:24000":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6456:6835":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11023:4866":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"14:215:6888":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:505:3171":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:12857:3238":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4807:3248":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4477:5994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11215:6804":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:7397:13200":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47819:6695":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"9:52:18967":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46086:4306":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41414:7067":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43699:7024":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1517:7493":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7391:19971":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:6153:3238":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:4557:3526":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:12846:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8985:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:10140:7755":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"11:2130:19025":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:4382:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"13:110:32809":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46442:4326":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6600:19967":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:12070:6774":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:5373:13079":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42495:3797":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6204:7423":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22080:4604":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12671:4834":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:671:7324":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:400:7327":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10109:7606":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:2060:7489":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3017:2578":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:44448:3908":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6201:7573":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8238:7586":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:3461:5583":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4796:6109":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12136:4950":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12024:4933":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14083:5437":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10561:6792":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:7489:3990":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2921:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:2497:7755":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1523:7497":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3072:7710":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10240:4813":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10714:7391":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:6900:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7559:3193":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4537:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:9752:7344":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:6616:3261":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:44345:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11072:3275":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:699:6772":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:4200:2824":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9564:7341":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5363:3545":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:41312:4231":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:6969:3208":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4644:6514":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:3975:7795":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3238:6901":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1585:6900":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:1922:6664":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9521:7340":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:41935:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4951:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:6192:6920":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10962:4863":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12513:5044":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9350:3413":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13667:5337":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:21295:7927":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:6783:3191":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13055:5140":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13802:5365":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6139:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:10390:6927":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13897:5389":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7660:3774":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:554:5715":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1924:7722":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:1569:5783":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:12081:13090":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:39271:7689":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4864:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:41651:2800":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7882:4388":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:21090:13240":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:9711:32831":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3185:27092":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13215:5168":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:2049:7498":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:30180:4017":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1603:5804":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12056:1463":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6687:6850":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7718:7682":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:9948:3228":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4709:7850":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10265:7363":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1500:5744":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6189:6831":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40139:3214":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4641:3529":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:12074:1657":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:5612:3496":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46518:4328":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:42236:2817":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7581:3266":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10429:7518":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11216:4460":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3054:13060":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:14324:5517":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:12639:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:35:3147":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22688:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2786:246":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3846:7562":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2696:3480":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:7217:2743":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6226:7438":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10646:3426":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:798:7480":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8948:7896":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:5832:3250":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11573:6817":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:4164:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4343:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:9865:3224":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"9:426:18951":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8561:7863":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:531:6765":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:40290:6971":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46488:4327":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9488:32834":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42222:2809":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"7:0:1647":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6650:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13188:5164":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14076:5436":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:6859:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:564:4790":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:10467:7519":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9780:7345":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39303:7529":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:3655:3307":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13816:5366":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:11821:7016":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13611:5331":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7284:4251":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7582:5595":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:43252:6686":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13851:5376":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5088:3542":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6818:3689":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:8181:3511":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2879:7924":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8840:2556":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11661:3445":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40045:4224":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"0:75:1822":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"17:11124:7407":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:8978:20031":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3997:7797":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4931:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:46678:4330":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:7225:6912":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7316:2743":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:6453:3174":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2947:13231":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:46261:4311":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:42511:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:6499:3151":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4812:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11055:3273":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:311:6894":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46062:4305":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:8848:20027":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14033:5422":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7102:19970":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30812:2711":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2792:249":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:21473:4599":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40531:6985":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:2284:19075":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7128:4456":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11337:20157":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14068:5433":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46364:4313":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8397:7859":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1138:32724":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8488:4605":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:3315:5582":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:42736:7000":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:5317:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40026:13159":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:21786:4601":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"14:165:19036":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2844:7921":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8916:7895":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41857:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22149:6937":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12064:788":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:2223:1983":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6944:3205":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10430:7371":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:3735:7498":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:42728:6999":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:3232:3457":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:256:7325":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:719:4803":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11173:20156":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:590:4791":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8884:4451":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1564:3174":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3224:7553":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:44176:7061":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4924:7849":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6929:5590":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:500:5680":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6850:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:3303:7557":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:45485:4280":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41740:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:9931:3227":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4037:7799":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2966:32678":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46132:4308":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9003:24186":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4393:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5727:3553":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39205:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:21076:7935":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4919:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44156:7056":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:41548:4251":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12911:5121":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12724:5073":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43989:7042":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11617:3442":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4498:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:21279:7755":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:7375:7695":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14013:5415":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10340:4825":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9531:32827":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6268:32825":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:1590:6901":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:1641:4590":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13723:5348":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11306:4873":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8298:7822":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22027:4602":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13949:5398":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5046:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5076:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2854:3714":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7041:6861":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4802:6112":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:4835:3534":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11358:20158":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22340:7792":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:7585:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22853:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12196:4963":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"7:79:18942":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43575:7017":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:2933:19102":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12711:5072":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3465:2561":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9921:7348":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5988:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:45818:4293":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2864:3487":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:932:7696":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2638:7549":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:7464:3189":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41581:7250":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11316:4876":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:41600:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1067:7489":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2766:3483":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:32022:2825":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:4921:3537":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14100:5441":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:7476:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2216:7548":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12076:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:5440:2549":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:6884:13202":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:39977:6948":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2669:7508":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43443:6928":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:14448:5552":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6657:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:481:6763":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6017:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:14024:5419":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11141:7524":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4820:6120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:582:2711":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22201:30782":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8205:19975":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7575:3197":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:3032:3512":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11074:7403":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8808:2554":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13274:4873":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:20887:30028":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5802:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11687:20036":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12422:5024":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9207:3408":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11191:3444":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:1027:19030":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:5495:3180":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7884:19974":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:2012:7331":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11189:26166":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9984:4242":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12997:5130":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3600:5584":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:6077:1824":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:10540:7520":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:21908:7755":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13890:5387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10097:7356":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3266:7556":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:40076:30785":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2150:20090":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9574:32832":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7613:7472":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1831:3193":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6729:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12876:5110":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14296:5510":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9852:20044":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:568:5723":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7600:3268":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8985:7593":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:6651:3151":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11062:7402":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"10:0:2418":{"crate_id":10,"path":["adler"],"kind":"module"},"1:9116:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1473:6897":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:119:13626":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8293:7068":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7029:3264":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:7573:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11788:4883":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:7472:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10903:7394":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:12072:1597":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:9701:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2875:7922":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12061:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:5017:3540":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6598:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10698:7389":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13575:5301":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:822:3157":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40281:6970":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13286:5178":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10468:4826":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:0:2420":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9867:4810":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11613:6715":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:12127:13098":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:12071:1600":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10551:7557":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:7281:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:47396:4367":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40012:6951":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2907:3489":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5827:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:62:13572":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10456:7378":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"14:7:7237":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40198:6957":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10084:7355":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:9493:3270":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:40391:6981":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44144:7053":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4370:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4687:6053":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8342:6503":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4874:6146":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:10824:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:32029:6944":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5858:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5060:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4491:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46600:4329":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8563:6704":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:44199:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:2849:7923":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11910:4912":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:39083:13061":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7645:4381":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10916:7395":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9111:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:7513:6872":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5964:6383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:2223:32714":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11934:4913":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:22787:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4634:7798":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:7526:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:547:5712":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:39310:4594":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:2209:7335":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:6932:31038":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12111:4948":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7895:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:5613:6914":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:43877:7039":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2170:13240":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10227:7362":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:4363:3182":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11086:7404":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6031:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22655:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:8115:6883":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:4759:710":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:39898:6945":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5419:3403":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3254:13134":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12778:5081":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7597:32821":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"13:0:2414":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8016:7778":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:3989:7796":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:574:4783":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"14:40:4913":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6560:3136":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:14536:5570":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:7860:7577":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10771:4829":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6361:3628":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6352:6833":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11815:4885":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7279:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5963:7416":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:41272:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6083:19074":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:3945:7793":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22:723":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2596:3476":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12154:4958":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13040:5136":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:4011:7509":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6017:19964":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7936:4389":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7360:32823":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4835:6124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:644:2801":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:1611:3144":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:9607:7342":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:11761:7008":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11742:3450":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:2243:6908":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10623:7522":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4189:7821":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6485:3493":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:681:6768":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11008:2557":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7541:7267":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4648:6518":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:14514:5564":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2550:258":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9159:7069":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:22721:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:7363:3982":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:968:6868":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:6086:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4889:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7492:6869":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:261:3151":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5027:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:21910:7930":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2888:3247":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12208:4964":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:1068:7490":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1442:2743":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3679:7790":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7865:7066":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10975:2550":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:897:3174":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3191:29086":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2618:3477":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14282:5504":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:45419:4277":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:7287:3981":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7608:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13693:3454":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:7733:7683":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7554:3506":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:9481:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6499:3510":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40106:7726":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8990:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9106:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:5555:6913":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9372:4808":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10779:7070":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3204:6900":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10023:7343":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12074:4942":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"15:327:19060":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11536:7561":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:6086:3180":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:12051:446":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:12056:13093":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6696:3662":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12305:4995":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41514:2742":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"14:31:7237":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7342:32824":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7669:4382":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9445:7339":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:4646:6516":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9998:3392":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:589:7676":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1776:3193":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:1257:6868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"9:357:18964":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2788:3484":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:506:5683":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5838:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:41531:2801":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3581:2800":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:9963:3233":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:11991:4927":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:1048:32802":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:10502:6928":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:9441:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:7401:13199":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12750:5077":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:782:3154":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7006:7455":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6243:7442":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43809:13104":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:515:4786":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:43221:7533":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:22262:29990":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:12726:7525":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:1538:7494":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:39185:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8006:7580":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44148:7054":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13085:5143":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4317:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4376:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6364:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6053:6418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2887:13221":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6877:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13632:5336":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13676:5341":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1733:5881":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:3171:2800":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:1076:7245":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5872:6332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10112:7357":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:332:3140":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:3830:3517":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40310:6973":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40738:6989":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2172:13241":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:22886:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:11632:7084":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:187:19043":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:1818:2800":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:12052:1617":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:7664:7575":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:20902:30026":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:43846:7035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4753:7812":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:5978:3256":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"0:0:2047":{"crate_id":0,"path":["version_check"],"kind":"module"},"1:9288:2963":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:2859:3711":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4585:3527":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12057:1495":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22224:3998":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:41295:4229":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:21262:7932":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:0:2424":{"crate_id":17,"path":["object"],"kind":"module"},"2:45463:4279":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8870:7592":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:11602:7254":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2305:19101":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4946:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11407:20033":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4508:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43925:7040":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11151:7409":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7651:7473":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:926:7480":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:5325:3151":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2339:3460":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6721:19968":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:43593:7018":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:5137:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:20844:2711":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47682:4372":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43860:7038":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:8154:7474":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:43733:6945":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:12017:24239":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2989:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:1426:2801":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4397:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5632:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4306:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4160:7818":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6037:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11495:7560":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40149:7530":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:6415:6834":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5891:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43395:7005":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12598:5056":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9140:4460":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:8765:20024":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:3529:2570":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11389:4474":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5845:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46938:4334":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:45615:4285":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47857:6697":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:21464:7755":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:6817:7925":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:22307:6941":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5899:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:261:7326":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1579:6899":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:21176:7941":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:14335:5521":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39227:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:4806:3533":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:41896:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12484:5039":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:21689:7934":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:9494:2808":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:25801:268":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:817:7483":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"15:0:2422":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:8239:3758":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4497:3524":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44461:7062":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14145:5452":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:45509:4281":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13685:5342":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11951:4916":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:4127:7511":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1717:5876":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10322:2801":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4975:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3049:19104":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11163:2555":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:8195:6887":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7438:3986":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:3188:29076":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40239:6963":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2871:3715":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30784:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1852:6900":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1709:5872":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6627:6499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:1411:2800":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:40229:6961":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8181:7754":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4756:6087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9328:3411":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42093:7517":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:12063:791":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:7090:6867":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3419:3180":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6742:6851":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2832:3486":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:41358:6671":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:10834:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5760:19963":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44168:7059":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:12652:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:7584:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11639:7084":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:10088:2957":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1011:3151":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10486:3271":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:14346:5522":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14163:5455":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7920:7579":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4844:6130":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:8072:5600":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:365:3142":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9051:20010":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:20904:30031":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2969:19103":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:8670:7515":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12172:4959":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5776:6280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2829:2719":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7708:3509":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12022:7684":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43724:6949":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:2049:7487":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7767:2968":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2903:13224":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11507:20035":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3800:3193":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:2797:2717":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7462:5593":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8814:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6261:7450":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:4425:2725":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2504:3472":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2840:2723":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:42757:6681":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:12894:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:9176:7603":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:6198:6919":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10685:7387":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:1822:2743":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46230:4310":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5017:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:7434:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14042:5423":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4430:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4862:3535":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:29965:7791":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4051:7801":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45771:4292":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2576:3228":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11547:3440":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2461:4583":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10012:4820":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:10844:2560":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:5816:3563":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3504:2572":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2913:13226":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5091:7566":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43411:3411":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42520:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"0:76:1836":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"1:1557:2800":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8212:6984":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:43425:6925":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2499:1973":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:922:7479":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:558:7540":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2934:13228":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13826:5367":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4471:5991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13739:5351":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2970:32676":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11000:4865":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13989:5408":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:6546:7262":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5784:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4341:3212":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5390:2546":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:434:3355":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:45664:4287":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21347:7931":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11137:7408":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2644:3478":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12621:5061":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12073:840":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40299:6972":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:8686:20022":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:14134:5448":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47598:4370":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42975:7003":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:22952:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4589:6045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:45894:4300":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:11798:7013":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7500:7247":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:652:4783":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:599:32836":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43831:7029":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:0:2419":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:5407:3180":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:9177:30100":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8011:7581":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:47286:4366":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14434:5545":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12790:5082":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43333:7537":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:482:5674":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10575:6793":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:10609:7521":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:1672:3151":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4458:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8338:7590":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4626:13152":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2174:5655":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11407:7082":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4751:7811":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10259:2563":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4697:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1513:5750":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:7451:3989":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:8167:7477":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:45563:4283":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8547:4607":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:1273:7489":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43629:7020":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4750:6085":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47644:4371":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12765:5080":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7567:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:3797:3516":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:49740:7944":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:9485:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46724:4331":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:7438:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:2194:5658":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:43475:7011":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2321:3458":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:40019:6952":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6753:3674":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:483:3240":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21038:7755":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:7561:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4772:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11351:4877":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:1931:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12252:4981":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:641:7543":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:21088:30432":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11625:26780":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44160:7057":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12000:4475":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:6634:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14056:5430":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:8953:20030":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13914:5392":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:3518:3174":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:646:7679":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:5982:13546":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:40351:6977":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7928:7261":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:587:5733":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:22278:29978":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11535:6816":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7208:4238":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7269:32822":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9046:4456":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:913:7492":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3260:13133":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44236:13348":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:2170:6905":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12576:5055":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6256:3256":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:1634:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47804:6694":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7739:7064":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4749:7809":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22622:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10059:4817":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7391:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13024:5134":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9121:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:4194:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:12701:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9198:27451":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11177:2556":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:5135:3188":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3002:2805":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7436:3594":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3023:2580":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3348:7775":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:9650:4820":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7872:6700":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12086:4943":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:3441:7337":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44172:7060":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47934:4374":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43241:7534":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:177:19016":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6376:19966":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:9496:2816":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:2959:2795":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14522:5567":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:40769:3222":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13838:5370":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8854:2557":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4176:7820":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4850:6132":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:80:1867":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"17:11111:7406":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:7259:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:840:2800":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43212:6930":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:42767:7001":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10949:7397":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10603:6795":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:6812:3204":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10316:4824":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12983:5129":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8364:6702":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4578:7841":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4640:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5082:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5673:3495":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13792:5364":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14001:5414":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6346:7453":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:624:32839":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:2366:2040":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:863:2743":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:844:7486":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:45734:4290":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3652:2743":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:8926:20029":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3065:3302":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7474:7465":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5866:3571":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21798:29601":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:6549:7890":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:636:4802":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7318:3739":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4965:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1503:7479":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5049:3541":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4725:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9172:3407":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:6802:3203":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4558:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3183:32669":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:562:5720":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45439:4278":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3288:13058":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:4986:3539":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11244:3442":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:5776:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4618:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13298:5185":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:41437:4246":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13981:5407":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9026:7599":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:47895:6699":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6607:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4986:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11639:3444":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13876:5384":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}