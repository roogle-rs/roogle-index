{"root":"0:0:1919","crate_version":"0.9.4","includes_private":false,"index":{"b:2:2235-0:93:1694":{"id":"b:2:2235-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2229:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:23573"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11855:33564":{"id":"2:11855:33564","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11853:33563"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:93:1694":{"id":"b:2:2532-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2502:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:127","2:2536:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11880:33568":{"id":"2:11880:33568","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42914:6644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9:1699":{"id":"0:9:1699","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2677:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2679:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:108:423":{"id":"0:108:423","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30574:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:45:1699":{"id":"0:45:1699","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:1665":{"id":"2:11964:1665","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:7384":{"id":"5:5341:7384","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1722":{"id":"0:78:1722","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:33576":{"id":"2:11940:33576","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8184:7470-0:129:1695":{"id":"a:2:8184:7470-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8184:7470","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11853:33563":{"id":"2:11853:33563","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:1664":{"id":"2:11945:1664","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2522-0:93:1694":{"id":"b:2:2522-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2525:1791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2731:2435-0:129:1695":{"id":"a:2:2731:2435-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:27:1709":{"id":"0:27:1709","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:1919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2296:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2296:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9047:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2332:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:143:1696":{"id":"0:143:1696","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:2681:226-0:143:1696","a:2:8185:7469-0:143:1696","a:2:8184:7470-0:143:1696","a:2:2731:2435-0:143:1696","a:2:2667:218-0:143:1696","b:2:2235-0:143:1696","b:2:2526-0:143:1696","b:2:2522-0:143:1696","b:2:3326-0:143:1696","b:2:2232-0:143:1696","b:2:2532-0:143:1696","b:2:2537-0:143:1696","b:5:5584-0:143:1696","b:5:681-0:143:1696","0:154","0:146","0:152","0:155","0:159","0:151","0:157","0:149","0:56","0:148"]}},"0:18:2095":{"id":"0:18:2095","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1023":{"id":"0:106:1023","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30574:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2667:218-0:143:1696":{"id":"a:2:2667:218-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:76:1707":{"id":"0:76:1707","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["min_date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:33562":{"id":"2:11852:33562","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:1656":{"id":"2:11938:1656","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2435-0:93:1694":{"id":"a:2:2731:2435-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11862:28375":{"id":"2:11862:28375","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:1699":{"id":"2:11967:1699","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11513:126","`FromStr`":"2:11512:7482"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11512:7482","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11512:7482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:33581":{"id":"2:11973:33581","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4513:33581"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42949:6572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:416":{"id":"0:104:416","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:2197":{"id":"0:35:2197","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8185:7469-0:93:1694":{"id":"a:2:8185:7469-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8185:7469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9047:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2677:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2681:226-0:143:1696":{"id":"a:2:2681:226-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:136:604":{"id":"0:136:604","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2679:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2301:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:156:416":{"id":"0:156:416","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2677:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8184:7470-0:93:1694":{"id":"a:2:8184:7470-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8184:7470","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79:1730":{"id":"0:79:1730","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["min_version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:33565":{"id":"2:11859:33565","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:2172":{"id":"2:11882:2172","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:685:2650":{"id":"5:685:2650","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:28401":{"id":"2:11872:28401","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11873:28402"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:143:1696":{"id":"b:2:2526-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2528:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:33:2189":{"id":"0:33:2189","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:2649":{"id":"5:684:2649","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2237:23573":{"id":"2:2237:23573","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:312":{"id":"2:11860:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11861:28379","`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8185:7469-0:129:1695":{"id":"a:2:8185:7469-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8185:7469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:14:2080":{"id":"0:14:2080","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:33569":{"id":"2:11908:33569","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11551:12649","str::split":"2:11899:1657","prim@char":"1:11896:412","`DoubleEndedIterator`":"2:7173:120","str::rsplit_terminator":"2:11911:33570"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42700:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:659":{"id":"0:147:659","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1715":{"id":"0:77:1715","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["max_date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:129:1695":{"id":"b:2:3326-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11944:1666":{"id":"2:11944:1666","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:28379":{"id":"2:11861:28379","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:34:2193":{"id":"0:34:2193","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9047:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:158:1023":{"id":"0:158:1023","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30574:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1647":{"id":"0:39:1647","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:143:1696"],"is_stripped":true}},"2:11961:1667":{"id":"2:11961:1667","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:24730":{"id":"2:11969:24730","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:24734":{"id":"2:11970:24734","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2679:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5331:34232":{"id":"5:5331:34232","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:30777":{"id":"2:11877:30777","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11878:30781"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42924:6645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:33571":{"id":"2:11920:33571","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2537-0:129:1695":{"id":"b:2:2537-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11891:2629":{"id":"2:11891:2629","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:34230":{"id":"5:5324:34230","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2442","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2442","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2338:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1023"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:659":{"id":"0:38:659","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:82:1756":{"id":"0:82:1756","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1770"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:93:1694":{"id":"b:2:2526-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2528:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:129:1695":{"id":"b:5:681-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:2648","5:684:2649","5:685:2650"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11870:33566":{"id":"2:11870:33566","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11902:1380","str::slice_mut_unchecked":"2:11871:33567","crate::ops::Index":"2:2988:7316"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:7284":{"id":"2:11975:7284","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4514:7284"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42958:6562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:33573":{"id":"2:11929:33573","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:2386"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42872:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:33582":{"id":"2:11976:33582","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4511:33582"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42967:6565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:93:1694":{"id":"b:2:3326-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2301:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:54:2095":{"id":"0:54:2095","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2681:226-0:93:1694":{"id":"a:2:2681:226-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2296:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1709","0:30:1699","0:32:1757","0:33:2189","0:34:2193","0:35:2197","0:36:2200"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:42:1709":{"id":"0:42:1709","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:1919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52:2088":{"id":"0:52:2088","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:143:1696":{"id":"b:2:2532-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2502:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:127","2:2536:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:93:1694":{"id":"0:93:1694","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:2681:226-0:93:1694","a:2:8185:7469-0:93:1694","a:2:8184:7470-0:93:1694","a:2:2731:2435-0:93:1694","a:2:2667:218-0:93:1694","b:2:2235-0:93:1694","b:2:2526-0:93:1694","b:2:2522-0:93:1694","b:2:3326-0:93:1694","b:2:2232-0:93:1694","b:2:2532-0:93:1694","b:2:2537-0:93:1694","b:5:5584-0:93:1694","b:5:681-0:93:1694","0:100","0:103","0:20","0:97","0:102","0:99","0:107","0:22","0:105","0:96"]}},"b:5:681-0:93:1694":{"id":"b:5:681-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:2648","5:684:2649","5:685:2650"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11876:3765":{"id":"2:11876:3765","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42636:3203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60-0:3:1544":{"id":"0:60-0:3:1544","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"version","name":"version","id":"0:3:1544","glob":true}},"0:48:2226":{"id":"0:48:2226","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"u16"}],["month",{"kind":"primitive","inner":"u8"}],["day",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:28410":{"id":"2:11902:28410","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11375:6544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:12777":{"id":"5:5325:12777","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2235-0:129:1695":{"id":"b:2:2235-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2229:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:23573"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:30:1699":{"id":"0:30:1699","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:143:1696":{"id":"b:5:681-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:2648","5:684:2649","5:685:2650"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11917:28415":{"id":"2:11917:28415","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11896:412","str::splitn":"2:11914:1671","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42772:6636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:33574":{"id":"2:11932:33574","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::rmatch_indices":"2:11935:33575"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42800:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:23800":{"id":"2:11952:23800","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:1671":{"id":"2:11914:1671","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649","str::rsplitn":"2:11917:28415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42754:6635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1646":{"id":"0:24:1646","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:129:1695"],"is_stripped":true}},"2:11911:33570":{"id":"2:11911:33570","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11551:12649","str::split":"2:11899:1657","prim@char":"1:11896:412","str::split_terminator":"2:11908:33569"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42718:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2232-0:143:1696":{"id":"b:2:2232-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2226:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2234:2372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:62-0:39:1647":{"id":"0:62-0:39:1647","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"date","name":"date","id":"0:39:1647","glob":true}},"b:2:2232-0:129:1695":{"id":"b:2:2232-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2226:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2234:2372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2535:127":{"id":"2:2535:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:50:2080":{"id":"0:50:2080","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:604":{"id":"0:150:604","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:659":{"id":"0:133:659","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:802":{"id":"2:11850:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:28412":{"id":"2:11905:28412","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split":"2:11899:1657"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42668:6545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33578":{"id":"2:11946:33578","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11576:12646","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2667:218-0:129:1695":{"id":"a:2:2667:218-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5584-0:129:1695":{"id":"b:5:5584-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5582:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5586:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11868:28378":{"id":"2:11868:28378","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:1657":{"id":"2:11899:1657","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split_whitespace":"2:11877:30777","str::rsplit":"2:11905:28412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42650:6542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:34233":{"id":"5:5339:34233","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5342:24732":{"id":"5:5342:24732","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11971:24735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:34231":{"id":"5:5328:34231","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13:2067":{"id":"0:13:2067","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u16"},{"kind":"primitive","inner":"u16"},{"kind":"primitive","inner":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2234:2372":{"id":"2:2234:2372","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2525:1791":{"id":"2:2525:1791","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2499:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1693":{"id":"0:75:1693","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1694","`Version::read()`":"0:6:1709","`Channel`":"0:129:1695","crate":"0:0:1919","`Channel::read()`":"0:27:1709","`Date::read()`":"0:42:1709","`Date`":"0:143:1696"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2667:218-0:93:1694":{"id":"a:2:2667:218-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5584-0:143:1696":{"id":"b:5:5584-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5582:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5586:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:81:1746":{"id":"0:81:1746","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:28377":{"id":"2:11866:28377","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:33575":{"id":"2:11935:33575","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::match_indices":"2:11932:33574"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42818:6639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3328:1469":{"id":"2:3328:1469","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38986:3873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2435-0:143:1696":{"id":"a:2:2731:2435-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11972:24736":{"id":"2:11972:24736","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2528:685":{"id":"2:2528:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2232-0:93:1694":{"id":"b:2:2232-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2226:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2234:2372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2681:226-0:129:1695":{"id":"a:2:2681:226-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:683:2648":{"id":"5:683:2648","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2235-0:143:1696":{"id":"b:2:2235-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2229:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:23573"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2532-0:129:1695":{"id":"b:2:2532-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2502:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:127","2:2536:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2522-0:143:1696":{"id":"b:2:2522-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2525:1791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5584-0:93:1694":{"id":"b:5:5584-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5582:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5586:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:32:1757":{"id":"0:32:1757","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:1455":{"id":"2:2541:1455","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5586:1434":{"id":"5:5586:1434","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1709":{"id":"0:6:1709","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:1919"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:659":{"id":"0:21:659","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2522-0:129:1695":{"id":"b:2:2522-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2525:1791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:61-0:24:1646":{"id":"0:61-0:24:1646","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"channel","name":"channel","id":"0:24:1646","glob":true}},"0:142:416":{"id":"0:142:416","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:6648":{"id":"2:11874:6648","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42620:6626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:6658":{"id":"2:11875:6658","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42626:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8185:7469-0:143:1696":{"id":"a:2:8185:7469-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8185:7469","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11878:30781":{"id":"2:11878:30781","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11877:30777"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42933:6646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:30776":{"id":"2:11881:30776","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42942:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:33567":{"id":"2:11871:33567","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11902:1380","crate::ops::IndexMut":"2:2992:7317","str::slice_unchecked":"2:11870:33566"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:33572":{"id":"2:11923:33572","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:24735":{"id":"2:11971:24735","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2301:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:23:659":{"id":"0:23:659","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:2055":{"id":"0:12:2055","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["major",{"kind":"primitive","inner":"u16"}],["minor",{"kind":"primitive","inner":"u16"}],["patch",{"kind":"primitive","inner":"u16"}]],"output":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:2591":{"id":"2:11895:2591","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:143:1696":{"id":"b:2:3326-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1919":{"id":"0:0:1919","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1694","`is_max_version`":"0:80:1738","`is_exact_version`":"0:81:1746","`is_max_date`":"0:77:1715","`is_exact_date`":"0:78:1722","`triple()`":"0:75:1693","`Date`":"0:143:1696","`Channel`":"0:129:1695"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:75:1693","0:76:1707","0:77:1715","0:78:1722","0:79:1730","0:80:1738","0:81:1746","0:82:1756","0:84:1770","0:60-0:3:1544","0:61-0:24:1646","0:62-0:39:1647"],"is_stripped":false}},"5:5343:24733":{"id":"5:5343:24733","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11972:24736"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1770":{"id":"0:84:1770","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1756"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["feature",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:1785":{"id":"2:11885:1785","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:2386":{"id":"2:11926:2386","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11551:12649","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:2386"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42854:6641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2332:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2537-0:143:1696":{"id":"b:2:2537-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11858:23801":{"id":"2:11858:23801","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11119:1685"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1695":{"id":"0:129:1695","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:2681:226-0:129:1695","a:2:8185:7469-0:129:1695","a:2:8184:7470-0:129:1695","a:2:2731:2435-0:129:1695","a:2:2667:218-0:129:1695","b:2:2235-0:129:1695","b:2:2526-0:129:1695","b:2:2522-0:129:1695","b:2:3326-0:129:1695","b:2:2232-0:129:1695","b:2:2532-0:129:1695","b:2:2537-0:129:1695","b:5:5584-0:129:1695","b:5:681-0:129:1695","0:37","0:132","0:140","0:138","0:141","0:135","0:134","0:137"]}},"0:98:604":{"id":"0:98:604","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1709","0:9:1699","0:12:2055","0:13:2067","0:14:2080","0:16:2088","0:18:2095"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:57:659":{"id":"0:57:659","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849":{"id":"2:11849","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11850:802","2:11851:2592","2:11852:33562","2:11853:33563","2:11855:33564","2:11858:23801","2:11859:33565","2:11860:312","2:11861:28379","2:11862:28375","2:11864:28376","2:11866:28377","2:11868:28378","2:11870:33566","2:11871:33567","2:11872:28401","2:11873:28402","2:11874:6648","2:11875:6658","2:11876:3765","2:11877:30777","2:11878:30781","2:11879:1653","2:11880:33568","2:11881:30776","2:11882:2172","2:11885:1785","2:11888:1662","2:11891:2629","2:11895:2591","2:11899:1657","2:11902:28410","2:11905:28412","2:11908:33569","2:11911:33570","2:11914:1671","2:11917:28415","2:11920:33571","2:11923:33572","2:11926:2386","2:11929:33573","2:11932:33574","2:11935:33575","2:11938:1656","2:11940:33576","2:11942:33577","2:11944:1666","2:11945:1664","2:11946:33578","2:11949:33579","2:11952:23800","2:11955:28417","2:11958:33580","2:11961:1667","2:11964:1665","2:11967:1699","2:11969:24730","2:11970:24734","2:11971:24735","2:11972:24736","2:11973:33581","2:11975:7284","2:11976:33582"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11879:1653":{"id":"2:11879:1653","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42904:6643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:160:423":{"id":"0:160:423","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30574:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:33580":{"id":"2:11958:33580","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:28402":{"id":"2:11873:28402","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11872:28401"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2537-0:93:1694":{"id":"b:2:2537-0:93:1694","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11888:1662":{"id":"2:11888:1662","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:129:1695":{"id":"b:2:2526-0:129:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2528:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11955:28417":{"id":"2:11955:28417","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:12647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:2592":{"id":"2:11851:2592","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:28376":{"id":"2:11864:28376","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1544":{"id":"0:3:1544","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:93:1694"],"is_stripped":true}},"2:2536:1456":{"id":"2:2536:1456","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5340:34234":{"id":"5:5340:34234","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2442","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2442","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3894","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1709","0:45:1699","0:48:2226","0:50:2080","0:52:2088","0:54:2095"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2540:127":{"id":"2:2540:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31758:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11949:33579":{"id":"2:11949:33579","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:12649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:7132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:34230","5:5325:12777","5:5328:34231","5:5331:34232","5:5339:34233","5:5340:34234","5:5341:7384","5:5342:24732","5:5343:24733"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:16:2088":{"id":"0:16:2088","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","le","lt"],"trait":{"name":"PartialOrd","id":"2:2338:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1023"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:1738":{"id":"0:80:1738","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["max_version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:2200":{"id":"0:36:2200","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8184:7470-0:143:1696":{"id":"a:2:8184:7470-0:143:1696","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8184:7470","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1696","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11942:33577":{"id":"2:11942:33577","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:9088:4114":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10402:7015":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:1713:12817":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:7616:3070":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10026:7001":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1591:6521":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:859:2654":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:21354:7415":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41996:6622":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11907:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:5594:3280":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13332:5060":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7077:19439":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44582:3944":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6079:6103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1992:7114":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5643:6444":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:8214:3538":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2206:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:10718:7142":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11721:4646":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6532:7500":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13721:5189":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11844:4688":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4301:5600":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:5553:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10316:4508":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7034:2597":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2939:2439":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10104:4472":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12592:4818":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4504:7447":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2296:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12894:4937":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:7434:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2781:12785":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12158:4732":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:557:7158":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12307:4773":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:9431:3021":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:41215:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4396:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11571:12647":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8479:4256":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"13:0:2272":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9670:6982":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:1919:19543":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:1064:7104":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:354:7156":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9006:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10885:6437":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11011:3231":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:10946:3073":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:320:2936":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:0:2282":{"crate_id":17,"path":["object"],"kind":"module"},"16:6793:3469":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:42718:6633":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40609:6686":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:8310:19492":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1723:5524":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:7098:12764":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:20413:32642":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9683:6983":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2992:7317":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4334:5613":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6400:3415":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11653:4642":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:46115:4019":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13145:5017":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:9115:23839":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:7786:3145":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43377:6676":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:1534:7109":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:4596:3312":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:521:23355":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8975:7221":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5931:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:8195:19480":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12923:4948":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7016:6482":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4818:3318":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4037:3304":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6236:7067":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:11340:6640":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3189:30143":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10270:7012":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:4540:3310":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11163:4532":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1120:7107":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5571:3278":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4597:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:8256:3607":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8997:23829":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6558:6467":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10897:3226":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:903:2977":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3640:3106":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:8256:19478":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:44422:3937":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:3160:33271":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:4872:3320":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3132:26263":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6983:32793":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2454:12728":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:21734:3787":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4720:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:6479:7498":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:9513:3024":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41657:6319":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:4855:2982":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7843:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45113:3965":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9628:6977":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11033:3918":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11502:4605":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1363:2654":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:594:5390":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4121:7427":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:39347:12724":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:6533:3003":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3929:7402":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11461:6360":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10626:7231":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9545:3189":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:853:7102":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11906:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4871:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:3524:2653":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2178:5307":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7595:4035":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:3322:6614":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:9064:2667":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:504:2970":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:4231:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:6290:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13744:5190":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:48977:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22108:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"9:174:18495":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5847:3353":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4445:3307":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:20682:7544":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11910:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:2902:2648":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2905:3273":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:40596:3901":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9478:6969":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5902:6045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:2053:6489":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1570:2977":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:11903:1459":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:646:2654":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4679:7418":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13763:5195":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13041:4990":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:7851:7199":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4638:7429":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12607:4822":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:12194:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:45012:3962":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:6543:3004":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:13678:5173":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:8047:5253":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:1567:2597":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8864:7502":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13812:5210":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:5920:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43405:3918":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:40785:12860":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13082:5003":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13367:5071":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11375:6544":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11069:19506":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:39380:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:30010:3799":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11422:4589":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:41697:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:39672:6598":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:38979:7146":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1571:5427":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6381:2952":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:40794:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:11264:6629":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6575:19436":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7578:7415":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:42208:6625":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:10044:7137":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1897:6878":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9018:4112":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7206:3767":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:42004:6623":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:39541:6581":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:39310:12723":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"9:421:18431":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:8170:6508":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:45767:3987":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11355:4578":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8605:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:3988:2654":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:7135:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6767:3467":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:21096:7570":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"9:352:18444":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11921:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2130:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6698:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6700:3007":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6643:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:919:7108":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:8718:3198":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9874:3898":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10080:7009":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42189:6332":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1731:5528":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6201:7055":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:39427:7332":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:10527:19610":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4656:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:1410:6518":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4789:3317":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:386:6948":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42933:6646":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:2933:6957":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4274:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8092:6350":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2807:12788":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:42818:6639":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11920:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4402:5645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:487:6949":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5724:6446":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40490:3885":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43397:6681":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:9052:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8225:6687":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13344:5066":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:8667:3195":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8052:2418":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:6667:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:31807:2580":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:9047:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:21500:4250":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:14:2096":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:10353:3069":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:2319:3242":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2642:3262":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40975:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:8788:3200":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:645:7286":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13411:5085":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:6127:7191":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:48964:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3176:12699":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13477:5100":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10735:4528":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:11052:4114":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:42437:6547":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:7524:2656":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9596:4462":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:535:4222":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5998:19433":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:8025:3600":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:42700:6632":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13639:5162":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41957:6620":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:1852:6519":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:6975:2964":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:22807:3794":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9566:6964":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3165:7171":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1194:6489":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10491:7025":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7366:19440":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6904:5243":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8170:7206":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:41789:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:39640:6595":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:1044:18509":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3653:4042":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4697:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10655:6685":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13101:5004":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:1872:6522":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5805:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11410:4586":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:20600:7551":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:7644:7288":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7837:6497":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6544:3282":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:1978:6956":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1440:7096":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5386:3194":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7803:3564":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:39413:3882":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:733:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:60:34362":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7478:3288":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3445:24659":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9107:6688":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6939:3894":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46303:4021":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"0:81:1746":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"17:11136:4530":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5917:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:0:2275":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:4987:7184":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:234:6328":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:2502:3256":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4476:5685":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11501:6703":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2760:7536":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1085:7106":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6132:6449":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10222:25707":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1710:5520":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12138:4729":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:7665:6683":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"15:198:18529":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10555:6421":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5759:5962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8963:7219":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:9340:6966":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:1727:6309":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12563:4815":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:39751:6607":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5698:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13469:5099":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:2208:7166":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:4235:6870":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:43393:6680":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2905:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3167:7172":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5655:3279":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8746:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7467:6490":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:0:2278":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:540:5361":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10626:6432":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:20379:32615":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:8979:34390":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:43262:3915":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43657:3929":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5752:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:564:4435":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:98:6511":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13211:5033":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:533:3038":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10857:19504":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:7511:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:4576:12716":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39570:6585":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2341:1912":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:11895:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2694:3264":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10845:23846":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10650:6691":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9997:25705":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10303:7014":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11339:4574":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:119:2934":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12634:4825":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"13:110:34367":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:7218:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"0:79:1730":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"5:7087:3759":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40553:6318":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:6403:3059":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:274:6512":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:38720:2657":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:22141:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6061:18547":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11924:4702":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:7440:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6336:3408":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:9734:6985":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:40467:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2186:6529":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11615:4634":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:21698:30221":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12433:4790":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10015:7000":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3461:2429":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21661:30236":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11911:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:1563:2653":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11060:4520":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:924:7095":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2829:3045":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40726:2654":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4328:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:8184:7470":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4850:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:10134:2422":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:45973:4018":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:2913:33312":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2611:7167":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3504:2977":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:8995:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:13053:4995":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:985:6489":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4570:6165":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10354:4510":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12194:4738":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"1:11166:2424":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:5132:2952":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:3665:7114":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:7175:3766":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:2184:5308":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4775:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4574:6169":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:8598:19501":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:5963:6447":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12510:4809":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:1460:7113":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"14:202:12662":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:215:6509":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13356:5067":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9056:2660":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12006:4712":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4313:5603":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40861:2597":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4714:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:38821:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3639:2597":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3379:1846":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:10186:7139":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8786:2416":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10798:19503":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42558:7155":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7557:5248":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2808:3269":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6728:3454":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:44839:3956":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:39366:3880":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5000:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:360:7157":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8940:23798":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:11878:23822":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5317:2405":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:39688:3510":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:5754:2990":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4237:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9772:4469":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40718:2653":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:4108:2982":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44600:3945":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:39620:6593":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:300:6515":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:481:5326":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43669:3686":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4962:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11520:4606":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:8109:6507":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:271:2952":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7481:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:39560:6584":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:699:6405":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3921:7401":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:39257:6564":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:39948:6611":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7767:19442":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:2765:7538":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2215:1855":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1579:6519":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:5811:3346":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:119:13186":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:45271:3979":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:41095:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6611:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:39215:3875":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:3030:3296":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:1596:6522":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:22042:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43627:3926":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:39333:6573":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:12411:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:690:6404":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:6571:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2337:3244":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7626:7090":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10052:7006":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:7173:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8740:2413":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:5000:3324":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:9924:6542":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:30004:6313":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4324:7183":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7217:6869":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40845:2653":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11459:4595":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:8683:3196":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"10:44:5313":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:39990:6615":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4386:2581":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7803:6349":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:9545:3030":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41255:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6095:3055":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:1429:7095":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:20813:7543":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:40743:3907":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7065:6488":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9064:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7094:12765":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:8909:3203":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11897:1493":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:1695:5511":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11247:6701":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3979:7405":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"10:36:5312":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6541:6150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:39397:30260":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:20411:32646":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:487:5329":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:11119:1685":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43576:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:62:13132":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:660:6941":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2594:3260":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6506:6465":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:8651:3194":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9732:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10649:6433":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5616:6440":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6890:3285":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5567:3049":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7259:3907":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6218:7059":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3204:12614":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12959:4978":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3273:2940":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:11001:2414":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4757:3316":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:812:2958":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:2764:3267":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9653:6979":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:10412:7171":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:40935:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1663:5493":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10670:4523":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12072:4720":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6003:1695":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2744:2576":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:39602:6591":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:810:7108":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9577:4460":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2338:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6943:19438":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3207:7174":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6460:3277":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2573:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8274:6154":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:515:4431":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6935:7071":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10833:2409":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2616:3261":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5779:3341":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3121:6520":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:12219:7143":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12466:7319":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:3126:33272":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:20841:4245":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6764:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:1801:4240":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7042:3480":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:777:2945":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7711:3556":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:46622:6340":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13385:5075":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:8283:19491":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:1003:7104":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:7682:2823":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:7859:19443":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:42772:6636":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4549:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3155:6519":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9557:4465":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:659:2597":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:6850:3537":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:43385:6678":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:44545:3942":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2933:2437":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"0:84:1770":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"17:1034:6951":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11845:4128":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:39941:6610":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12461:4796":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2879:3272":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5800:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6179:7040":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:928:7096":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:38861:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12980:4983":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:7469:6294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:48990:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9973:6419":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5823:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11532:4609":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7635:3554":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:44314:3933":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:553:5367":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8236:7209":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2674:2434":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9748:4465":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"15:219:18533":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11813:4681":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:4720:7291":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12059:4719":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:39013:7147":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:39519:6579":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:6654:30175":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8917:7213":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11800:4679":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6059:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5382:1649":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1509:5394":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7669:3292":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43239:6664":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40870:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:12146:12732":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2787:3495":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12113:4727":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:636:4447":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5886:3357":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:5064:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11915:1475":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4302:3011":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5772:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4468:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:10158:6635":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9068:34386":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6327:6454":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:29970:3798":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43214:6663":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12550:4814":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6376:3276":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40632:3902":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:4307:2982":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:582:2567":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:6229:2952":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13698:5176":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4921:5864":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7867:4042":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2229:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9069:4113":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:1225:7104":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2862:3271":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2211:1709":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:48925:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5890:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1589:5437":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21248:4247":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:7521:6304":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:877:2653":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:8186:7131":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"10:0:2276":{"crate_id":10,"path":["adler"],"kind":"module"},"1:2864:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:949:7100":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39653:6596":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11220:4544":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10416:7019":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13265:5046":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:48951:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:25617:3795":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3246:7176":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:21727:6558":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1609:5451":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9512:6972":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:20639:7415":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13376:5074":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:39340:6574":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1987:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4583:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:1419:7108":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6958:6532":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:40709:2596":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4635:7456":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:8548:19499":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4412:2683":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:45059:3963":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4172:7181":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44647:3946":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4702:3314":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4787:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:11777:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4727:5763":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:1611:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:42967:6565":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:49003:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10440:7021":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4703:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2357:3250":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:41986:6328":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11193:4536":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2679:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"11:2080:7105":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:9946:6417":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11914:1474":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:3063:3102":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:861:7103":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:3057:7168":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4559:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7535:3066":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:7251:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7859:6882":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3983:7406":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:8506:4102":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13169:5019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:3872:3302":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:44915:3959":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39304:6562":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"8:0:2274":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:0:2283":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:10200:7140":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6000:6077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"0:78:1722":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"16:6717:6472":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:5904:3048":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2359:7352":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:42477:6333":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12622:4520":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:5176:12634":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44338:3934":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3397:2420":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5346:3329":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"7:79:18422":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:507:4428":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13399:5082":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4820:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:9523:6973":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10820:2824":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:44493:3940":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:1787:2804":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3676:7179":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:412:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42529:6551":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:39702:6601":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9839:6988":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8983:4109":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4568:3311":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11025:25274":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9424:4455":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2301:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:24:601":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:13135:5016":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1585:6520":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:44292:3932":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3147:6521":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10465:7023":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:21748:3788":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:7487:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:2791:7537":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9108:34388":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6302:2597":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2547:3025":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5770:13106":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"9:445:18429":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:10645:6689":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1823:2813":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5878:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11919:1530":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2988:7316":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3976:7126":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:1628:2946":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10691:19611":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4828:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:4148:2653":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:834:7100":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9315:4244":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:41773:2679":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:3086:7318":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2668:3263":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:4673:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:10598:3228":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:43102:6660":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:2830:3270":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:1840:2977":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:3352:2982":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:10635:4519":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:8129:7091":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13033:4989":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10710:2419":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9265:6964":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13625:5156":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:6952:2597":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10681:6435":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"14:165:18515":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:7268:25163":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21553:3768":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2803:12786":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12098:4724":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4766:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9721:6984":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5693:3333":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11969:4708":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:4366:2682":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12449:4794":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:890:6518":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:7386:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7289:2998":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42466:7152":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12282:4769":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11585:4622":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:481:6396":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13433:5090":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:388:18430":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4795:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:7196:2440":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2967:18575":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11143:3074":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6530:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11160:6697":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7565:32649":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:681:6401":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1050:6489":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2343:7347":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:39934:6609":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:50299:6348":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43584:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11484:4597":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4910:5858":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:8753:3199":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12178:4733":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:43056:6650":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3149:12797":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13803:5206":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4121:4241":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9181:2819":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5920:3363":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1348:2653":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6634:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42650:6542":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12085:4722":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:567:5375":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5728:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8495:6353":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41737:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:4163:2680":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1832:2653":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:113:23344":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:6476:6883":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:9066:2668":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2936:2438":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:766:23354":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12358:4778":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11862:25178":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:6230:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13865:5219":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10615:6431":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4457:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10458:3070":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:5759:3050":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4070:27872":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11090:3236":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:913:2940":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:8360:19493":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:671:6945":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:483:3037":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21356:7545":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:846:2653":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5959:6066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10580:6429":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:8420:19495":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13791:5204":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9498:4458":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:975:6950":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:43369:6674":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:353:2938":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9138:6962":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2190:34360":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:3907:7400":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4353:5626":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44523:3941":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"0:82:1756":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"6:6488:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:30026:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4981:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:609:6940":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"14:7:6859":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43381:6677":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8218:6686":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:8610:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42949:6572":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12345:4777":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:39490:6550":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7519:6495":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2731:2435":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8176:7208":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5813:5989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:4560:7403":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13612:5150":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13015:4984":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:9722:7415":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2850:12793":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:2205:3759":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9312:6965":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11391:4585":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41685:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11405:7180":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5708:3336":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2824:12790":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2681:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9148:34387":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:473:5321":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:41431:2669":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4379:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5690:7189":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1379:2597":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11909:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8772:2415":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:46633:6341":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1518:18510":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:2404:4229":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6293:3407":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:1618:4236":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:637:7159":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11037:19505":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:38986:3873":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13240:5041":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6164:6452":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11263:3076":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:42548:6552":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:29781:7396":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:1652:5485":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11917:1473":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7942:7201":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:123:13187":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:22273:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11109:3239":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:8420:4254":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"9:481:18428":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6367:7193":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:44392:3936":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2858:12795":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:653:13543":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9443:6967":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10172:6636":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43640:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5797:3345":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:39470:7148":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2786:3268":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:1859:6520":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:41015:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:960:2952":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4649:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:11912:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4000:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4662:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12046:4717":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10125:4474":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4952:5874":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:5426:2992":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:21091:7547":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7201:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6930:3062":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11899:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:5526:6534":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39227:30256":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10452:7022":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8489:2653":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11241:6700":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:39267:3879":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9469:6968":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2499:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44693:3952":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10720:25272":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5944:7033":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6496:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7947:7383":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:4340:2984":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9933:6415":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:860:2960":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11573:4619":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5976:3367":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3375:12682":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:39550:6582":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4489:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9275:34383":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5938:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13842:5215":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4252:7182":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6254:3403":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1039:33359":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2537:3042":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6488:6457":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10569:6425":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:1895:6311":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7743:3281":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6743:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12522:4810":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12915:4947":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:43401:6682":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:11622:12654":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8230:7428":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:21682:30241":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:1848:2820":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1210:7105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:11324:6637":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:6607:12767":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:7428:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4218:5539":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11013:2415":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:43071:6656":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:44248:3930":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:38947:7295":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:41417:2660":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:45090:3964":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:5843:2982":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9641:6978":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:2474:1845":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10761:19502":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12902:4940":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13488:5104":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13651:5165":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3877:7398":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21760:7397":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10668:4115":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:6628:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10428:7020":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5690:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10545:3230":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:20434:32644":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5499:2412":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:42958:6562":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:7516:3064":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:3931:2982":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11434:4590":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5244:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13121:5012":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:42516:7153":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11785:4675":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11993:4709":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:5648:2977":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:3300:5235":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1555:7110":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"14:221:5259":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40734:2597":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:80:23342":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:719:4448":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3741:2952":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:217:2950":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:43619:3924":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8970:7220":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42924:6645":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11891:4694":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:620:6877":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39532:6580":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6791:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:420:3152":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:1926:7330":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:8996:2431":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:1541:5407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:6997:2597":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11089:4113":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7437:5246":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4733:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"9:52:18447":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4756:7413":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:42626:6627":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12388:4783":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6671:3442":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4416:5653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2799:12787":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7813:4041":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22306:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:42914:6644":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44563:3943":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7757:6496":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:3899:3303":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"16:6442:3419":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2812:3496":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5716:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4687:5741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46763:4027":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4432:7430":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:525:5352":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4882:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40895:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13194:5028":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21569:6554":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40853:2654":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:46511:4025":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:40644:3904":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7162:3763":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11556:4611":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6307:3274":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:48568:7579":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:41715:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:7498:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10516:4513":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1677:5504":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:561:5372":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44869:3957":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2686:2572":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13857:5216":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13233:5039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3815:3301":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:3782:3300":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1770:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:42594:3909":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"0:77:1715":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"2:46576:6336":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7317:34380":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:2226:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13249:5042":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2332:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:3946:2952":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45317:3980":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1520:5399":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8347:4096":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44462:3939":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46225:4020":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7335:34382":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10660:4520":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:46427:4023":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13309:5057":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9895:6995":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11508:6703":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:42428:6546":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42800:6638":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6535:2932":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4361:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5990:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9218:4465":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:39972:3019":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:41135:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:10205:1649":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:5786:5982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12259:4768":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:640:7161":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:1138:6867":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6321:7070":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7590:7195":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11234:4545":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12483:4807":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39460:3013":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:1514:5396":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:42446:7151":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7683:3293":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:1534:5404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10743:7028":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:8156:3295":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8903:4108":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8802:7212":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:3916:2977":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9959:6418":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21447:4248":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2571:6881":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:4410:7429":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3205:7173":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:41949:6618":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:20808:7415":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:9378:7197":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:8185:7469":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:12133:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4539:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5418:5238":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8437:7481":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43085:6659":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"9:502:3739":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:393:34364":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11901:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7579:4034":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6520:3421":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11319:4573":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:9058:2669":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:4327:3305":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:39588:6588":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:44268:3931":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:35:2948":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2453:7415":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4929:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:3749:3299":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6757:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8157:6542":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:1947:6953":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2718:2574":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40507:3887":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:44793:3955":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7478:6888":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:505:5335":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10257:7011":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10863:2416":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8848:7503":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11446:4593":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1075:33360":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13324:5059":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:3159:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:572:5377":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7488:6493":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2863:12796":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:20688:7546":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6548:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3988:7127":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8329:7465":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4728:3315":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7529:3290":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11913:1477":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6876:3284":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"7:32:18415":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6183:2977":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:3722:2940":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:39712:6602":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2770:3494":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:8389:19494":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:40776:6872":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:707:6407":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4628:5714":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1082:6867":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4611:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:8164:6643":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:531:5355":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:45429:3982":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46365:4022":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7103:4109":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:46686:6344":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:6910:3051":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1073:7105":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:6831:3076":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:2819:12789":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4248:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:41424:2661":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:546:5364":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6032:7581":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10929:3071":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:2198:5310":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:96:23343":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11551:12649":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5843:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3129:26262":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:1787:6952":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6675:2996":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5945:6061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11908:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1435:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:9178:6963":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5176:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"18:574:4428":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46567:6335":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:42942:6647":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:42503:6550":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:6546:3060":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:2905:6306":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5683:7186":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:7131:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2384:1844":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:5449:6533":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43228:12661":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:7463:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8244:7206":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:45617:3986":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4023:12613":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3387:7125":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7498:6494":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:6518:2603":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8151:3203":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11229:4127":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10967:3228":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4510:3309":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46648:6342":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11641:4639":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:39020:2681":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:587:7283":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6022:19434":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:5180:12635":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:493:5331":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1899:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:955:7102":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:4976:2990":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6474:3294":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:5367:2408":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13659:5168":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:22174:3792":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7675:6684":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9866:6990":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:42204:6624":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5402:3195":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41055:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1713:2940":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:630:6868":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:7521:2655":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5018:7184":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9350:34391":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42620:6626":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:6115:2996":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:8134:6579":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4781:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2931:18574":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41667:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1785:2803":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40658:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:938:7302":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:8090:6504":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:8180:19444":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:8142:7094":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:9062:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9322:34385":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2404:3252":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11902:4695":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13443:5093":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7244:34381":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4480:3308":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:8521:19498":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1617:5456":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2490:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2775:3491":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:7467:3234":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3289:7380":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:8953:4453":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4850:7455":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5741:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:3114:2653":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:45583:3985":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43034:12660":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:1527:2982":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:7040:2597":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6361:3412":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8443:19496":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3778:7180":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4994:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:38759:12617":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:614:34395":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5305:3328":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1747:5533":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:8778:31736":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:44360:3935":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:45553:3984":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:5560:3048":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:7659:7289":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:644:4428":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5741:19432":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:42377:7150":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10092:7010":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11894:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13499:5105":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:9409:19513":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7572:34378":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43150:6661":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:286:2442":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42456:6549":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7013:3758":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:45193:3966":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7543:3291":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:160:6859":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4389:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13461:5097":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:9978:2813":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13667:5169":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43457:12908":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:1583:5435":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10705:4524":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11199:4124":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8252:4084":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:932:7097":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10310:2413":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2298:18548":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6728:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6512:6138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11544:4610":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2524:3257":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11696:3082":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7446:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46549:4026":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5967:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43389:6679":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10936:3227":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11916:1476":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:9383:3068":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10283:4506":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11600:4628":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6981:7072":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:1736:4237":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11867:7290":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8296:6351":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:0:2277":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:4845:3319":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:8858:3202":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9826:6987":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2496:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13316:5058":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9876:3144":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:12167:32395":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9038:34384":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2369:7357":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11070:4121":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:5630:7031":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:6948:7124":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"6:4805:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"14:40:4560":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4624:3313":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43282:6672":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:39631:6594":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:4078:2982":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:8573:19500":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7937:7200":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7698:2824":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6363:6611":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:39279:6565":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4677:7417":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10505:7026":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:7528:12763":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9907:4471":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7702:7145":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:961:7103":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2493:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:40573:30262":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"0:76:1707":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"18:755:6414":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5032:3325":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12536:4811":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6888:6886":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8794:2653":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13419:5088":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:20680:7415":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2970:12616":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:9530:3025":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4681:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:0:2281":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3126:25019":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4988:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2587:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4224:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4408:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:42872:6642":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:7195:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10478:7024":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:624:34393":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"13:226:5306":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6521:6144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:2720:3265":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:3047:18576":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"2:38806:3867":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46473:4024":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12835:4885":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:9899:2654":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8397:6328":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:4108:7426":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11471:4596":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8270:7210":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:1846:2819":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:7132:3760":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6967:2977":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11372:4580":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:10117:7138":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2829:12791":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4571:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11628:4638":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:7144:2441":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7029:6485":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:1866:6521":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:39579:6587":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6390:6455":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:39326:6572":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13219:5036":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:43373:6675":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9822:6986":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:247:6947":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13777:5197":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:9875:2653":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:9275:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10418:7175":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:42668:6545":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4899:7461":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"11:387:34363":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10721:4525":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2572:3259":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:1845:2940":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:10079:6545":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:39957:6612":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:11576:12646":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:6615:7192":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:11902:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6094:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6662:6471":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:38925:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:7099:7301":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:2084:6524":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:4767:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46671:6343":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12372:4781":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4346:5622":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:20366:2567":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10377:4511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"0:0:1919":{"crate_id":0,"path":["version_check"],"kind":"module"},"1:11900:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2113:6526":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:11896:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:7475:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5722:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3871:7399":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9796:4470":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10823:3166":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11282:4560":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:21644:3775":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5367:18546":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:43249:6668":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:22240:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:38881:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:2633:4227":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:39287:12722":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4890:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:3585:5237":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3164:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:491:6397":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7411:3376":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"14:0:2279":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12224:4757":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10334:4465":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8113:7360":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7826:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:2069:7104":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:678:7287":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4422:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7596:19441":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8810:2597":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:10940:3072":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:22339:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:5696:30652":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:4877:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:31794:7145":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:2074:2970":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:697:7096":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2854:12794":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9054:2661":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6594:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4733:3046":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4637:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10000:3212":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:39737:6606":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44444:3938":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:39611:6592":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2546:3258":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:4357:3012":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3935:7403":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4618:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4501:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4439:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6868:5241":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9028:6960":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:4904:3321":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:21609:3774":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:2166:32765":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5104:3327":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4483:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4429:5659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3537:2654":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4757:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:30602:2567":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4572:6167":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:41974:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:590:4436":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:44937:3960":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:30204:30251":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22009:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:9534:6974":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21260:32619":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:11105:6875":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:869:2597":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3170:12700":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:21636:6312":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12799:4854":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5557:3275":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7588:7089":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:20394:32615":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:3266:6959":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10047:6887":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:8823:3201":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6696:19437":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2929:2436":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4969:3323":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:4100:7425":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:725:6517":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11299:4563":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8835:4105":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2448:3254":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12293:4771":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12646:4832":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10039:7004":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:7452:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9380:19512":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:42854:6641":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41965:6621":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:2903:33310":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:499:5332":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:762:2940":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13879:5222":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:2795:7539":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5496:2410":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45347:3981":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13426:5089":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1984:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9917:1694":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:30040:30232":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:1645:5481":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:4277:2984":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12236:4759":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12019:4479":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:45507:3983":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:20839:7548":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13564:5149":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6719:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12496:4808":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11320:3078":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12403:4787":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"15:0:2280":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3244:7175":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12318:4774":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:780:2955":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:9060:2670":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:5920:6535":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6854:3475":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9617:6976":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41295:7134":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"14:187:18522":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4751:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39385:3881":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:39027:6315":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8181:7393":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:538:4433":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:20832:7415":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"0:80:1738":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"1:10415:7173":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4862:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4743:5770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:22075:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1716:5521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1550:5412":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:1029:7105":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2677:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:751:2977":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:822:7302":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:242:6946":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3991:7408":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3673:7178":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11821:4683":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1604:5449":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:5351:2407":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:7796:6685":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2834:3500":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:9310:12734":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:46607:6339":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1239:6867":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:3241:12615":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:11512:7482":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4520:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4945:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:41438:2670":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7146:30260":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4369:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21621:30245":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7038:27873":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5716:7190":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9696:4458":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6053:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2742:3266":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:9267:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:8291:7132":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13159:5018":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:738:6518":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11384:7179":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8758:2414":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:9488:6970":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:43566:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11832:4686":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1836:2597":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46596:6338":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4841:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:6182:3048":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4675:7414":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:4932:3322":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11879:4692":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6990:3479":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:8072:6501":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46724:6346":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:154:2929":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:3225:5234":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7173:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2667:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"15:180:18528":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"9:325:5316":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6431:6456":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10923:6438":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10712:19612":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:11556:7132":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:815:7097":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1687:5510":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:6580:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9853:6989":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:43445:3921":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4312:2681":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13181:5022":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4900:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6819:3470":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:632:2653":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8880:7504":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"0:75:1693":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"16:55:3590":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:39243:3878":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2426:3253":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10142:19585":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:20626:7552":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:39963:6614":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1055:33306":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:21585:3769":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6326:7192":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2918:2658":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:39006:3538":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:46701:6345":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:39206:6563":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8632:19479":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5677:19431":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1609:2952":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:11301:6634":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8085:3537":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:10006:7136":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1704:5517":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:44745:3954":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:39982:6316":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:11565:6407":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:20563:7550":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13292:5050":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2470:3255":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:12343:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:1401:6517":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9886:6992":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2846:12792":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:586:5385":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:31798:6561":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:43424:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:1978:4042":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:50278:6347":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4673:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7509:3289":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:8490:19497":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10068:7008":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8928:7215":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2675:2571":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3969:7404":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2909:33309":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5910:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:48938:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:3142:6958":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2378:3251":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:42904:6643":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:1648:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:7791:7197":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:6751:7540":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8101:2419":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3181:6522":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5660:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3454:2430":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2502:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:4240:6871":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12331:4776":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40524:7394":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:12385:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10680:6349":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:42754:6635":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6649:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11770:4671":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:20651:7542":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:578:5380":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:39663:6597":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4092:7424":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42636:3203":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4451:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:562:3234":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8931:3205":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5071:3326":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:39723:6605":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1527:5402":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13066:5000":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:10685:7141":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:599:34396":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11214:4125":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:30098:30220":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12770:4834":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46587:6337":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13821:5212":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:20432:32647":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8816:4104":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13024:4988":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13689:5174":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:44961:3961":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1559:5418":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:3446:5236":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2866:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9986:6420":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:44723:3953":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11476:6361":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:11343:7178":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:5331:2406":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"14:31:6859":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2756:2579":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:669:7095":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9453:19514":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:3436:2431":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9098:6961":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13516:5112":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12419:4788":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5951:6064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13506:5107":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7449:7082":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7697:3283":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4841:7454":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10589:6430":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:11089:12867":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:1065:34361":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:4307:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:20729:4245":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:9200:7135":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:6243:34379":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4261:5567":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:42608:3912":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12126:4728":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:44891:3958":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10824:3736":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8144:6605":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7293:3519":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:877:6517":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:39510:7149":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:12354:3035":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4091:7128":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:38837:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11258:4559":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3604:2952":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:0:2273":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9188:34392":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11946:4703":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:531:6398":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4741:32453":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:42538:7154":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10989:3230":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"18:727:4451":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1574:2940":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:10840:3224":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13257:5044":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12576:4816":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22372:3793":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6351:19435":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6773:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6919:34377":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4400:3306":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:41175:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7272:2940":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:31758:2417":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43177:6662":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:736:23353":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3611:7395":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:39200:6562":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2357:7351":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11861:4691":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:6079:3035":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9228:34389":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13453:5096":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:11918:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12033:4716":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4322:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9048:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:652:4428":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8773:32648":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:6701:12759":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:30574:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:9967:6544":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5436:2409":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2840:3501":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:40802:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:6514:2992":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}