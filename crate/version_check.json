{"root":"0:0:2658","crate_version":"0.9.4","includes_private":false,"index":{"0:42:2448":{"id":"0:42:2448","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13726:2407":{"id":"2:13726:2407","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42605:8932-0:93:2433":{"id":"a:2:42605:8932-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42605:8932","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13642:32040":{"id":"2:13642:32040","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13643:32056"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44655:7953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2863:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3081-0:127:2434":{"id":"b:2:3081-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3084:2531"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2808-0:93:2433":{"id":"b:2:2808-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2810:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2781:25911":{"id":"2:2781:25911","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:93:2433":{"id":"b:2:3081-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3084:2531"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3091-0:127:2434":{"id":"b:2:3091-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3094:141","2:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3096-0:93:2433":{"id":"b:2:3096-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3099:141","2:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13624:26692":{"id":"2:13624:26692","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5976:1814":{"id":"5:5976:1814","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2900:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3339:3342-0:93:2433":{"id":"a:2:3339:3342-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3339:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13714:33530":{"id":"2:13714:33530","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:34227":{"id":"5:5722:34227","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3200","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2811-0:127:2434":{"id":"b:2:2811-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2813:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2461":{"id":"0:78:2461","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13729:2405":{"id":"2:13729:2405","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2388":{"id":"0:24:2388","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:127:2434"],"is_stripped":true}}},"b:5:5974-0:127:2434":{"id":"b:5:5974-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5976:1814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13670:26728":{"id":"2:13670:26728","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split":"2:13664:2398"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44399:7858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2813:25910":{"id":"2:2813:25910","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13697:33525":{"id":"2:13697:33525","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatch_indices":"2:13700:33526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44531:7946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2894:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:493"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13646:32054":{"id":"2:13646:32054","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44673:7955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3339:3342-0:140:2435":{"id":"a:2:3339:3342-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3339:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32802:3194-0:140:2435":{"id":"a:2:32802:3194-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32802:3194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2808-0:127:2434":{"id":"b:2:2808-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2810:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13636:26723":{"id":"2:13636:26723","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13637:26724"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:14300":{"id":"5:5723:14300","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2863:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13656:3401":{"id":"2:13656:3401","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13650:2525":{"id":"2:13650:2525","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2844":{"id":"0:16:2844","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5974-0:93:2433":{"id":"b:5:5974-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5976:1814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3096-0:127:2434":{"id":"b:2:3096-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3099:141","2:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:2485":{"id":"0:81:2485","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13644:2394":{"id":"2:13644:2394","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44635:7951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2658":{"id":"0:0:2658","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:2433","`is_max_version`":"0:80:2477","`is_exact_version`":"0:81:2485","`is_max_date`":"0:77:2454","`is_exact_date`":"0:78:2461","`triple()`":"0:75:2432","`Date`":"0:140:2435","`Channel`":"0:127:2434"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:2432","0:76:2446","0:77:2454","0:78:2461","0:79:2469","0:80:2477","0:81:2485","0:82:2495","0:84:2509","0:60-0:3:1964","0:61-0:24:2388","0:62-0:39:2389"],"is_stripped":false}}},"2:13634:26719":{"id":"2:13634:26719","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13636:26723","str::split_at_mut":"2:13635:26720"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:3422":{"id":"5:786:3422","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2956":{"id":"0:36:2956","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13723:33531":{"id":"2:13723:33531","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2448","0:30:2438","0:32:2496","0:33:2945","0:34:2949","0:35:2953","0:36:2956"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13664:2398":{"id":"2:13664:2398","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split_whitespace":"2:13642:32040","str::rsplit":"2:13670:26728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44381:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:33518":{"id":"2:13621:33518","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:61-0:24:2388":{"id":"0:61-0:24:2388","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:2388","glob":true}}},"2:13617:33517":{"id":"2:13617:33517","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13615:33516"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3921-0:93:2433":{"id":"b:2:3921-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32745:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2851":{"id":"0:54:2851","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2810:25910":{"id":"2:2810:25910","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611":{"id":"2:13611","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13612:1016","2:13613:3364","2:13614:33515","2:13615:33516","2:13617:33517","2:13620:27898","2:13621:33518","2:13622:342","2:13623:26696","2:13624:26692","2:13626:26693","2:13628:26694","2:13630:26695","2:13632:33519","2:13633:33520","2:13634:26719","2:13635:26720","2:13636:26723","2:13637:26724","2:13639:7956","2:13640:7966","2:13641:4710","2:13642:32040","2:13643:32056","2:13644:2394","2:13645:33521","2:13646:32054","2:13647:2928","2:13650:2525","2:13653:2402","2:13656:3401","2:13660:3363","2:13664:2398","2:13667:26726","2:13670:26728","2:13673:33522","2:13676:33523","2:13679:2411","2:13682:26731","2:13685:26733","2:13688:26734","2:13691:3141","2:13694:33524","2:13697:33525","2:13700:33526","2:13703:2397","2:13705:33527","2:13707:33528","2:13709:2406","2:13710:2404","2:13711:33529","2:13714:33530","2:13717:25957","2:13720:26735","2:13723:33531","2:13726:2407","2:13729:2405","2:13732:2438","2:13734:26161","2:13735:27936","2:13736:26162","2:13737:26158","2:13738:26157","2:13739:27939","2:13740:27940","2:13741:27941","2:13742:33532","2:13744:8725","2:13745:33533"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13694:33524":{"id":"2:13694:33524","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::matches":"2:13691:3141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44603:7950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1319":{"id":"0:105:1319","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31503:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3923:1854":{"id":"2:3923:1854","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40226:5378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13705:33527":{"id":"2:13705:33527","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3091-0:93:2433":{"id":"b:2:3091-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3094:141","2:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3081-0:140:2435":{"id":"b:2:3081-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3084:2531"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2779-0:127:2434":{"id":"b:2:2779-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2781:25911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3304:252-0:93:2433":{"id":"a:2:3304:252-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3085-0:93:2433":{"id":"b:2:3085-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:2448":{"id":"0:27:2448","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:486":{"id":"0:139:486","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:2389":{"id":"0:62-0:39:2389","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:2389","glob":true}}},"2:13613:3364":{"id":"2:13613:3364","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13630:26695":{"id":"2:13630:26695","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:33521":{"id":"2:13645:33521","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44645:7952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:34230":{"id":"5:5737:34230","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42604:8732-0:93:2433":{"id":"a:2:42604:8732-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42604:8732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3095:1841":{"id":"2:3095:1841","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13688:26734":{"id":"2:13688:26734","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13635:26720":{"id":"2:13635:26720","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13634:26719","str::split_at_mut_checked":"2:13637:26724"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2894:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:493"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:2851":{"id":"0:18:2851","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13622:342":{"id":"2:13622:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13623:26696","`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2836":{"id":"0:50:2836","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13739:27939":{"id":"2:13739:27939","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38181"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2953":{"id":"0:35:2953","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:7956":{"id":"2:13639:7956","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44351:7934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:2496":{"id":"0:32:2496","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2779-0:140:2435":{"id":"b:2:2779-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2781:25911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3339:3342-0:127:2434":{"id":"a:2:3339:3342-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3339:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2776-0:140:2435":{"id":"b:2:2776-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:3128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:84:2509":{"id":"0:84:2509","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:2495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:27936":{"id":"2:13735:27936","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40412:14242","Self::is_ascii":"2:13734:26161"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40412:14242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:26160":{"id":"5:5740:26160","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13737:26158"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13703:2397":{"id":"2:13703:2397","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:2438":{"id":"0:9:2438","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13709:2406":{"id":"2:13709:2406","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2900:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:2477":{"id":"0:80:2477","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:819":{"id":"0:131:819","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:493":{"id":"0:156:493","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31503:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2438":{"id":"0:45:2438","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5974-0:140:2435":{"id":"b:5:5974-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5976:1814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6:2448":{"id":"0:6:2448","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:714":{"id":"0:98:714","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:1964":{"id":"0:3:1964","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:2433"],"is_stripped":true}}},"0:77:2454":{"id":"0:77:2454","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:27898":{"id":"2:13620:27898","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12848:2424"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13643:32056":{"id":"2:13643:32056","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13642:32040"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44664:7954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:2448","0:45:2438","0:48:2982","0:50:2836","0:52:2844","0:54:2851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32802:3194-0:93:2433":{"id":"a:2:32802:3194-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32802:3194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:819":{"id":"0:21:819","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3100:1839":{"id":"2:3100:1839","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3091-0:140:2435":{"id":"b:2:3091-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3094:141","2:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13717:25957":{"id":"2:13717:25957","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3921-0:127:2434":{"id":"b:2:3921-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13615:33516":{"id":"2:13615:33516","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2469":{"id":"0:79:2469","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3304:252-0:140:2435":{"id":"a:2:3304:252-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13641:4710":{"id":"2:13641:4710","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44367:4115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13673:33522":{"id":"2:13673:33522","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13301:14165","str::split":"2:13664:2398","prim@char":"1:12452:482","`DoubleEndedIterator`":"2:8451:133","str::rsplit_terminator":"2:13676:33523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44431:7940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:819":{"id":"0:144:819","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2435":{"id":"0:140:2435","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:3304:252-0:140:2435","a:2:3339:3342-0:140:2435","a:2:42604:8732-0:140:2435","a:2:32743:240-0:140:2435","a:2:32802:3194-0:140:2435","a:2:42605:8932-0:140:2435","b:2:3085-0:140:2435","b:2:2776-0:140:2435","b:2:3921-0:140:2435","b:2:2808-0:140:2435","b:2:2811-0:140:2435","b:2:2779-0:140:2435","b:2:3091-0:140:2435","b:2:3081-0:140:2435","b:2:3096-0:140:2435","b:5:783-0:140:2435","b:5:5974-0:140:2435","0:153","0:146","0:151","0:155","0:148","0:145","0:56","0:150","0:143"]}}},"0:39:2389":{"id":"0:39:2389","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:140:2435"],"is_stripped":true}}},"2:13720:26735":{"id":"2:13720:26735","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2863:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:819":{"id":"0:57:819","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2438":{"id":"0:30:2438","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13614:33515":{"id":"2:13614:33515","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:27941":{"id":"2:13741:27941","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38181"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:783-0:140:2435":{"id":"b:5:783-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:785:3421","5:786:3422","5:787:3423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:2945":{"id":"0:33:2945","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32745:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:2446":{"id":"0:76:2446","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13737:26158":{"id":"2:13737:26158","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13626:26693":{"id":"2:13626:26693","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32745:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:486":{"id":"0:152:486","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13707:33528":{"id":"2:13707:33528","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2433":{"id":"0:93:2433","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:3304:252-0:93:2433","a:2:3339:3342-0:93:2433","a:2:42604:8732-0:93:2433","a:2:32743:240-0:93:2433","a:2:32802:3194-0:93:2433","a:2:42605:8932-0:93:2433","b:2:3085-0:93:2433","b:2:2776-0:93:2433","b:2:3921-0:93:2433","b:2:2808-0:93:2433","b:2:2811-0:93:2433","b:2:2779-0:93:2433","b:2:3091-0:93:2433","b:2:3081-0:93:2433","b:2:3096-0:93:2433","b:5:783-0:93:2433","b:5:5974-0:93:2433","0:22","0:20","0:101","0:104","0:96","0:99","0:102","0:97","0:106"]}}},"2:2778:3128":{"id":"2:2778:3128","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1964":{"id":"0:60-0:3:1964","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1964","glob":true}}},"2:13633:33520":{"id":"2:13633:33520","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12458:1754","crate::ops::IndexMut":"2:3583:8764","str::slice_unchecked":"2:13632:33519"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:34228":{"id":"5:5726:34228","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:34229":{"id":"5:5729:34229","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2836":{"id":"0:14:2836","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42604:8732-0:140:2435":{"id":"a:2:42604:8732-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42604:8732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:34227","5:5723:14300","5:5726:34228","5:5729:34229","5:5737:34230","5:5738:34231","5:5739:8839","5:5740:26160","5:5741:26159"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3087:849":{"id":"2:3087:849","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42605:8932-0:140:2435":{"id":"a:2:42605:8932-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42605:8932","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3094:141":{"id":"2:3094:141","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:32743:240-0:140:2435":{"id":"a:2:32743:240-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13736:26162":{"id":"2:13736:26162","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:2928":{"id":"2:13647:2928","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:2949":{"id":"0:34:2949","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3096-0:140:2435":{"id":"b:2:3096-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3099:141","2:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13679:2411":{"id":"2:13679:2411","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165","str::rsplitn":"2:13682:26731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44485:7943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32743:240-0:127:2434":{"id":"a:2:32743:240-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13745:33533":{"id":"2:13745:33533","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5122:33533"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44698:7880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:787:3423":{"id":"5:787:3423","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32743:240-0:93:2433":{"id":"a:2:32743:240-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3921-0:140:2435":{"id":"b:2:3921-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:819":{"id":"0:23:819","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:493":{"id":"0:107:493","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31503:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:26733":{"id":"2:13685:26733","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42605:8932-0:127:2434":{"id":"a:2:42605:8932-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42605:8932","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32802:3194-0:127:2434":{"id":"a:2:32802:3194-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32802:3194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2808-0:140:2435":{"id":"b:2:2808-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2810:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2982":{"id":"0:48:2982","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13711:33529":{"id":"2:13711:33529","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13327:14162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2776-0:93:2433":{"id":"b:2:2776-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:3128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13732:2438":{"id":"2:13732:2438","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13262:140","`FromStr`":"2:13261:8791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13261:8791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13261:8791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2779-0:93:2433":{"id":"b:2:2779-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2781:25911"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2776-0:127:2434":{"id":"b:2:2776-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:3128"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5738:34231":{"id":"5:5738:34231","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3200","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13612:1016":{"id":"2:13612:1016","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13691:3141":{"id":"2:13691:3141","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatches":"2:13694:33524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44585:7949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:486":{"id":"0:103:486","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:819":{"id":"0:38:819","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:26696":{"id":"2:13623:26696","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13700:33526":{"id":"2:13700:33526","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13301:14165","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::match_indices":"2:13697:33525"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44549:7947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13710:2404":{"id":"2:13710:2404","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3085-0:140:2435":{"id":"b:2:3085-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3085-0:127:2434":{"id":"b:2:3085-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13:2823":{"id":"0:13:2823","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:3421":{"id":"5:785:3421","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:134:714":{"id":"0:134:714","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:7966":{"id":"2:13640:7966","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44357:7935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13660:3363":{"id":"2:13660:3363","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13667:26726":{"id":"2:13667:26726","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13116:7857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13676:33523":{"id":"2:13676:33523","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13301:14165","str::split":"2:13664:2398","prim@char":"1:12452:482","str::split_terminator":"2:13673:33522"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44449:7941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13738:26157":{"id":"2:13738:26157","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13637:26724":{"id":"2:13637:26724","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13636:26723"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2811-0:140:2435":{"id":"b:2:2811-0:140:2435","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2813:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:783-0:93:2433":{"id":"b:5:783-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:785:3421","5:786:3422","5:787:3423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3084:2531":{"id":"2:3084:2531","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3058:148"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13740:27940":{"id":"2:13740:27940","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38181"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3304:252-0:127:2434":{"id":"a:2:3304:252-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42604:8732-0:127:2434":{"id":"a:2:42604:8732-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42604:8732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75:2432":{"id":"0:75:2432","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:2433","`Version::read()`":"0:6:2448","`Channel`":"0:127:2434","crate":"0:0:2658","`Channel::read()`":"0:27:2448","`Date::read()`":"0:42:2448","`Date`":"0:140:2435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13628:26694":{"id":"2:13628:26694","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:8725":{"id":"2:13744:8725","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5125:8725"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44689:7877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:2448","0:9:2438","0:12:2811","0:13:2823","0:14:2836","0:16:2844","0:18:2851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:1319":{"id":"0:154:1319","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31503:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2844":{"id":"0:52:2844","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13632:33519":{"id":"2:13632:33519","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12458:1754","str::slice_mut_unchecked":"2:13633:33520","crate::ops::Index":"2:40057:8763"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:26159":{"id":"5:5741:26159","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13738:26157"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:8839":{"id":"5:5739:8839","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:714":{"id":"0:147:714","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2811-0:93:2433":{"id":"b:2:2811-0:93:2433","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3299:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2806:3349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2813:25910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:2434":{"id":"0:127:2434","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:3304:252-0:127:2434","a:2:3339:3342-0:127:2434","a:2:42604:8732-0:127:2434","a:2:32743:240-0:127:2434","a:2:32802:3194-0:127:2434","a:2:42605:8932-0:127:2434","b:2:3085-0:127:2434","b:2:2776-0:127:2434","b:2:3921-0:127:2434","b:2:2808-0:127:2434","b:2:2811-0:127:2434","b:2:2779-0:127:2434","b:2:3091-0:127:2434","b:2:3081-0:127:2434","b:2:3096-0:127:2434","b:5:783-0:127:2434","b:5:5974-0:127:2434","0:133","0:130","0:37","0:138","0:137","0:135","0:132"]}}},"2:13734:26161":{"id":"2:13734:26161","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3099:141":{"id":"2:3099:141","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32667:3176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:82:2495":{"id":"0:82:2495","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:2509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2811":{"id":"0:12:2811","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:783-0:127:2434":{"id":"b:5:783-0:127:2434","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:779:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:785:3421","5:786:3422","5:787:3423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13742:33532":{"id":"2:13742:33532","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5124:33532"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44680:7881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:2402":{"id":"2:13653:2402","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13682:26731":{"id":"2:13682:26731","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12452:482","str::splitn":"2:13679:2411","self::pattern":"2:13301:14165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44503:7944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:14163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:41016:7884":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10793:5570":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:45356:5002":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:8223:7787":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46898:5077":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:7724:3374":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14997:5931":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:963:8464":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:1623:3368":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:3381:14129":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:6777:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:41075:4960":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46754:5055":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6239:4270":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:8028:6456":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:42806:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:1085:7780":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4929:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5417:4254":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:1489:6563":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43202:3438":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11788:3183":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:3436:4433":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:33274:4431":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1674:35199":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11016:8318":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2724:4189":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8290:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10803:4115":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:16668:6406":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:1584:6618":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11794:5226":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:41316:7904":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:16209:6289":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5255:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7737:4705":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:44830:7968":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"9:236:7568":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3310:30079":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3569:7999":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46690:5051":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:44977:7976":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11261:3174":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13818:5694":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47717:7591":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:10543:3447":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:328:7807":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:45111:7986":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:4674:8516":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:42595:8208":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7192:21618":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7113:14195":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8368:8838":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10663:4112":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:44187:7860":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:643:5545":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2530:4180":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16507:5680":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2820:3350":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"2:41748:7922":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2209:2651":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:4984:3348":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:42417:32181":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:22018:32196":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:5144:4245":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:2860:4195":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4984:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:8267:4502":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5586:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:973:8746":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9256:8960":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:2415:20723":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11114:8320":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:39:8765":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:187:20691":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6480:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:8302:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4702:8898":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:42732:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5649:4256":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6144:21611":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:13316:7680":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13082:8321":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:4792:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:689:7677":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40129:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:2815:5359":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44878:7969":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12225:7707":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:8319:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6302:4284":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7716:35221":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:47060:5083":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:15641:6128":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10474:3181":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:41710:7917":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:6502:20722":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:9511:8211":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"16:7471:4415":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42699:3368":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4976:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13451:4150":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:34902:4438":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:984:8748":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6902:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:11878:7944":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"15:288:20703":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:4566:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:2670:14330":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:6588:4335":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15981:6212":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14947:5914":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8643:8609":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:6659:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10274:21678":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4997:8583":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:13261:8791":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6790:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12046:8015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22167:5385":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6564:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4827:7404":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:23462:8808":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:1984:8215":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:3126:20753":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:0:3037":{"crate_id":17,"path":["object"],"kind":"module"},"16:5224:4248":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:8284:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13306:4144":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16283:6310":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:472:8300":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:7180:8991":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:42691:3427":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11926:5592":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"13:0:3027":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3029:14241":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:735:25880":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1703:6693":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2508:8804":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:45437:7991":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14358:5811":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"9:422:20598":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3297:268":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5334:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:23332:4720":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:517:6521":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:698:3368":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:1580:8478":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:4542:8514":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2506:4179":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1643:6662":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11910:8577":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1907:7812":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12457:1720":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:2227:8304":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:4498:34567":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22273:8994":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4956:4240":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:46948:5079":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41044:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22030:32196":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6381:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1563:6604":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:7487:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:396:35189":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46821:5058":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:1684:6686":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8889:3426":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3448:8575":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13398:4147":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12451:1196":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5366:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:10535:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:0:3038":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:42273:4963":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10516:21686":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11822:5229":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5682:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:34171:14310":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:8711:4545":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:2086:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46395:5023":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13014:8385":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:6262:7838":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:23430:4733":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15077:5939":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13635:5651":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3084:3421":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:9344:8621":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4233:8876":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11291:35231":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:7080:7847":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:6449:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11129:29879":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:12466:928":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:16297:6312":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:521:25882":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4921:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:23245:4713":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13921:5710":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:7085:7845":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:46544:5036":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3110:4224":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11026:35232":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:43742:160":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5428:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:11712:8526":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:16171:6280":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:44905:7970":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47545:5127":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:390:20597":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:896:8396":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:15769:6157":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:32720:8542":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15655:6132":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"9:53:20614":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5282:4250":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9425:8225":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:14975:5920":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15036:5934":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9241:8961":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:10993:143":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:12840:7715":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:47347:5121":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:13078:7948":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6625:7742":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:718:5565":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:5305:8313":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13945:5714":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:299:7804":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:12424:8532":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:13838:5695":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12435:25939":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:506:4051":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4766:4234":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4177:8871":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2347:34893":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12816:4152":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:8233:21623":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:11605:3427":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14043:5731":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:523:6524":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:23510:4738":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:8875:14291":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:42626:14391":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:6211:5397":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:31130:4751":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44367:4115":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43557:3437":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:23348:31753":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11579:8330":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:123:7803":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12711:8378":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6064:4208":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:1907:3582":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:1385:8473":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6042:4206":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:12462:14158":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5186:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6521:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:0:3032":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:16656:6404":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:42917:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:515:5548":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3366:4432":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4163:8869":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:687:8727":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11173:35233":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:16264:6305":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15439:6069":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11012:3178":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:12053:8015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:7391:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:47592:7577":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:96:25871":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44531:7946":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8358:8603":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:15410:6058":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45095:7982":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:44942:7971":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:23299:4719":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:44967:7972":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11678:8332":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41733:7920":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7508:7776":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7531:3800":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:0:3030":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7462:8440":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11319:35229":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12335:8365":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5395:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12163:7702":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14832:5898":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14299:5800":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:11029:25945":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11248:3172":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6526:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:5426:8519":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:3403:8572":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:5425:14145":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:15852:6175":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9437:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14346:5809":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5088:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:32743:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43511:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:14114:5755":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:40886:4956":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4119:8866":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43067:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:13002:7937":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:281:34571":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:14257:7868":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:8801:7568":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:47649:7582":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12524:8368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:43970:7932":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:679:8558":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:768:157":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46363:5021":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:4825:7402":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:4267:4231":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6917:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:7590:34524":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5348:4252":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:5179:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44689:7877":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6813:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6890:4204":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10983:7605":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:8298:7788":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7969:7785":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:772:7809":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8151:4221":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:5295:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4914:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5629:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:7282:4405":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2323:8472":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:2498:8799":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:7946:14287":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:12848:2424":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14807:5895":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:8179:4494":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4705:5379":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:2466:8489":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:583:8301":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:24072:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4815:8871":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:4241:4230":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:13062:7945":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"14:0:3034":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7287:34542":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8049:5600":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12570:8371":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12886:7721":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12008:4044":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5575:14150":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:43772:7931":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12280:8359":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11833:8012":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13006:5647":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:954:8476":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:23576:4744":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:14312:5802":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"5:3363:7814":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5311:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:1871:3573":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:2121:7780":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12260:21792":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"11:2566:4702":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22918:9084":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:5727:4106":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8196:4045":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15973:6211":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:36778:4439":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43481:4515":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:1690:6689":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"0:80:2477":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"18:481:7669":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4680:8897":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:575:8716":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:14375:5814":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:45323:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46529:5035":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42991:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1523:3426":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:8165:4211":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11309:8323":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:14294:155":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:984:8468":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12699:8377":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2147:5142":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4162:34571":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4171:8870":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8223:5141":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:3014:20751":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3677:3189":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:6652:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:14152:5763":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:5105:8916":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:3747:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:8273:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:581:3335":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:45305:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12453:1906":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11592:4089":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6781:4342":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:6179:14634":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:1140:8475":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:14001:5726":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10977:35235":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6904:7747":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:1339:8303":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14393:5815":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14796:5893":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"9:176:20663":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:8296:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:479:6498":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7839:8239":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:12723:8379":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:4528:7999":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:41351:4448":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:8276:8220":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1049:8473":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47779:5129":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:23260:7869":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12039:28430":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43497:31765":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:4132:8477":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:4404:4232":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14220:5767":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13322:21689":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"14:220:6467":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10974:5215":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:8255:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:41524:7915":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10115:21673":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:364:35187":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3308:34532":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:40013:14132":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11788:8335":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6473:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:13926:8533":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:3777:32060":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:613:35237":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:26472:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:9478:5214":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:43519:3435":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:881:8471":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14547:5839":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44763:14176":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4902:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12293:8361":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:682:8560":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42451:7997":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40111:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:46965:5080":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:623:35236":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4120:4227":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7648:3368":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3185:8513":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:8617:7997":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:4464:7999":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:38654:14316":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:41510:7914":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5341:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5381:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:16332:6325":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3850:5142":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:44645:7952":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5379:4253":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:6746:5399":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:44549:7947":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11720:7691":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6731:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:47437:5123":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12736:8380":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:8504:3198":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5019:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13095:5649":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:9548:8522":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10487:21685":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:2437:8308":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47077:5084":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:5301:7827":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1491:159":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:23368:31777":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:2380:3426":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:8906:5203":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12319:8363":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:23532:4740":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:12478:1447":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:10547:3444":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:12832:8212":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11958:8343":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:1105:8474":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10771:8570":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13909:5707":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46625:5048":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:7695:4702":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12673:8372":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5648:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15939:6203":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7896:4096":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1727:6702":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:30862:8851":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4939:8882":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15557:4166":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10394:21682":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40830:7878":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14738:5880":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:497:6504":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11606:5587":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:23499:4737":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:7548:7829":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11839:8013":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"15:0:3035":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12952:7725":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44449:7941":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6822:21615":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:7332:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11222:8321":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45414:5007":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:7586:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45377:32592":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:7089:14194":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3455:8489":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8031:5135":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10953:8001":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:8330:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13193:8393":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:925:7810":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7938:7781":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:8565:7798":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:34556:14314":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"11:1888:8477":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4829:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5641:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11421:8324":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:23587:4745":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:1615:8464":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:47466:5124":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46416:5028":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47702:7590":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:32803:3346":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5318:4251":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6758:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:46483:5032":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7335:8235":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:32709:8541":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:6640:8406":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:11281:8322":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:1249:34536":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3386:14130":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:41087:4115":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:12906:5639":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:40219:8543":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:22155:8996":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15475:6099":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10141:21674":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:12452:482":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2590:4183":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7721:4703":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:22008:3335":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:38819:14319":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5195:8924":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2208:14341":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"11:809:8489":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6998:7749":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:4896:7831":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47687:7589":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12992:5644":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7620:4701":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:31124:3351":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10246:21677":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:3309:3340":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:41303:7903":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11068:25933":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:3695:6444":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14586:5843":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11950:8578":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12472:1866":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:1220:8302":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11432:21700":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:42473:4979":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42843:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3339:3342":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10696:4113":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:884:193":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:16341:6327":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44431:7940":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:23620:4748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:2496:8798":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:5526:34571":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:8343:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"15:306:20704":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14140:5760":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:5362:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:43469:7566":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7789:35223":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:948:8489":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22842:9080":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10597:4110":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9460:165":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11272:25958":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:42289:4965":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:5570:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:3854:8311":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10774:8572":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:46838:5059":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6437:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5172:4246":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6837:8438":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:14237:7866":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4161:3368":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22047:32190":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7959:7784":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46500:5033":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:6065:8591":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3799:34571":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10368:21681":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:40412:14242":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:7706:8745":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15679:6134":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7223:4390":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:43442:7555":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:38709:14317":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14573:5842":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:1601:8479":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12826:7711":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:41222:137":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:5666:3167":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13970:5717":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15777:6159":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11733:21720":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"10:44:6483":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:15602:6119":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8672:7391":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12537:8369":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1657:6673":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:23192:5389":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3602:2585":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11407:8242":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:2550:4181":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5804:3169":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6794:7744":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:10173:32287":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:4221:8873":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5069:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46927:5078":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10549:3445":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11298:5214":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:5551:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3055:166":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:7743:31008":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41282:7901":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:31503:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:34729:14315":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:14214:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:5865:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7838:21621":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10280:4975":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:41023:7885":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:6462:21614":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15064:5938":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:79:2469":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"1:8255:7995":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1085:35184":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:6310:2434":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5450:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40920:7880":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:485:6500":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:3352:8571":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7159:7762":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5301:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6700:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:6560:9087":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8559:7853":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12931:5640":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2020:802":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:8066:21622":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10823:4117":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:11581:3426":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7540:3368":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11691:8333":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:6579:9088":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:12869:4150":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40909:4957":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:553:6542":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10565:30728":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"6:5357:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8635:8612":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14672:5855":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:11424:8808":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13515:21690":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5114:8917":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"13:229:6475":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40089:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:45008:7980":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40226:5378":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:531:7671":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5630:3165":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:45119:7988":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1554:3368":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:651:5545":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42555:3368":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:5468:996":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:23410:7873":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6205:21612":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5405:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:4832:8207":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:44655:7953":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5057:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8284:5142":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:155:5348":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:22263:8808":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5462:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1667:6679":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12419:30996":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:7:8193":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44308:8551":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:663:8214":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8824:5390":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:22:834":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:6402:29870":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:4028:8477":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7949:4216":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8353:7543":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7168:4378":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41739:7921":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:31530:3335":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:8866:153":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:16311:6319":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10950:32350":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:12550:5629":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11147:29887":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6462:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:44603:7950":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:4184:4229":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2105:685":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:5742:4107":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:22149:8993":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:16613:5694":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:6758:34571":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7044:4210":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22585:32193":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3583:8764":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40860:4953":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4349:8894":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7454:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42683:3426":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:830:8476":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11386:21699":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:11434:243":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5449:4255":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:47524:5126":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8546:7913":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3916:8578":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12476:985":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:8008:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:23310:32153":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47010:5081":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10332:21680":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15989:6214":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12463:755":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22930:32422":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:8267:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7731:4985":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12234:4130":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5271:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7919:8450":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7906:8240":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46515:5034":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4211:8872":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7604:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11831:5580":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2966:4200":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46380:5022":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15896:6189":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:8598:8462":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5060:4242":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:7824:8205":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:14933:5912":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:9661:8523":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:8913:32143":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3446:8574":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22573:5386":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"3:0:516":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3551:145":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:5872:5397":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:23276:4714":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4875:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:25:711":{"crate_id":2,"path":["core","env"],"kind":"macro"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:46462:5031":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14520:5835":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15010:5932":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8736:8928":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10729:4114":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8578:8611":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:9190:3426":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3513:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:22798:9079":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:6123:4207":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4970:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:23609:4747":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:6493:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9433:7999":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:22064:32187":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14460:5826":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:1569:6606":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:5195:14229":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:2467:4172":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6337:4288":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:7951:29868":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:47392:5122":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"0:78:2461":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"1:4113:8867":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12477:1946":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12204:7705":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:9356:8623":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:22076:32200":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12471:1884":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:7580:4700":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:9271:8962":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15621:6120":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4805:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6740:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:3085:34963":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43957:7572":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"6:465:6490":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:8612:4223":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:16179:6283":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7560:8477":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:667:4096":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:42530:176":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6843:7746":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:38764:14318":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6942:7748":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10406:8627":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:10784:8315":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"11:434:35194":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6970:4205":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:11906:8530":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11358:21698":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14845:5900":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:888:8483":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:41060:14378":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2400:3427":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:6731:8435":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10168:32144":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:2349:8473":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:3091:34959":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14335:5806":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7883:4308":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11232:21701":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12122:7699":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12625:5632":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:500:4681":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4369:3426":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8235:143":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"10:0:3031":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5117:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5658:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:43030:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40189:8739":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46331:5017":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15050:5935":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13070:5587":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"13:110:35202":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:15136:5640":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:4753:3454":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:2255:8711":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:1585:7810":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:43725:7928":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13361:4146":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12056:5593":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13692:5657":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12066:2433":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12238:28096":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:46587:5046":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:10748:156":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:43733:7929":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15549:6110":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10958:8003":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:23554:4742":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:6824:8228":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3378:14128":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:11823:8528":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:1619:3426":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9377:25952":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6953:4355":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:6185:7999":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7980:4217":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5635:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:10539:3438":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:13116:7857":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:33486:4428":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:0:3036":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4964:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:908:8299":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:835:8465":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:8261:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:16187:6284":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1494:6565":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4902:4238":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:45425:4626":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:578:6555":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:22094:8808":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46348:5020":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:8636:21625":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12044:8353":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1625:6650":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41500:7913":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14533:5602":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13537:5640":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:16832:5716":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:7074:7848":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:47566:5128":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41194:7888":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:41717:7918":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:9397:5213":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:8422:3199":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4869:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5319:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"0:76:2446":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"1:3350:8570":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41326:7905":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8694:7607":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14084:5743":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11566:8329":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:23054:9076":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45388:8552":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:4941:8884":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15531:6105":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12787:5635":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7518:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12306:7708":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:8097:3592":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11401:5574":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41264:7899":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:9139:3173":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:41766:7923":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2863:138":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44673:7955":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14507:5832":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2083:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44279:7863":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6389:8399":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:41375:7910":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47623:7580":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"7:32:20583":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5007:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:13375:14170":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:14349:8749":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13958:5716":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:8118:4475":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11878:5587":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13041:8388":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:6638:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:480:20595":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11075:35234":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:7829:14238":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:2215:5373":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43717:7926":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:41152:7862":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8112:3593":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7350:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11045:3593":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:16520:6355":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"11:2533:6476":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3752:150":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:608:8292":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:11673:7857":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8727:8221":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:16728:6422":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:912:7809":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:40239:7551":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11124:35230":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42539:3426":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:11087:32347":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:4844:4236":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1099:8472":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43754:7568":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16198:6288":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10564:4108":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:47495:5125":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3405:8573":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:2660:4186":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7337:4411":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11805:8338":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10537:3439":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13662:5653":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14031:5730":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12135:7700":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6852:4345":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:44340:4990":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7765:4708":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:3133:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42547:3427":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41203:7890":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7907:6454":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:5367:444":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:11630:7853":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11952:8342":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1539:6587":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:6930:34571":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:45173:4999":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7358:4212":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:854:8468":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8201:8600":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:5676:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4937:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4362:8895":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5603:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9156:3172":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15586:6116":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:7563:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8498:7606":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45115:7987":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2435:20750":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:6680:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16323:6321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:10313:3436":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:7825:8238":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:6770:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:5131:8312":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:1635:7811":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3764:14208":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2793:8568":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5757:6446":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:3503:8309":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9229:5206":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15090:5940":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14560:5840":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10843:5572":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10296:21679":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40061:4819":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:11080:32344":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:7801:8236":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"18:670:8297":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:32744:242":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:16145:6271":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8572:8609":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:15:2852":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40871:31760":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"0:82:2495":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"16:6408:7737":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:2367:7823":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5879:7992":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11457:5578":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"9:328:6485":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15351:6006":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:3095:34958":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:32713:4476":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:8503:6461":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:44680:7881":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:9496:8000":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6823:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9145:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:80:25870":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2820:4193":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:351:35191":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"14:202:14178":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:589:5553":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13290:4065":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10534:4106":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:2539:6477":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:0:1746":{"crate_id":1,"path":["std"],"kind":"module"},"1:5475:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:6434:8592":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:6600:189":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12479:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:8058:8457":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7990:7786":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:2228:7815":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:10700:29871":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:4694:4233":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12018:8347":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14886:5905":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:32745:249":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6914:4352":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:1884:3368":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:16132:6265":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6507:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15286:5955":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8624:7998":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:16241:6304":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"2:13301:14165":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5127:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7578:5210":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:15997:6215":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:23521:4739":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:990:8470":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14902:5907":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5025:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15496:6104":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7428:26333":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"0:0:2658":{"crate_id":0,"path":["version_check"],"kind":"module"},"17:16218:6291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:564:6547":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44266:8549":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:23139:5387":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9351:8622":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:4899:8919":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:5015:3457":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2900:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12149:7701":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5036:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39977:3431":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:16786:6435":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:9323:25949":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:8669:4476":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12474:1878":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:296:3200":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11902:5591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:8199:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2672:14331":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:3554:146":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14627:5850":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7521:4417":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6573:7739":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:12467:910":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:42305:8849":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:15431:6068":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2366:8482":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12455:1340":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:15953:6205":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1108:8473":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:2551:35185":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:15731:6149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:16701:6413":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:4906:3455":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8213:7605":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15812:6165":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:5835:14194":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:1880:3426":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9169:3174":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11864:8341":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:41294:7902":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2732:14414":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7075:21617":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3587:6443":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:16595:5684":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:6666:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47583:7576":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15963:6208":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:545:6537":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"7:79:20590":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:3303:7812":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3356:8989":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4225:8874":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:23565:4743":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:3342:34527":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8668:8613":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:44784:7958":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:8369:14292":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5477:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:1920:7814":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:16494:5666":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:7463:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6876:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13719:5665":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:11892:8529":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"0:77:2454":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"1:9364:5210":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13145:8389":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13933:5711":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:635:5564":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:4962:3456":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11363:7614":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12897:7722":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:10387:3582":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:44216:8548":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6881:8594":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:45127:7990":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:967:8465":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:41172:8545":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13592:4161":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:44503:7944":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6419:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:12458:1754":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12095:7697":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11985:8345":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7262:34585":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41724:7919":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:31092:4750":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:726:5568":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42769:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8011:5134":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3659:3190":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:2620:4184":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:5388:32409":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1604:8463":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9442:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:47664:7583":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:0:3028":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2950:4199":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:7397:29873":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11021:25953":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:8402:149":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:873:8470":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46739:5054":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:4589:14127":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12347:8366":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44127:8546":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:3141:3996":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:0:574":{"crate_id":2,"path":["core"],"kind":"module"},"9:445:20596":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8879:5392":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:4983:4241":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:47039:5082":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2301:7780":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:41241:7895":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:23383:31770":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:4297:7999":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:13307:8523":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9212:5205":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12456:341":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:3049:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:42880:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2894:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14416:5818":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5051:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12860:7720":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46433:5029":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14750:5883":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:47740:7592":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:33970:8988":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:45107:7985":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:532:6530":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7372:4213":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13983:5718":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:2148:8473":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2450:4170":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22147:8808":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7416:8439":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:708:8463":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7469:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:2840:4194":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:10934:8635":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:6042:8477":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11280:4996":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"15:394:20714":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10408:8626":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:881:3426":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:34383:14313":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1576:7809":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:1023:8472":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:1551:6596":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3042:8569":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5230:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:42491:4982":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13798:5684":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15148:5949":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:5255:4249":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6658:8416":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:32734:7876":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11465:7688":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:46669:5050":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6866:21616":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:45149:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10549:4107":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12108:7698":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:3307:31549":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41115:7832":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:33698:14309":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13181:8392":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8260:7996":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:8536:7887":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:546:5350":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5494:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:7548:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4569:8582":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:6020:8590":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10817:5600":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5196:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:2420:3368":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:6839:3368":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5441:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3075:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"18:563:5552":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4896:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14872:5902":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2754:8219":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7777:4711":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14917:5911":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7542:7779":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8091:8730":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1400:8472":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2328:8565":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8026:8598":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13055:5580":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:12216:7706":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:6158:7827":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:7986:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:15931:6200":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:322:8299":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5420:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3706:3426":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14640:5851":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9452:8234":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:7570:8508":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16798:6438":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:45184:14439":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16822:5711":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13547:8395":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:13871:5701":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42954:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:9447:8233":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:43216:3446":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43209:3439":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44227:7573":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:680:7674":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2772:4191":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:8178:5400":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5541:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:34037:8990":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1597:6625":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44635:7951":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:3889:4001":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1158:8202":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8553:4115":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6544:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7899:5218":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:8105:4492":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:40149:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:16775:6433":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15753:6155":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40943:14235":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10791:8811":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1652:7814":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"0:81:2485":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"16:7030:4357":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:31145:3435":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:46707:5052":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:754:7687":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15864:6181":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:23059:9074":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:2013:8775":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:16812:6439":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:1122:34571":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:10475:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:16739:6427":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:23598:4746":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:10494:147":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14963:5918":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:996:8471":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:22904:8808":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6631:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:22062:32202":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:47638:7581":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11887:29778":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5593:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:380:8553":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7765:4457":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:14031:33091":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:12816:14399":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6534:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42708:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:5736:3168":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5689:4257":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:10796:5383":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14019:5727":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:4:1280":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4943:8885":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:46448:5030":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10097:21672":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:3792:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1589:6620":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5288:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44799:7964":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:22096:8997":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13570:21691":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:881:8852":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13266:21688":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:6537:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:8365:14293":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:473:6495":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6386:7866":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:47172:5087":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12392:5596":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:8320:21624":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41335:7906":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14708:5861":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:10476:3190":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:4561:7999":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:16019:6220":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11475:21701":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:8010:8808":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:2161:8490":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:44288:8550":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:16555:6385":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:13471:4152":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:7789:8509":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:9292:5209":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10167:21675":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:41758:7552":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:16399:6337":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13349:7727":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:2172:8491":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15701:6138":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3061:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:3028:8808":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6827:8957":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2648:2584":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12976:5643":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46301:5013":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8516:8807":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4842:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:598:35239":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11851:8340":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6411:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:6227:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:12475:1860":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:928:8747":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11653:5584":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13028:8387":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:44399:7858":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11563:29883":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"18:507:5545":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:15573:6111":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6723:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:45131:4996":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:22704:8808":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:14483:5831":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15714:6144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:1914:7813":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:41273:7900":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1647:7813":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:10756:160":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:8209:4209":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5020:8881":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12403:5230":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7016:7756":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8649:5185":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:5616:3164":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:23417:4732":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13119:5650":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:559:6545":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11515:8326":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:23026:9075":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3296:3426":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:8096:8458":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:45298:154":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:9982:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:12469:922":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12749:8381":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:14269:5792":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:904:3368":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12459:1844":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12473:1872":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:1564:20678":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46853:5060":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:13943:8536":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:11785:7858":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:570:6550":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8629:8896":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13427:4148":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5249:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6421:4299":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"10:36:6482":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12687:8376":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8268:8602":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:32802:3194":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13781:5681":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:8559:181":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5165:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7813:8237":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"18:765:25881":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1675:6680":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5205:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3346:3344":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5265:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:6712:8477":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12648:5633":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4149:8868":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:8014:4219":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:10657:3173":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:630:8724":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5085:4243":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:8249:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:8626:7799":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:439:188":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8489:4475":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5139:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:2378:21748":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11315:5223":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:45364:5004":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:3548:144":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4957:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:16159:6277":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44298:7864":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:32834:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5375:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:8043:35215":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:8137:4220":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:4207:3427":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8363:8604":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1594:8476":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5670:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11717:7568":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"14:214:7800":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:491:6501":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:16362:6330":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:6256:4275":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13385:7728":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:1626:8477":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15946:6204":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:8031:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8839:8942":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6749:4338":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2554:2583":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:16632:6399":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:959:8463":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15905:6190":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46722:5053":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:40824:7877":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"0:75:2432":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"5:7883:8489":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"12:0:3033":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7495:7773":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12851:7719":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11527:8327":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:1893:8489":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12371:5594":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:34104:14311":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:903:8298":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:6443:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8566:7951":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:1641:7812":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13491:4153":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5709:21610":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7554:21620":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10442:21684":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2326:142":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:7361:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6716:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:15665:6133":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:16642:6400":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:46800:5057":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2294:7820":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14821:5897":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14599:5845":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:12464:771":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6028:4203":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:41212:7891":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7604:3368":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:355:20611":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1538:3427":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4947:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:1005:7780":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:685:3427":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3495:14131":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"15:327:20708":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:8451:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1530:6581":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14773:5892":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10938:35228":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:23012:8808":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12470:903":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4554:8515":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12035:7815":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:4329:7999":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12027:7621":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44813:7967":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:22045:32192":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12176:7703":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:4929:4239":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5198:4247":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47143:5086":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:2331:2448":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:32832:3345":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6748:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:10928:8317":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8000:4218":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:40899:7879":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:2265:7817":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22880:9081":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:13327:14162":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:102:7802":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:7308:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11818:8339":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13169:8391":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:22969:9085":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:113:25872":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:42635:3430":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8753:5197":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9206:3368":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:16385:6334":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6111:7734":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5282:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4881:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:16761:6429":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11777:7693":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:9739:142":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:7431:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4890:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3542:3195":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2482:8794":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1369:7780":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:3987:4009":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:6885:7840":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6765:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:34238:14312":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:3758:14209":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:31:8193":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2858:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:1630:8489":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:11750:8527":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7495:29775":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12762:8382":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:15760:6156":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5224:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41250:7896":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:6284:7999":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:3720:8310":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:2748:4190":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2656:686":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44206:7861":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12359:8367":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4574:34567":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7814:4712":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12798:21817":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:10530:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:6611:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3351:8987":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:538:5550":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8546:7795":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:42251:173":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4823:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:6706:7919":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:2335:2594":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6623:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:2440:8477":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:6984:4222":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:12465:750":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:23543:4741":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:5044:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2796:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11141:29886":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5533:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6895:8231":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:1696:6690":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14072:5740":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"0:84:2509":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"1:9746:8600":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:2545:6478":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11808:5227":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5488:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:15829:6172":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:42333:7554":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12983:21819":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12941:5642":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1635:8488":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5217:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:46316:5016":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12191:7704":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:3065:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3913:8577":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11998:8346":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:5986:8586":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2112:5372":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2770:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12028:8348":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:7401:35216":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:599:8557":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3304:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3719:3427":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2029:7999":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:2495:20673":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"11:430:35198":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6710:8593":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:1521:6576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13854:5699":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11971:8344":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10778:8314":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"6:5349:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:3531:14123":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:41097:8778":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:2570:4182":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6098:8397":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14127:5759":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:4953:14219":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7640:3368":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5113:4244":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5387:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3313:30076":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:16036:6227":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:491:7670":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45103:7984":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:44327:4987":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46608:5047":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:13537:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47098:5085":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:43536:141":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:13322:14163":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7368:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40057:8763":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:5993:8589":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2880:4196":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5650:3166":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10218:21676":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7212:7763":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5562:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:45301:167":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2486:4178":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3329:7813":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6188:7736":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:7448:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47193:5088":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:5142:7999":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:3048:20752":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:573:5545":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4816:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4152:4228":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5151:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:11224:32348":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"16:2640:4185":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4495:8581":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:4902:8897":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14652:5852":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:45293:7575":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:1507:6571":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14099:5749":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:894:3427":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:740:8464":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:43452:3435":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:11864:7943":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15785:6161":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:14438:5825":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12070:29877":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:4873:4237":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11706:8334":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:14055:5732":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6882:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14405:5817":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47603:7578":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:22551:8999":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:8583:8848":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5482:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9198:8614":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:42643:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4414:8580":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11539:5580":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13733:5666":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:9987:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42604:8732":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:44485:7943":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9581:3588":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6368:4294":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5107:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6680:8422":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:1213:34540":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12424:8731":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10031:21671":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8895:7609":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:12462:752":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:15160:5953":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15315:5975":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:3919:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4018:8579":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:1898:3562":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:46771:5056":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:586:6559":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3851:8850":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:39398:14320":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:41031:4958":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"14:160:8193":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:42511:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2704:4188":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44253:7862":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11473:4678":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14327:5804":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:32727:3455":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11065:8319":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1514:6573":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5807:3171":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:16026:6222":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:22275:5385":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:44698:7880":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:7414:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:44664:7954":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:698:7678":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22706:8995":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11163:5587":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3865:8490":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13205:8394":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:7750:14378":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12082:7695":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7807:35225":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40169:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4341:8893":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:42439:4978":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2403:7548":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:15540:6109":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:2137:8472":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11448:8325":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3829:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11630:5582":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:10777:8574":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:14083:8537":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11782:8009":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:4608:14211":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:14058:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42605:8932":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13222:21687":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7305:4406":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12391:8531":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:41181:7887":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8507:3178":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11503:5579":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:5325:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:6376:7839":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4311:29774":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5241:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3930:8489":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:7830:14239":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3299:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12920:7723":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11085:3175":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3058:148":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7341:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:47612:7579":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13890:5706":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:3087:7545":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:6489:5397":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:3687:3188":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1888:8489":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10963:7994":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7259:4403":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13554:4156":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:40982:7883":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11000:7612":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:9316:8617":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44381:7853":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"18:706:7680":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:2282:192":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:7895:32233":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4829:7406":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12249:8358":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:2142:1385":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2920:4198":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:8528:7792":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11971:8579":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:22983:14330":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:1930:3588":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4827:8206":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:842:8746":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:16750:6428":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:7058:7758":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45099:7983":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12468:916":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5622:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10630:4111":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:23441:8865":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5128:8918":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14692:5856":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4333:8892":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2718:8566":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:538:6533":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2900:4197":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42564:4985":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4810:4235":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1414:8202":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14859:5901":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"14:40:5681":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44357:7935":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7577:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:11037:8613":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:40928:7877":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:8483:4538":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7123:14196":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:15919:6197":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11757:21721":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15876:6182":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"14:165:20684":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3308:4169":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6269:4276":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7350:6449":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5507:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:386:8555":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6708:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:1900:7811":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43223:3447":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3620:3179":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:13966:7899":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:3526:3432":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1001:3426":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15689:6135":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5316:8584":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3674:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:2584:5362":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6738:35224":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:317:8298":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2990:4201":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43974:7933":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:3834:6445":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5520:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:6599:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15121:5946":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44990:4993":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14612:5847":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:23324:7549":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:14284:5796":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22546:8808":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:3077:141":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8077:8729":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:507:29875":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6696:8425":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:4780:8915":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47270:5120":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1711:6697":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12409:21793":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6526:14642":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:11053:3168":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:4909:819":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12962:21818":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:16377:6331":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:211:8203":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:45123:7989":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:8869:3428":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41125:8544":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:12450:426":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41145:3177":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:6691:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15887:6186":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2480:2651":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:2559:6480":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:40936:7881":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6808:4202":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3737:14321":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4997:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3539:7921":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:938:8477":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3052:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:10541:3446":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:2773:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1117:8202":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45315:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15418:6061":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15836:6173":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1869:3572":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:5285:8584":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11333:165":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:31156:31779":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:16684:6411":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6713:8427":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:1064:20677":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41049:4959":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9182:3175":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1632:6654":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46558:5037":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:15844:6174":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6084:7730":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7386:6451":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:15739:6152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7424:21619":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:3337:7811":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:44585:7949":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44956:14177":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3668:30453":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12776:8383":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7539:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44178:7859":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11617:8321":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22932:14330":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:15106:5942":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:1854:711":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:32667:3176":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43764:7930":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1932:3589":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:534:8711":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4990:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:2406:8305":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9305:8615":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12605:5587":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13757:5680":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:659:8293":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8206:7994":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6173:4265":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41232:7893":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:8308:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:8585:8459":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"8:0:3029":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11553:8328":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12583:5631":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13610:4164":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6159:4262":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:5571:14149":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:9420:190":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6876:4349":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13157:8390":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:16008:6219":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:6952:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:16084:6264":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43104:8525":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:15024:5933":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2684:4187":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2206:14340":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3144:141":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:798:8477":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:41365:7909":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7316:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:725:8204":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:8014:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6672:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10418:21683":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:9751:29889":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:45398:183":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1784:34571":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1500:6568":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2806:3349":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:3496:8833":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:785:7810":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5471:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2521:8806":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:44351:7934":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:3441:6442":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1229:34962":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44196:8547":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6440:21613":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:8413:168":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:13039:7942":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:671:3426":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46640:5049":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:16714:6419":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:2796:4192":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}