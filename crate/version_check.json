{"root":"0:0:2082","crate_version":"0.9.4","includes_private":false,"index":{"b:5:682-0:129:1858":{"id":"b:5:682-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2828","5:685:2829","5:686:2830"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12740:2561":{"id":"2:12740:2561","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatches":"2:12743:32787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43975:7519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2290-0:143:1859":{"id":"b:2:2290-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2292:24797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2287-0:143:1859":{"id":"b:2:2287-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2289:2547"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2593:1955":{"id":"2:2593:1955","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2567:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:143:1859":{"id":"b:2:2605-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2608:134","2:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:2264":{"id":"0:16:2264","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:459":{"id":"0:160:459","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12693:1817":{"id":"2:12693:1817","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44025:7521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12716:27911":{"id":"2:12716:27911","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12176:7427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2290-0:129:1858":{"id":"b:2:2290-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2292:24797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104:452":{"id":"0:104:452","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1859":{"id":"0:143:1859","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:8846:8380-0:143:1859","a:2:2799:243-0:143:1859","a:2:2816:253-0:143:1859","a:2:2856:2613-0:143:1859","a:2:8845:8196-0:143:1859","b:2:2290-0:143:1859","b:2:2605-0:143:1859","b:2:2600-0:143:1859","b:2:2590-0:143:1859","b:2:2594-0:143:1859","b:2:3433-0:143:1859","b:2:2287-0:143:1859","b:5:5804-0:143:1859","b:5:682-0:143:1859","0:155","0:149","0:148","0:151","0:157","0:56","0:152","0:146","0:159","0:154"]}}},"2:12722:32785":{"id":"2:12722:32785","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12360:13613","str::split":"2:12713:1821","prim@char":"1:12032:448","`DoubleEndedIterator`":"2:7752:127","str::rsplit_terminator":"2:12725:32786"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43821:7510","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:26341":{"id":"2:12766:26341","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734:27918":{"id":"2:12734:27918","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8845:8196-0:129:1858":{"id":"a:2:8845:8196-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8845:8196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12675:27880":{"id":"2:12675:27880","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12690:4388":{"id":"2:12690:4388","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43757:3809","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12695:30485":{"id":"2:12695:30485","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44063:7525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:32789":{"id":"2:12749:32789","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::match_indices":"2:12746:32788"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43939:7517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:33471":{"id":"5:5546:33471","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:27386":{"id":"2:12785:27386","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1856":{"id":"0:75:1856","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1857","`Version::read()`":"0:6:1872","`Channel`":"0:129:1858","crate":"0:0:2082","`Channel::read()`":"0:27:1872","`Date::read()`":"0:42:1872","`Date`":"0:143:1859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:32787":{"id":"2:12743:32787","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::matches":"2:12740:2561"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43993:7520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:32788":{"id":"2:12746:32788","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatch_indices":"2:12749:32789"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43921:7516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2287-0:129:1858":{"id":"b:2:2287-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2289:2547"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:1885":{"id":"0:78:1885","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1893":{"id":"0:79:1893","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12713:1821":{"id":"2:12713:1821","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split_whitespace":"2:12691:30488","str::rsplit":"2:12719:27913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43771:7425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:452":{"id":"0:156:452","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2600-0:93:1857":{"id":"b:2:2600-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2603:134","2:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2809:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61-0:24:1811":{"id":"0:61-0:24:1811","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1811","glob":true}}},"0:39:1812":{"id":"0:39:1812","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143:1859"],"is_stripped":true}}},"0:3:1704":{"id":"0:3:1704","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1857"],"is_stripped":true}}},"0:38:714":{"id":"0:38:714","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3433-0:143:1859":{"id":"b:2:3433-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8846:8380-0:129:1858":{"id":"a:2:8846:8380-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8846:8380","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2856:2613-0:129:1858":{"id":"a:2:2856:2613-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2856:2613","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:1901":{"id":"0:80:1901","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12688:7526":{"id":"2:12688:7526","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43741:7504","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12702:1825":{"id":"2:12702:1825","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:27919":{"id":"2:12737:27919","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:32791":{"id":"2:12756:32791","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2369":{"id":"0:34:2369","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:129:1858":{"id":"b:2:2605-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2608:134","2:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12772:32794":{"id":"2:12772:32794","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:1830":{"id":"2:12775:1830","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:27382":{"id":"2:12783:27382","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:27824":{"id":"2:12789:27824","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34537"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2603:134":{"id":"2:2603:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:9:1862":{"id":"0:9:1862","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2594-0:129:1858":{"id":"b:2:2594-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2816:253-0:143:1859":{"id":"a:2:2816:253-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9795:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12673:32781":{"id":"2:12673:32781","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:1829":{"id":"2:12758:1829","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:27825":{"id":"2:12790:27825","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34537"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8846:8380-0:93:1857":{"id":"a:2:8846:8380-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8846:8380","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2811:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12667:32779":{"id":"2:12667:32779","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:32790":{"id":"2:12754:32790","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:32796":{"id":"2:12794:32796","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4594:32796"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44088:7448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:33472":{"id":"5:5547:33472","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2617","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2617","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2816:253-0:93:1857":{"id":"a:2:2816:253-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:81:1909":{"id":"0:81:1909","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12689:7536":{"id":"2:12689:7536","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43747:7505","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12682:27879":{"id":"2:12682:27879","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12784:27820":{"id":"2:12784:27820","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39822:27789","Self::is_ascii":"2:12783:27382"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39822:27789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:13739":{"id":"5:5532:13739","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2231":{"id":"0:12:2231","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:1614":{"id":"2:2604:1614","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2810:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"2:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2856:2613-0:143:1859":{"id":"a:2:2856:2613-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2856:2613","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2287-0:93:1857":{"id":"b:2:2287-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2281:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2289:2547"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2816:253-0:129:1858":{"id":"a:2:2816:253-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2816:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2600-0:129:1858":{"id":"b:2:2600-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2603:134","2:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12665:2771":{"id":"2:12665:2771","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:93:1857":{"id":"b:2:2605-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2608:134","2:2609:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:2271":{"id":"0:54:2271","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12664:869":{"id":"2:12664:869","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5806:1589":{"id":"5:5806:1589","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1920":{"id":"0:32:1920","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:658":{"id":"0:136:658","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3433-0:93:1857":{"id":"b:2:3433-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2350:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1872","0:30:1862","0:32:1920","0:33:2365","0:34:2369","0:35:2373","0:36:2376"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62-0:39:1812":{"id":"0:62-0:39:1812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1812","glob":true}}},"0:24:1811":{"id":"0:24:1811","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:129:1858"],"is_stripped":true}}},"0:76:1870":{"id":"0:76:1870","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2590-0:143:1859":{"id":"b:2:2590-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2593:1955"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12678:27877":{"id":"2:12678:27877","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:1820":{"id":"2:12752:1820","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:93:1857":{"id":"b:5:682-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2828","5:685:2829","5:686:2830"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2799:243-0:93:1857":{"id":"a:2:2799:243-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2799:243-0:129:1858":{"id":"a:2:2799:243-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12787:27388":{"id":"2:12787:27388","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:8296":{"id":"5:5548:8296","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1872":{"id":"0:42:1872","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12696:2348":{"id":"2:12696:2348","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:32793":{"id":"2:12763:32793","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8845:8196-0:143:1859":{"id":"a:2:8845:8196-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8845:8196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12760:32792":{"id":"2:12760:32792","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12385:13610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12663":{"id":"2:12663","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12664:869","2:12665:2771","2:12666:32778","2:12667:32779","2:12669:32780","2:12672:27790","2:12673:32781","2:12674:339","2:12675:27880","2:12676:27876","2:12678:27877","2:12680:27878","2:12682:27879","2:12684:32782","2:12685:32783","2:12686:27902","2:12687:27903","2:12688:7526","2:12689:7536","2:12690:4388","2:12691:30488","2:12692:30484","2:12693:1817","2:12694:32784","2:12695:30485","2:12696:2348","2:12699:1949","2:12702:1825","2:12705:2808","2:12709:2770","2:12713:1821","2:12716:27911","2:12719:27913","2:12722:32785","2:12725:32786","2:12728:1834","2:12731:27916","2:12734:27918","2:12737:27919","2:12740:2561","2:12743:32787","2:12746:32788","2:12749:32789","2:12752:1820","2:12754:32790","2:12756:32791","2:12758:1829","2:12759:1827","2:12760:32792","2:12763:32793","2:12766:26341","2:12769:27920","2:12772:32794","2:12775:1830","2:12778:1828","2:12781:1862","2:12783:27382","2:12784:27820","2:12785:27386","2:12786:27387","2:12787:27388","2:12788:27823","2:12789:27824","2:12790:27825","2:12791:32795","2:12793:8188","2:12794:32796"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12676:27876":{"id":"2:12676:27876","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12691:30488":{"id":"2:12691:30488","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12692:30484"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44045:7523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12781:1862":{"id":"2:12781:1862","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12321:133","`FromStr`":"2:12320:8391"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12320:8391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12320:8391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2600-0:143:1859":{"id":"b:2:2600-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2570:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2603:134","2:2604:1614"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12791:32795":{"id":"2:12791:32795","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4596:32795"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44070:7449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8845:8196-0:93:1857":{"id":"a:2:8845:8196-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8845:8196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:714":{"id":"0:21:714","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1878":{"id":"0:77:1878","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5804-0:129:1858":{"id":"b:5:5804-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3435:1627":{"id":"2:3435:1627","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39635:4990","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12672:27790":{"id":"2:12672:27790","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11915:1848"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12709:2770":{"id":"2:12709:2770","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41875:197","prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12687:27903":{"id":"2:12687:27903","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12686:27902"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:658":{"id":"0:150:658","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2264":{"id":"0:52:2264","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1858":{"id":"0:129:1858","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:8846:8380-0:129:1858","a:2:2799:243-0:129:1858","a:2:2816:253-0:129:1858","a:2:2856:2613-0:129:1858","a:2:8845:8196-0:129:1858","b:2:2290-0:129:1858","b:2:2605-0:129:1858","b:2:2600-0:129:1858","b:2:2590-0:129:1858","b:2:2594-0:129:1858","b:2:3433-0:129:1858","b:2:2287-0:129:1858","b:5:5804-0:129:1858","b:5:682-0:129:1858","0:134","0:37","0:132","0:141","0:138","0:135","0:137","0:140"]}}},"0:36:2376":{"id":"0:36:2376","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2290-0:93:1857":{"id":"b:2:2290-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2284:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2292:24797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:714":{"id":"0:23:714","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2365":{"id":"0:33:2365","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3433-0:129:1858":{"id":"b:2:3433-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3431:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3435:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12680:27878":{"id":"2:12680:27878","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1862":{"id":"0:30:1862","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:1834":{"id":"2:12728:1834","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613","str::rsplitn":"2:12731:27916"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43875:7513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2402":{"id":"0:48:2402","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:1129":{"id":"0:158:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2590-0:129:1858":{"id":"b:2:2590-0:129:1858","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2593:1955"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:2271":{"id":"0:18:2271","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1872":{"id":"0:27:1872","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:452":{"id":"0:142:452","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1919":{"id":"0:82:1919","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12685:32783":{"id":"2:12685:32783","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1531","crate::ops::IndexMut":"2:3099:8224","str::slice_unchecked":"2:12684:32782"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12684:32782":{"id":"2:12684:32782","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1531","str::slice_mut_unchecked":"2:12685:32783","crate::ops::Index":"2:3095:8223"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:714":{"id":"0:57:714","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:27913":{"id":"2:12719:27913","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12360:13613","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split":"2:12713:1821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43789:7428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:27916":{"id":"2:12731:27916","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:448","str::splitn":"2:12728:1834","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43893:7514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:27387":{"id":"2:12786:27387","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:33468","5:5532:13739","5:5535:33469","5:5538:33470","5:5546:33471","5:5547:33472","5:5548:8296","5:5549:27384","5:5550:27385"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:714":{"id":"0:133:714","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:33469":{"id":"5:5535:33469","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2373":{"id":"0:35:2373","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1862":{"id":"0:45:1862","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1857":{"id":"0:93:1857","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:8846:8380-0:93:1857","a:2:2799:243-0:93:1857","a:2:2816:253-0:93:1857","a:2:2856:2613-0:93:1857","a:2:8845:8196-0:93:1857","b:2:2290-0:93:1857","b:2:2605-0:93:1857","b:2:2600-0:93:1857","b:2:2590-0:93:1857","b:2:2594-0:93:1857","b:2:3433-0:93:1857","b:2:2287-0:93:1857","b:5:5804-0:93:1857","b:5:682-0:93:1857","0:97","0:103","0:102","0:22","0:20","0:99","0:105","0:96","0:100","0:107"]}}},"2:12788:27823":{"id":"2:12788:27823","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34537"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:2830":{"id":"5:686:2830","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5804-0:143:1859":{"id":"b:5:5804-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2355:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2292:24797":{"id":"2:2292:24797","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:33468":{"id":"5:5531:33468","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2617","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2617","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2828":{"id":"5:684:2828","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:108:459":{"id":"0:108:459","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5549:27384":{"id":"5:5549:27384","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12786:27387"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2609:1612":{"id":"2:2609:1612","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2574:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12699:1949":{"id":"2:12699:1949","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:93:1857":{"id":"b:2:2594-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2596:741":{"id":"2:2596:741","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1129":{"id":"0:106:1129","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31111:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2386:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60-0:3:1704":{"id":"0:60-0:3:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1704","glob":true}}},"2:12669:32780":{"id":"2:12669:32780","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12667:32779"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2799:243-0:143:1859":{"id":"a:2:2799:243-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2799:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:1933":{"id":"0:84:1933","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1919"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1872","0:9:1862","0:12:2231","0:13:2243","0:14:2256","0:16:2264","0:18:2271"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12674:339":{"id":"2:12674:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12675:27880","`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:1827":{"id":"2:12759:1827","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:33470":{"id":"5:5538:33470","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:27920":{"id":"2:12769:27920","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2082":{"id":"0:0:2082","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1857","`is_max_version`":"0:80:1901","`is_exact_version`":"0:81:1909","`is_max_date`":"0:77:1878","`is_exact_date`":"0:78:1885","`triple()`":"0:75:1856","`Date`":"0:143:1859","`Channel`":"0:129:1858"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1856","0:76:1870","0:77:1878","0:78:1885","0:79:1893","0:80:1901","0:81:1909","0:82:1919","0:84:1933","0:60-0:3:1704","0:61-0:24:1811","0:62-0:39:1812"],"is_stripped":false}}},"0:13:2243":{"id":"0:13:2243","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12692:30484":{"id":"2:12692:30484","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12691:30488"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44054:7524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12666:32778":{"id":"2:12666:32778","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2256":{"id":"0:50:2256","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:143:1859":{"id":"b:2:2594-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:147:714":{"id":"0:147:714","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8846:8380-0:143:1859":{"id":"a:2:8846:8380-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8846:8380","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6:1872":{"id":"0:6:1872","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:143:1859":{"id":"b:5:682-0:143:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2303:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2828","5:685:2829","5:686:2830"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2590-0:93:1857":{"id":"b:2:2590-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2567:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2593:1955"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:14:2256":{"id":"0:14:2256","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2608:134":{"id":"2:2608:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32295:2595","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2289:2547":{"id":"2:2289:2547","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:658":{"id":"0:98:658","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12694:32784":{"id":"2:12694:32784","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44035:7522","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:143:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1872","0:45:1862","0:48:2402","0:50:2256","0:52:2264","0:54:2271"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12705:2808":{"id":"2:12705:2808","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41875:197","prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12793:8188":{"id":"2:12793:8188","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4597:8188"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44079:7445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:2829":{"id":"5:685:2829","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5804-0:93:1857":{"id":"b:5:5804-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9800:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2612","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5802:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5806:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"name":"PartialOrd","id":"2:2392:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1129"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12686:27902":{"id":"2:12686:27902","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12687:27903"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:32786":{"id":"2:12725:32786","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12360:13613","str::split":"2:12713:1821","prim@char":"1:12032:448","str::split_terminator":"2:12722:32785"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43839:7511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:1828":{"id":"2:12778:1828","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13613"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:27385":{"id":"5:5550:27385","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12787:27388"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2856:2613-0:93:1857":{"id":"a:2:2856:2613-0:93:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2856:2613","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"2:21367:8444":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12930:20637":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43114:7498":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42150:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2558:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6781:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40474:8044":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13407:5362":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15087:5783":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:687:2834":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2567:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22282:8525":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:2652:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2799:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21923:8267":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42869:30835":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1734:6374":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15235:5818":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:47986:4770":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43715:4652":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6927:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3099:8224":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7026:3663":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7301:3561":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5634:7318":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43122:7499":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13478:5386":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13218:5330":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7371:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4364:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1507:6240":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6913:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12432:7912":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"13:226:6147":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:2542:6149":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15244:5821":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3032:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:4824:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2284:19674":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6819:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2622:7758":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"15:327:19659":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:31111:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"8:0:2450":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13869:5464":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:22119:8267":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3394:3578":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:557:8054":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9479:3669":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:21776:8450":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:9770:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4603:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12584:7918":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14208:5529":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43975:7519":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13309:5345":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7067:4100":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40622:7471":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:766:24770":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13448:5374":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:574:5180":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12356:7313":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:46382:4703":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:43771:7425":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7582:6089":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:15279:5832":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2521:8267":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6352:7332":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10164:3623":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:9814:2852":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:430:33686":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10618:33713":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:45761:4676":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40699:4130":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40464:3613":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6700:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:39530:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3246:7400":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1550:7397":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12230:7299":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14359:5560":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6485:3893":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:645:8190":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2350:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41077:7490":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:2251:7408":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10262:3632":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3212:7399":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:43603:8048":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:1956:7163":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13504:5391":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:2352:7997":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:2380:3867":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:3049:19703":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2522:13683":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:856:7991":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2569:4382":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:8167:7985":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12091:7901":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8891:4849":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41924:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:5052:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15027:5765":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22649:4410":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6083:19673":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5648:7922":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:12032:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10067:3803":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12474:5217":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:4698:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6898:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10520:33712":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4883:8025":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4488:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7006:7963":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:165:19635":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3491:26644":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7380:26526":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4742:8328":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:10767:7563":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6425:4035":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2618:3877":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15329:5844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9624:20609":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43741:7504":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6687:7349":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5992:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7554:3906":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3095:8223":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:5339:3549":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13365:5357":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:1648:4986":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:6983:7763":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:10449:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6169:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12953:3850":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11197:4857":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4480:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:9196:7207":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:9971:4641":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4556:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:30509:4417":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:401:7825":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5419:3802":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11958:5258":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13976:5479":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:44088:7448":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:16160:6071":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"0:79:1893":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"1:2209:2018":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11998:26546":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9274:2998":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:43789:7428":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15287:5835":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"0:80:1901":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"2:40384:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15943:5315":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6268:33707":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1923:7400":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2788:3884":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:1566:19630":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:22148:13765":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6691:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:22524:4397":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11321:5217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11800:5226":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:23048:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:15356:5851":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7391:20570":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"9:237:7180":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:5613:3578":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:15367:5852":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"9:426:19550":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10757:7569":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"14:40:5312":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:46206:4698":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:46404:4704":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:640:8057":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48080:7187":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5574:3891":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:62:14099":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:5760:20562":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44566:4664":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6525:3549":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2968:32202":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6960:7962":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12220:3844":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9069:4856":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10881:20644":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:8845:8196":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1521:6245":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2303:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9021:8111":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:538:5185":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:652:5180":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14122:5520":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:1054:7995":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13742:5444":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:39822:27789":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:41690:7170":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:844:8208":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:5825:3649":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:43993:7520":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2574:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40290:4623":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22955:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:21124:30526":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:1903:7397":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1538:2775":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:44267:7539":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48109:7190":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:21495:4995":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4922:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13896:5468":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:15049:5769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:41852:4647":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:6430:8085":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:22233:8267":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:207:3547":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15301:5837":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1040:7367":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12035:1145":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:3584:7836":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9813:20630":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7599:3667":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10941:7847":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11170:27603":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2339:3860":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43729:4655":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11767:7892":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:3060:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:10890:7514":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:5780:8083":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:41101:3621":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:31139:2744":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4906:8365":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16032:6043":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:8281:4227":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15659:5951":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1718:6369":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11485:7877":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5743:7324":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1664:6345":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5381:2583":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10803:7845":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:893:3572":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:32342:8042":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:660:7818":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2958:13755":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2810:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"11:774:7395":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1546:6259":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:1555:3578":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:10247:2600":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:2187:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2920:4116":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:40351:13679":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12077:7897":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:1760:2983":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6915:3901":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:48214:7197":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:5982:7325":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:43939:7517":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6386:4032":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3748:8009":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:1910:7398":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7102:20569":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:7343:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6798:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:14843:5735":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46095:4690":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12572:7917":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1534:2833":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46784:4725":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:1087:33685":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11045:3673":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11369:5222":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14921:5742":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13491:5390":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"11:2403:2834":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:44790:4308":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10822:2597":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:836:2833":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8001:8091":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43653:8049":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12055:1691":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1691:6358":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5322:3944":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40723:7481":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:45851:4680":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:4497:3924":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6968:20568":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8169:8266":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:1883:2833":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10155:7764":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:9810:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:7207:31497":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:40344:7452":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:44803:7561":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:44079:7445":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:12365:8029":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"15:394:19665":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:16109:6061":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13162:5315":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13235:5332":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12387:20758":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11817:20732":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11065:5212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:7462:4383":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3732:8071":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7621:20571":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:16123:6065":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:11034:3672":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43821:7510":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9026:8112":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:6837:3590":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:16134:6067":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:5384:20560":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11155:7281":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:8115:7382":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:48024:4771":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11632:7294":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:483:6168":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12244:7303":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:6866:3603":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:2942:4120":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:23079:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:14296:5542":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8991:26358":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2561:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12039:1617":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11576:7290":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:2832:3886":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46160:4692":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7848:7563":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:533:3640":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4428:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2140:7995":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:4303:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:4376:3580":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7544:7373":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11382:7580":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:7365:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8403:4840":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:5872:3572":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4932:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2903:8441":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:12038:1531":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13754:5446":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:719:5200":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:1760:7161":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15710:5962":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:883:7994":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4440:2863":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13097:5297":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10608:7842":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13961:5476":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46113:4691":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:44510:7558":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1796:2992":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:588:6227":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:80:24758":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4449:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4902:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43161:7501":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11243:7861":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15003:5763":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11755:7891":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6792:4087":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7708:3909":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7492:7368":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2807:2749":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13347:5349":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11345:5221":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14698:5637":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7513:7371":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:8215:32029":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8286:8339":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4800:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:1296:7995":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:8097:7379":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:52:19566":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4050:8320":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:4159:8336":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:119:14153":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:44345:13625":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:5568:2588":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12166:7907":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14969:5751":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4686:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44331:7541":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4862:3935":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21139:30530":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3278:8068":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40561:7461":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5123:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:1784:3592":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15631:5942":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11469:7872":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:4469:8340":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:637:8055":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:113:24760":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7445:3582":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7663:8086":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47738:4766":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6012:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4461:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8237:8305":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9918:20632":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6513:7335":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:5816:3963":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:3255:13759":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:7429:8207":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43346:7184":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12560:7916":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:8177:13725":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11355:4869":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46006:4686":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6222:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:44151:13624":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4700:8367":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:15507:5909":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40590:7466":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1481:7396":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4738:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4406:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2696:3880":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13633:5423":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:299:7390":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43757:3809":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:10986:2594":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:276:2617":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44379:4658":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:21141:30535":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40337:7451":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13724:5443":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5015:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2873:8440":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:12056:1241":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:736:24769":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:46258:4700":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:533:6197":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:5051:8077":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44294:7540":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5921:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:78:19541":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:12591:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:1160:7743":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1591:6290":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:48199:7196":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:6409:7420":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:30577:30834":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:15013:5764":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15527:5915":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15253:5822":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11426:7868":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10569:33710":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"14:215:7387":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12659:20613":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14439:5568":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4401:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11001:7852":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:7723:2616":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:1873:7755":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5088:3942":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11158:2593":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7862:7375":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:755:7280":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2564:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14194:5528":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21373:8447":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1680:3549":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:21801:4996":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:785:3552":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10940:3003":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10051:3802":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:40250:30828":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2883:4111":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39596:8201":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2915:13750":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:11915:1848":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:7023:3607":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46058:4688":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12380:5274":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6961:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13395:5361":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11269:5210":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2380:8263":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:2498:19625":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:6889:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4821:8325":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2662:8063":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22536:31528":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6279:4023":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:42841:7171":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8453:7180":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22362:4997":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12614:20634":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4824:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:7271:2775":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:43514:8046":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10559:7841":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40853:7484":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2321:3858":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:40642:7473":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11516:8072":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6721:20567":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40631:7472":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8220:7521":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14099:5511":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:7489:3650":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:6479:3572":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:44687:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12029:5262":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2911:13748":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1917:7399":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:12045:792":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:13166:3637":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42622:2854":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4628:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44070:7449":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"10:0:2452":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5152:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:2469:3592":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:25:655":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:12374:7273":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:40325:13678":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8828:2593":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12202:20756":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:4087:2834":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11294:7863":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41958:4650":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4376:3611":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13935:5472":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39574:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"15:0:2456":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6346:7961":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14399:5563":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43747:7505":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15680:5957":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4808:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:2536:6148":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3280:8069":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7474:7973":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:43614:7185":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15267:5829":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15200:5807":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4798:3647":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14001:5481":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:21156:30532":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5746:8079":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21312:8267":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:644:5180":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:2326:7995":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40613:7470":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"14:7:7735":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:7259:13721":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9651:20626":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:945:7993":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:12176:7427":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11563:7289":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13989:5480":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:44514:7559":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44366:7546":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4764:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4789:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6318:4027":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:6070:1858":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:35:3545":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44778:4672":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2518:2008":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:881:3557":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7341:4381":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3239:8066":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:2878:4114":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:7629:3596":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:2548:6150":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:3191:32173":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2386:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46942:4728":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2971:13758":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14887:5740":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:21170:30539":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2864:3887":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:898:2833":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6128:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2370:8258":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:2231:33638":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:0:530":{"crate_id":2,"path":["core"],"kind":"module"},"16:4921:3937":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15961:5325":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:3163:26996":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13285:5341":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:6420:3619":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:7689:3671":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5673:3895":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3270:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:12141:7518":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:23234:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:43565:7429":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:7580:3665":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4529:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:40417:4626":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41070:7489":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:5149:3587":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6844:4090":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:555:6209":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:6162:3654":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4989:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:15589:5936":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46830:4726":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5049:3941":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15612:5937":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15493:5903":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2856:2613":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:3032:3912":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13663:5431":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:32335:4158":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:6610:3660":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4986:3939":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6248:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8476:5000":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:5689:7413":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:22188:8536":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11536:7287":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:7556:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:9454:32031":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8213:7425":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"9:486:19547":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5753:8082":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4028:8316":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:32331:8041":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4955:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4595:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2586:3643":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:4045:3549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:825:3555":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22663:4411":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40401:31522":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:832:8000":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14312:5546":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12052:5263":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11226:7858":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:48184:7195":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46076:4689":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:531:7264":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41941:2834":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11126:7856":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5941:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9759:20628":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11666:7298":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11027:3791":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:10578:3671":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:8195:7386":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40229:7446":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:8535:5002":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30543:7165":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:435:3754":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7090:7366":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14455:5570":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14904:3854":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5004:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:6666:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44054:7524":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11537:8073":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2907:3889":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11991:5260":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3813:3592":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:43153:7500":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2428:3869":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42881:4197":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6804:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10775:7844":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:10593:2833":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12115:7903":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:43574:7430":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13882:5231":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47096:4731":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:1567:7400":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:43685:7435":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:41873:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5955:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12445:7913":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2670:3879":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14235:5533":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:48276:4773":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4947:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11476:7401":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:3065:3701":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15747:5969":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2124:7367":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:12125:7515":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:39628:8043":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2359:3866":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12746:7315":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2889:13747":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4878:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:1500:7986":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7311:32175":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:15384:5859":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:9806:2853":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10510:7840":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8904:8412":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:2443:3572":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:7710:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13145:5312":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7702:7156":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11617:7293":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:1821:2999":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:10011:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:9752:2609":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:47878:4768":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:0:2455":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4535:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"7:31:19534":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:44356:7542":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8006:8092":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11619:7583":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:951:7994":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40318:7449":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40238:4619":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4908:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:7679:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:2954:13754":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2043:4786":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2596:3876":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4231:8074":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:16004:6036":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12180:7908":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6086:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:12360:13613":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3066:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2806:2612":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15294:5836":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:21314:8448":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:2967:2828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6376:20565":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11388:7581":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:928:8208":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:11403:8037":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:6837:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:1896:3592":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12310:5269":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12009:5217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:9804:2845":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"11:875:7993":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3045:2839":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1310:7743":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10950:7848":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5885:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3295:31820":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:43106:7496":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7657:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10876:7513":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11215:4865":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5117:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:5383:13598":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22202:13765":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:4344:3921":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41991:7748":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44761:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4841:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13322:5347":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"10:44:6155":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6243:7950":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:629:7744":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10953:2587":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48100:7189":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:12380:13611":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:6998:3604":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43593:7432":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:7622:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:9599:2843":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"11:1007:7367":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6361:4028":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:2197:7830":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:22500:4392":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10944:4359":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:6136:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11714:7886":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:1142:7999":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10792:7199":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:44219:7538":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6499:3910":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44697:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"13:110:33691":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10667:33716":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:10904:8035":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44522:4661":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4523:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:6426:7490":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8866:2775":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46352:4702":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3980:8313":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46428:4705":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12921:5270":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:15519:5912":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:42425:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5146:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3063:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:261:7824":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:12050:1633":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6929:6084":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3988:8314":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15177:5804":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5969:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14896:5741":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"14:221:6100":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7668:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15557:5921":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12999:5282":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11395:7865":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7360:33706":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:13204:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7503:3904":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2895:4115":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3674:2775":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10102:3804":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44188:7534":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13463:5380":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:32443:2757":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42111:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4639:7017":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:3888:3918":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:40683:7477":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:690:7270":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:22986:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:1541:3572":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7613:3592":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12701:3838":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:16049:6045":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:837:7988":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12410:5278":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5111:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7529:3798":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11370:4871":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5974:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10016:20610":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11178:4661":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12127:7904":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4042:8318":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14426:5567":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13707:5440":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14765:5692":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4584:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21484:8267":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:12042:688":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45935:4683":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40521:8045":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43131:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:7752:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4915:8366":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10172:3806":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"14:202:13626":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14181:5526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:7037:2781":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46860:4727":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:3830:3917":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6545:4041":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8157:2597":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6658:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1281:7997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:707:7273":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:9751:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:3347:13581":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6047:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12797:3841":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:1072:7743":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:7673:13727":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40370:4624":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2284:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:7843:8088":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2811:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:1913:15503":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:4177:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:39457:4486":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6228:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16180:5347":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13648:5427":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4180:8338":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:3540:3572":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15855:5311":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:43365:7503":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4585:3927":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:699:7271":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6008:14073":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15192:5806":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8190:7457":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4527:3925":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:13013:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15432:5896":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:673:2833":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8493:8390":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4496:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4455:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:23110:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:9800:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3276:13654":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12014:26403":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8232:8099":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:1596:6292":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:6466:3659":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8137:4157":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:5518:3578":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11041:5217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2281:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6467:4039":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6114:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12324:7311":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:9812:2851":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:3460:7835":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:0:2453":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6741:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6120:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:10059:4994":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15345:5847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:40552:7460":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12718:20635":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:22551:7164":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7269:33708":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:636:5199":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1514:6243":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2392:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:9795:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:1819:2998":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3425:2009":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:1891:3572":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44541:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6332:3890":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22468:4391":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:41111:7168":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2368:8257":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8330:7002":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:7692:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2641:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11497:5223":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12898:20636":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:0:2451":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:614:33720":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:2574:3875":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2868:8438":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40651:7474":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10968:26398":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9730:20627":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2966:13757":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:5830:3964":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2202:8062":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14221:5530":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:9267:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3166:26995":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2809:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2853:2752":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:4806:3933":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:2469:4979":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11885:13837":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6569:3898":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:588:8187":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:1025:7995":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10137:3805":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:8936:8413":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4783:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15990:6032":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14021:5484":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10337:5205":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3682:3549":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46626:4711":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13334:5348":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7792:20572":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:5571:2590":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10535:8066":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"9:393:19549":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4703:8340":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15079:5780":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"0:84:1933":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"17:12140:7905":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5068:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7736:4176":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"0:0:2082":{"crate_id":0,"path":["version_check"],"kind":"module"},"1:939:7991":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14878:5736":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15842:5297":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:22597:30829":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7342:33705":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16146:6070":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:727:5203":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:3733:4786":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11141:7857":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6189:7330":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7931:4786":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:5963:7924":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5939:3981":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4543:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5661:7322":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7754:3003":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:42906:2842":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:46306:4701":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:43921:7516":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:2970:7158":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13297:5342":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12784:7316":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:595:3798":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11144:2592":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:2698:4977":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7884:20573":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1632:6322":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:23172:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:30282:8308":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8011:8295":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:811:3592":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:9943:20615":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10473:3670":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2861:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43675:8050":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3602:2834":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:30741:30838":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:42086:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7738:3002":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:11981:4872":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:15133:5793":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:102:7389":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4578:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7054:7363":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6868:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7291:3572":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12972:3853":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:1887:2775":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4167:8337":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8146:7200":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12273:3842":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11932:7893":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22559:4398":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2693:8019":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"0:81:1909":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"1:8551:7203":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3431:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:2149:7403":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:12964:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:47066:4730":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:48089:7188":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12596:7919":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:3315:6076":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2978:32180":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5696:20561":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:5802:7414":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13856:5461":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8326:8101":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6718:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15480:5897":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:501:6174":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"14:31:7735":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:39470:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:12102:7512":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:2504:3872":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8308:4828":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11978:7896":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:0:2458":{"crate_id":17,"path":["object"],"kind":"module"},"2:45805:4678":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11675:3824":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:364:3539":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4491:8341":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10726:33709":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12828:3842":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12047:794":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:40310:7445":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40863:7485":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7660:4174":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13909:5469":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9186:27031":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4893:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4311:8075":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42503:8031":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42061:2833":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:1697:6361":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4676:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:2151:7997":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:32356:7444":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:14778:5699":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4635:7013":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12191:5265":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:1902:8234":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:909:8000":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42608:2846":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6764:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9272:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3670:8307":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5085:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7128:4853":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11476:8071":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5897:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5982:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:22134:8535":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:710:7986":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:7370:2775":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4774:3932":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2644:3878":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12396:5275":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5121:3943":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:47486:4764":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:12951:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:44748:4669":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6261:7958":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:22095:8532":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13684:5435":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10896:5207":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:42001:13829":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:2178:7405":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6100:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:1582:8001":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4566:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22011:8530":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"18:590:5188":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4949:3938":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7325:2775":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3500:2608":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:9459:31061":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:2948:4121":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"0:78:1885":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"2:8846:8380":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10207:3807":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7262:3212":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:3764:3915":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3056:2614":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2744:3882":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:3915:3919":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11088:5214":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:41644:4631":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13273:5338":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6560:3535":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6879:4095":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:42946:2844":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15535:5916":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:330:6158":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6346:8538":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:542:6203":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:1562:7399":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7604:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6696:4062":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:1603:8002":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:42189:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:45957:4684":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10538:8068":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10762:7571":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10422:7839":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4814:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11215:7283":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8274:7566":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:21102:2744":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8850:2833":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:13038:8039":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6682:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1126:32204":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12684:3768":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:41833:4645":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"14:160:7735":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43875:7513":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:48062:4772":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:3797:3916":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5639:7562":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4625:8315":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11051:3674":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11399:7866":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:40280:7447":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2526:3873":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:3894":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15903:6017":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6811:8442":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2911:3646":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:4999:3578":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:3461:6077":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:2304:7367":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"18:599:33719":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12003:8195":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:42464:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42018:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10988:7851":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13026:5284":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3201:8065":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10439:8267":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4087:13577":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9128:4857":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1063:7997":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1537:6253":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42077:2775":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:32349:2862":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1652":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:2228:7833":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6456:7334":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:23265:4415":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7597:33702":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1710:6365":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:4928:7838":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12758:3840":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14822:5730":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"15:288:19654":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40494:2596":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:0:2459":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7782:7374":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12044:795":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15374:5854":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:10642:7425":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9802:2846":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14485:5270":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:10617:2834":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12366:20757":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14509:5584":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11612:7583":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2354:8253":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14989:5759":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7436:3994":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47816:4767":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3510:2607":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:30565:2842":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:44740:4667":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"5:1019:3549":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:12054:844":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13121:5311":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10432:33714":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"13:0:2448":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:504:3569":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5829:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14156:5523":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:3966:8312":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:1678:1182":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:357:8052":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:32295:2595":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10797:7428":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6204:7931":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:495:6173":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5500:2587":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3192:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5910:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:2369:8005":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:21493:8445":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3443:2598":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:10724:8032":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1496:6235":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"0:75:1856":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"5:4247:2833":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11507:1857":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12049:1636":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:3225:32174":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15980:6031":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:8134:7385":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:42601:2845":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7505:4389":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2722:3881":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5866:3971":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3482:2609":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1682:6352":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6263:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3735:8072":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:328:7393":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1450:2775":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13419:5363":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2197:13765":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:7476:31522":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5009:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2932:13752":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6071:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43640:7433":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:7865:4785":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:4386:2862":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9790:20629":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11313:2602":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13056:5288":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:7616:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3837:8073":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46036:4687":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:42267:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22146:30971":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:11549:7288":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44202:7537":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13083:5296":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:914:7986":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:10019:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:47130:4732":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:41627:4629":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:515:5183":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9014:8110":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43893:7514":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9559:20611":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:47940:4769":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41797:4644":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:4884:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9860:20631":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:6896:3662":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5130:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:489:6171":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46706:4712":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:7417:4382":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:16016:6038":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:3265:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4889:3936":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:43666:7434":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:45975:4685":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:1769:4987":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7540:7765":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:2450:3870":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12301:7310":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8562:4846":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:10685:7427":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:582:2744":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:3589:2833":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:527:6194":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5712:3950":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11645:7295":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:41063:7488":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:363:8053":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:123:3537":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4569:8358":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8292:8100":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:12048:790":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9968:20633":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:7838:3747":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:8205:20574":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6041:20564":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:149:3532":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:15:2272":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2816:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:23710:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:4015:3572":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14385:5562":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:7714:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8814:2592":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:48135:7192":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:44035:7522":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40713:7480":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4151:8335":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:96:24759":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8842:2594":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40674:7476":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7523:7372":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44506:7557":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5798:3958":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:1146:32074":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8226:8097":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:7651:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7722:3899":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44486:7552":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14470:5574":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4914:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11307:7864":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12031:1028":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6401:3892":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:0:2457":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:10918:8036":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:14324:5548":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:609:7817":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:2562:6152":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:30549:4418":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4506:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2548:3874":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:434:33687":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6599:2775":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47020:4729":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3968:3578":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:4:1108":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12850:3844":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:1641:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:1758:2982":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:3186:7398":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10813:33715":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1501:6237":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:261:3549":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:42010:2837":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:16170:5342":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:10716:7843":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12459:5210":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11014:7853":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:4487:2864":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:2139:3569":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12103:7902":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5928:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:624:33721":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:48146:7193":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46450:4706":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:1110:32081":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7543:4390":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12548:7915":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:5395:2584":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8352:7201":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2881:3888":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:44518:7560":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4351:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3241:8067":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15321:5843":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13383:5358":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"14:187:19642":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8281:7567":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45827:4679":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:23141:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:7677:13726":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:16098:6060":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:7668:4779":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:8050:4220":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4610:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:4744:8329":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4854:6602":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13695:5438":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10242:3808":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"0:77:1878":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"16:7568:3907":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:6856:3602":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15101:5786":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40389:4625":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2199:13766":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:4431:3612":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8872:4848":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7915:8090":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6893:6082":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:4052:8021":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:10230:3626":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10471:33717":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:7554:7745":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:14934:5747":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5435:6079":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:4745:3931":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10076:2992":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:7610:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4516:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11523:7285":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4870:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:1107:7998":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4847:6600":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7041:7360":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:21925:8446":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:39410:13580":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:14497:5577":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:5403:3801":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:41774:31523":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:1909:701":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:1265:7367":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10785:33711":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14786:5700":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3366:7492":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22576:30830":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6818:4089":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15868:5987":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:3994:8315":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15037:5766":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15689:5959":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:7639:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:21386:4995":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2305:19700":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3220:7397":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6583:7345":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:4064:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44025:7521":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14633:5586":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10657:5217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:4053:3920":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4312:7747":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:5971:3655":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11439:7869":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10852:20643":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5140:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5905:3975":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4383:8076":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8154:7982":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11605:26802":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:4719:3930":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:44063:7525":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39510:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11690:7882":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:4417:3922":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4434:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10962:7849":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39486:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4473:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15224:5814":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16062:6051":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13948:5474":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:2031:7829":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:580:6222":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6753:4074":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:4207:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14145:5521":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12872:3845":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22248:8526":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:536:4972":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47280:4733":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10974:5210":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:40664:7475":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"9:357:19563":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:48120:7191":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:10762:8033":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:256:7823":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11412:7867":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:15645:5944":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:12986:31996":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11113:7855":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:4773:7837":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:42384:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22277:8527":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:5987:3587":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:787:7396":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11593:7214":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6079:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:23017:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:22415:4999":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14057:5490":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:4235:2861":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:918:7987":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:10247:3627":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:22484:7437":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1650:6334":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14413:5566":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:4460:2758":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2406:3868":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7694:3908":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:16087:6059":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22675:8309":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15184:5805":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:42345:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40530:7457":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43583:8047":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:12431:13618":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:450:19548":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:40431:8238":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12345:5273":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7462:6087":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:9034:4853":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5859:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3936:8310":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:12037:1498":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:1419:2833":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:3338:3592":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:2472:3871":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:23203:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6944:33703":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4462:3923":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7534:3905":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3930:8311":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1545:3592":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:5082:8077":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:22056:8531":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:4129:26316":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2600:3627":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:1203:7828":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3310:13578":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1676:3543":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6415:7333":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12052:1635":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40599:7467":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6059:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6813:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40581:7464":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:45873:4681":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:7861:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46572:4709":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11256:7862":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:11477:13607":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:15566:5923":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1639:6326":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4613:3928":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10315:3811":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:849:2834":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:5387:13599":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:44490:7553":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3600:6078":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7768:3897":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:5867:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1604:6297":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:14662:5606":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45905:4682":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6107:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13436:5371":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:44498:7555":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:8072:6094":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46474:4707":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:880:7396":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3323:8292":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13787:5454":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:4924:850":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:903:3592":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:4040:8020":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:7901:7564":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:7143:13729":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4616:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:507:4362":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:11901:7752":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7855:7199":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13516:5394":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42897:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"15:306:19655":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:491:7263":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4647:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:40223:7445":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:2554:33680":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:4557:3926":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:621:7754":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1528:6248":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:4772:714":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:6112:3578":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44173:7528":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11290:3675":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:47628:4765":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42069:2834":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:14087:5509":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21813:30537":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:43361:7502":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:2231:7401":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:10095:8118":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:42615:2853":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8200:7484":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22642:7441":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:700:2775":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13676:5433":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:40571:7463":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:6540:7760":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4860:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2570:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"11:1066:19629":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:6596:8409":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:12065:7507":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:7805:2615":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:1094:7827":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12510:5281":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:13765:5447":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1558:6268":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:7429:4157":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:2383:2833":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:41604:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4666:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10035:3801":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15671:5953":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:8239:4158":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8920:8411":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5023:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:6543:8407":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6156:7327":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10738:8126":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:12320:8391":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10925:20645":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2205:1872":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6600:20566":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6159:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:2423:2775":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6226:7946":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5363:3945":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:5645:3590":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2426:2007":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4977:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2927:13751":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:4439:3580":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1434:2834":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:3199:8064":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:13259:8209":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5104:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7644:4778":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5075:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:41933:2833":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:4192:4991":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8973:8104":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7492:4386":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6901:3900":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:800:3572":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40543:7458":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:507:6177":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"0:82:1919":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"1:7906:7565":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:511:7826":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3179:2833":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6934:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10097:8117":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:12264:7308":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44578:13876":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4776:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8300:8097":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2907:13749":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13832:5460":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:1472:7395":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:15311:5840":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2937:13753":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15725:5963":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11701:7883":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8984:8106":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:7136:26310":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:13155:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:475:6163":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7828:4184":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5612:3896":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4641:3929":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46525:4708":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5033:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:26112:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:7645:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42851:2842":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:7643:8267":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13202:5326":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11604:7292":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:4038:8317":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:8847:8028":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10338:27105":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21365:8267":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:1746:13775":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6194:8084":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:396:3541":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:15062:5775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:867:7395":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:30635:30844":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:563:6214":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10430:2591":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15117:5789":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2962:13756":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14757:5689":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4998:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10915:7846":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:351:33682":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13584:5398":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11168:20662":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:564:5187":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44494:7554":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4440:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:42924:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2810:3885":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:2169:20690":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:8181:3911":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13254:5337":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11590:7291":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:21771:8267":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12255:7307":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:654:14511":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:6681:3549":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:43839:7511":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:11436:8038":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2899:8439":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21158:30536":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14950:5750":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14170:5525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22613:30840":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4964:8372":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4830:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6711:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:44399:7550":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:2974:32179":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:922:7988":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:39552:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43695:8051":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:6415:7419":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40877:7486":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:569:6217":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"12:0:2454":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4968:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4161:8022":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:15160:5797":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:40501:7433":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2933:19701":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:3251:7834":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:44705:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11945:7894":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45781:4677":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44502:7556":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4549:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7362:2775":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:48237:7198":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8545:2833":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:8171:2836":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46236:4699":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41949:2775":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3282:13653":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11459:7871":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:574:6219":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4375:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4710:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:7518:3588":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:0:2449":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11779:5224":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14251:5535":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:42228:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12335:5270":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7717:8193":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9891:20612":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5995:3985":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7732:8194":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:3232:3857":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1576:6278":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3014:13579":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7651:7981":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:9808:2854":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:7388:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11657:7297":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:596:6231":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1703:6362":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:7279:7412":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10780:4858":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2864:2756":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2352:2075":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39649:7167":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14041:5485":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:10532:8064":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:1531:8008":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:6146:3637":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15733:5966":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:482:3639":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7015:4099":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5727:3953":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:40302:7448":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:5431:2586":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5891:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8207:3809":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:548:6206":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8385:8376":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3655:3706":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:10054:8270":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:16076:6054":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:4637:7015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:9147:7568":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7284:4650":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:43143:7180":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:11307:7577":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14282:5540":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1051:7997":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11816:3681":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12418:7910":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:1570:6276":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11743:7890":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:481:7262":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10293:3809":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"10:36:6154":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3160:30139":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4388:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13809:5455":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12536:7914":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:11340:4868":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4724:6544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7633:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:4835:3934":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11449:3746":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15337:5846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2821:2750":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4755:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:123:14154":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:41810:7566":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7613:7980":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11194:20663":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:9678:20616":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:1836:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5044:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:22924:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1490:8000":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:48161:7194":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12153:7906":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7598:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:671:7822":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:8958:8029":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:2766:3883":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14373:5561":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:41086:7491":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:742:7987":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1556:7398":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:41119:7493":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41661:8306":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:7923:7759":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:6225:7415":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15125:5791":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:1511:7987":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1743:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"0:76:1870":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"1:859:2775":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:10835:8034":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:9164:8114":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:12043:690":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14266:5539":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:9048:26402":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1674:6351":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6742:7350":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:4307:7746":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:521:24771":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8858:8103":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6531:7343":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:8168:2835":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44045:7523":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10831:27605":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15108:5788":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14346:5559":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11052:7843":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12030:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:39371:2838":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4663:13672":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8796:2591":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39635:4990":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:2057:8009":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13182:5325":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:4845:31808":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5632:3655":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4740:8326":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11727:7888":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7318:4139":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8959:4852":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:507:5180":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2969:19702":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:42306:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11453:3677":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12486:5280":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:41092:7492":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5415:2585":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:0:1523":{"crate_id":1,"path":["std"],"kind":"module"},"16:5017:3940":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6017:20563":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15546:5920":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:6249:3655":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"9:177:19615":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2859:2754":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:15212:5813":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4745:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40266:4622":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:46603:4710":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2355:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"18:681:7267":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9474:8088":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12290:7309":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:12385:13610":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6943:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10840:27607":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13922:5471":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:21112:30526":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}