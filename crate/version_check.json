{"root":"0:0:2098","crate_version":"0.9.4","includes_private":false,"index":{"a:2:2805:259-0:143:1876":{"id":"a:2:2805:259-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:686:2842":{"id":"5:686:2842","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:129:1875":{"id":"b:2:2276-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2278:24523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12:2247":{"id":"0:12:2247","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12515:32115":{"id":"2:12515:32115","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2259":{"id":"0:13:2259","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12534:30387":{"id":"2:12534:30387","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12533:30382"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43931:7433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2585:752":{"id":"2:2585:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2280":{"id":"0:16:2280","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:8278-0:129:1875":{"id":"a:2:8670:8278-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:8278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12573:27408":{"id":"2:12573:27408","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12029:457","str::splitn":"2:12570:1851","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43770:7423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:4391":{"id":"2:12532:4391","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43634:3814","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12528:27394":{"id":"2:12528:27394","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12529:27395"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3424-0:93:1874":{"id":"b:2:3424-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:1828":{"id":"0:24:1828","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:129:1875"],"is_stripped":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:725":{"id":"0:21:725","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:1846":{"id":"2:12600:1846","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2418":{"id":"0:48:2418","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:27371":{"id":"2:12522:27371","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:32116":{"id":"2:12526:32116","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12035:1544","str::slice_mut_unchecked":"2:12527:32117","crate::ops::Index":"2:3085:8120"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:143:1876":{"id":"b:2:2273-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2275:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:461":{"id":"0:156:461","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1936":{"id":"0:82:1936","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:2784":{"id":"2:12507:2784","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:725":{"id":"0:133:725","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:725":{"id":"0:38:725","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:143:1876":{"id":"b:2:2589-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2592:135","2:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:468":{"id":"0:108:468","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:143:1876":{"id":"b:2:2579-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2582:1971"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12529:27395":{"id":"2:12529:27395","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12528:27394"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:8278-0:143:1876":{"id":"a:2:8670:8278-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:8278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143:1876":{"id":"0:143:1876","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:2845:2626-0:143:1876","a:2:2805:259-0:143:1876","a:2:8670:8278-0:143:1876","a:2:2788:249-0:143:1876","a:2:8669:8094-0:143:1876","b:2:2276-0:143:1876","b:2:2589-0:143:1876","b:2:2594-0:143:1876","b:2:2273-0:143:1876","b:2:2583-0:143:1876","b:2:2579-0:143:1876","b:2:3424-0:143:1876","b:5:682-0:143:1876","b:5:5793-0:143:1876","0:152","0:154","0:155","0:151","0:157","0:146","0:159","0:149","0:148","0:56"]}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12555:1838":{"id":"2:12555:1838","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::split_whitespace":"2:12533:30382","str::rsplit":"2:12561:27405"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43648:7334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1874":{"id":"0:93:1874","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:2845:2626-0:93:1874","a:2:2805:259-0:93:1874","a:2:8670:8278-0:93:1874","a:2:2788:249-0:93:1874","a:2:8669:8094-0:93:1874","b:2:2276-0:93:1874","b:2:2589-0:93:1874","b:2:2594-0:93:1874","b:2:2273-0:93:1874","b:2:2583-0:93:1874","b:2:2579-0:93:1874","b:2:3424-0:93:1874","b:5:682-0:93:1874","b:5:5793-0:93:1874","0:96","0:105","0:99","0:100","0:107","0:22","0:97","0:103","0:20","0:102"]}}},"2:12509:32113":{"id":"2:12509:32113","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:28618":{"id":"2:12514:28618","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11760:1865"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5795:1603":{"id":"5:5795:1603","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12628:28539":{"id":"2:12628:28539","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:8278-0:93:1874":{"id":"a:2:8670:8278-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:8278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:129:1875":{"id":"b:5:682-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2840","5:685:2841","5:686:2842"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:725":{"id":"0:57:725","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:7445":{"id":"2:12531:7445","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43624:7414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12591:32123":{"id":"2:12591:32123","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::match_indices":"2:12588:32122"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43816:7426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2278:24523":{"id":"2:2278:24523","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3:1720":{"id":"0:3:1720","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1874"],"is_stripped":true}}},"0:34:2385":{"id":"0:34:2385","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8669:8094-0:93:1874":{"id":"a:2:8669:8094-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:8094","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5793-0:93:1874":{"id":"b:5:5793-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:1889":{"id":"0:27:1889","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2280":{"id":"0:52:2280","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2800:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12508:32112":{"id":"2:12508:32112","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:349":{"id":"2:12516:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12517:348","`u8`":"1:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:129:1875":{"id":"a:2:2805:259-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12536:32118":{"id":"2:12536:32118","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43912:7431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:1875":{"id":"0:129:1875","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:2845:2626-0:129:1875","a:2:2805:259-0:129:1875","a:2:8670:8278-0:129:1875","a:2:2788:249-0:129:1875","a:2:8669:8094-0:129:1875","b:2:2276-0:129:1875","b:2:2589-0:129:1875","b:2:2594-0:129:1875","b:2:2273-0:129:1875","b:2:2583-0:129:1875","b:2:2579-0:129:1875","b:2:3424-0:129:1875","b:5:682-0:129:1875","b:5:5793-0:129:1875","0:135","0:141","0:140","0:137","0:138","0:132","0:134","0:37"]}}},"2:12617:1847":{"id":"2:12617:1847","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1937":{"id":"0:32:1937","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:468":{"id":"0:160:468","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:129:1875":{"id":"b:5:5793-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12633:32130":{"id":"2:12633:32130","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:32130"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43965:7357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"2:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2799:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2582:1971":{"id":"2:2582:1971","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:27403":{"id":"2:12558:27403","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12016:7336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:129:1875":{"id":"b:2:3424-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12596:32124":{"id":"2:12596:32124","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2272":{"id":"0:14:2272","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1889":{"id":"0:42:1889","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:32127":{"id":"2:12605:32127","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:8086":{"id":"2:12632:8086","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:8086"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43956:7354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:461":{"id":"0:104:461","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2389":{"id":"0:35:2389","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2583-0:93:1874":{"id":"b:2:2583-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3424-0:143:1876":{"id":"b:2:3424-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3426:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:1879":{"id":"0:45:1879","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:667":{"id":"0:98:667","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1889","0:30:1879","0:32:1937","0:33:2381","0:34:2385","0:35:2389","0:36:2392"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3426:1641":{"id":"2:3426:1641","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39448:4994","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1910":{"id":"0:79:1910","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8669:8094-0:129:1875":{"id":"a:2:8669:8094-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:8094","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61-0:24:1828":{"id":"0:61-0:24:1828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1828","glob":true}}},"b:2:2276-0:93:1874":{"id":"b:2:2276-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2278:24523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2788:249-0:129:1875":{"id":"a:2:2788:249-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:1950":{"id":"0:84:1950","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:30382":{"id":"2:12533:30382","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12534:30387"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43922:7432","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12541:1965":{"id":"2:12541:1965","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2592:135":{"id":"2:2592:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:682-0:93:1874":{"id":"b:5:682-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2840","5:685:2841","5:686:2842"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12561:27405":{"id":"2:12561:27405","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::split":"2:12555:1838"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43666:7337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:32119":{"id":"2:12564:32119","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12200:13508","str::split":"2:12555:1838","prim@char":"1:12029:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12567:32120"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43698:7419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12567:32120":{"id":"2:12567:32120","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12200:13508","str::split":"2:12555:1838","prim@char":"1:12029:457","str::split_terminator":"2:12564:32119"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43716:7420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:143:1876":{"id":"a:2:2788:249-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12576:27410":{"id":"2:12576:27410","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:2576":{"id":"2:12582:2576","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::rmatches":"2:12585:32121"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43852:7428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:24567":{"id":"2:12608:24567","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2845:2626-0:129:1875":{"id":"a:2:2845:2626-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12611:27412":{"id":"2:12611:27412","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:32789":{"id":"5:5524:32789","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2845:2626-0:93:1874":{"id":"a:2:2845:2626-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:9:1879":{"id":"0:9:1879","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:93:1874":{"id":"a:2:2805:259-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:684:2840":{"id":"5:684:2840","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12627:28538":{"id":"2:12627:28538","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:28621":{"id":"5:5538:28621","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12628:28539"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:32788","5:5521:13634","5:5524:32789","5:5527:32790","5:5535:32791","5:5536:32792","5:5537:8194","5:5538:28621","5:5539:28622"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5535:32791":{"id":"5:5535:32791","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:30392":{"id":"2:12537:30392","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43940:7434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12585:32121":{"id":"2:12585:32121","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::matches":"2:12582:2576"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43870:7429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:13634":{"id":"5:5521:13634","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:8194":{"id":"5:5537:8194","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:1829":{"id":"0:62-0:39:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1829","glob":true}}},"5:5520:32788":{"id":"5:5520:32788","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2630","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2630","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12594:1837":{"id":"2:12594:1837","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1889":{"id":"0:6:1889","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:143:1876":{"id":"b:5:682-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2840","5:685:2841","5:686:2842"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2098":{"id":"0:0:2098","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1874","`is_max_version`":"0:80:1918","`is_exact_version`":"0:81:1926","`is_max_date`":"0:77:1895","`is_exact_date`":"0:78:1902","`triple()`":"0:75:1873","`Date`":"0:143:1876","`Channel`":"0:129:1875"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1873","0:76:1887","0:77:1895","0:78:1902","0:79:1910","0:80:1918","0:81:1926","0:82:1936","0:84:1950","0:60-0:3:1720","0:61-0:24:1828","0:62-0:39:1829"],"is_stripped":false}}},"5:5536:32792":{"id":"5:5536:32792","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2630","`String`":"5:7493:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2630","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:129:1875":{"id":"b:2:2594-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:135","2:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:158:1138":{"id":"0:158:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1873":{"id":"0:75:1873","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1874","`Version::read()`":"0:6:1889","`Channel`":"0:129:1875","crate":"0:0:2098","`Channel::read()`":"0:27:1889","`Date::read()`":"0:42:1889","`Date`":"0:143:1876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1918":{"id":"0:80:1918","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1926":{"id":"0:81:1926","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:28535":{"id":"2:12625:28535","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:667":{"id":"0:150:667","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:129:1875":{"id":"b:2:2273-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2275:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12544:1842":{"id":"2:12544:1842","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12588:32122":{"id":"2:12588:32122","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12200:13508","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12029:457","str::rmatch_indices":"2:12591:32123"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43798:7425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:7435":{"id":"2:12530:7435","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12029:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43618:7413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:93:1874":{"id":"b:2:2579-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2582:1971"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50:2272":{"id":"0:50:2272","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:880":{"id":"2:12506:880","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12029:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:348":{"id":"2:12517:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12046:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:32117":{"id":"2:12527:32117","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12035:1544","crate::ops::IndexMut":"2:3089:8121","str::slice_unchecked":"2:12526:32116"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:27369":{"id":"2:12518:27369","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:143:1876":{"id":"b:2:2276-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2278:24523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12520:27370":{"id":"2:12520:27370","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41688:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2593:1628":{"id":"2:2593:1628","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12547:2821":{"id":"2:12547:2821","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41688:202","prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12551:2783":{"id":"2:12551:2783","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41688:202","prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505":{"id":"2:12505","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12506:880","2:12507:2784","2:12508:32112","2:12509:32113","2:12511:32114","2:12514:28618","2:12515:32115","2:12516:349","2:12517:348","2:12518:27369","2:12520:27370","2:12522:27371","2:12524:27372","2:12526:32116","2:12527:32117","2:12528:27394","2:12529:27395","2:12530:7435","2:12531:7445","2:12532:4391","2:12533:30382","2:12534:30387","2:12535:1834","2:12536:32118","2:12537:30392","2:12538:2364","2:12541:1965","2:12544:1842","2:12547:2821","2:12551:2783","2:12555:1838","2:12558:27403","2:12561:27405","2:12564:32119","2:12567:32120","2:12570:1851","2:12573:27408","2:12576:27410","2:12579:27411","2:12582:2576","2:12585:32121","2:12588:32122","2:12591:32123","2:12594:1837","2:12596:32124","2:12598:32125","2:12600:1846","2:12601:1844","2:12602:32126","2:12605:32127","2:12608:24567","2:12611:27412","2:12614:32128","2:12617:1847","2:12620:1845","2:12623:1879","2:12625:28535","2:12626:28536","2:12627:28538","2:12628:28539","2:12629:28540","2:12630:32129","2:12632:8086","2:12633:32130"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2597:135":{"id":"2:2597:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32106:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2598:1626":{"id":"2:2598:1626","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:32128":{"id":"2:12614:32128","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12629:28540":{"id":"2:12629:28540","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:93:1874":{"id":"b:2:2273-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2275:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136:667":{"id":"0:136:667","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12620:1845":{"id":"2:12620:1845","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32790":{"id":"5:5527:32790","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7493:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:93:1874":{"id":"b:2:2594-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:135","2:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12579:27411":{"id":"2:12579:27411","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:13506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12598:32125":{"id":"2:12598:32125","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1829":{"id":"0:39:1829","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143:1876"],"is_stripped":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2373:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2583-0:143:1876":{"id":"b:2:2583-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:685:2841":{"id":"5:685:2841","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:461":{"id":"0:142:461","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:725":{"id":"0:147:725","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2392":{"id":"0:36:2392","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:93:1874":{"id":"b:2:2589-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2592:135","2:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:2287":{"id":"0:18:2287","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1889","0:9:1879","0:12:2247","0:13:2259","0:14:2272","0:16:2280","0:18:2287"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:1879":{"id":"0:30:1879","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8669:8094-0:143:1876":{"id":"a:2:8669:8094-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:8094","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106:1138":{"id":"0:106:1138","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30922:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1720":{"id":"0:60-0:3:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1720","glob":true}}},"2:12511:32114":{"id":"2:12511:32114","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12509:32113"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:1851":{"id":"2:12570:1851","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508","str::rsplitn":"2:12573:27408"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43752:7422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:28536":{"id":"2:12626:28536","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39635:28546","Self::is_ascii":"2:12625:28535"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39635:28546","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2381":{"id":"0:33:2381","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2594-0:143:1876":{"id":"b:2:2594-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:135","2:2598:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5793-0:143:1876":{"id":"b:5:5793-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2845:2626-0:143:1876":{"id":"a:2:2845:2626-0:143:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:1887":{"id":"0:76:1887","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1895":{"id":"0:77:1895","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12538:2364":{"id":"2:12538:2364","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:129:1875":{"id":"b:2:2579-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2582:1971"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12630:32129":{"id":"2:12630:32129","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:32129"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43947:7358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2583-0:129:1875":{"id":"b:2:2583-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5539:28622":{"id":"5:5539:28622","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12629:28540"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7493:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12623:1879":{"id":"2:12623:1879","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12161:134","`FromStr`":"2:12160:8289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41831:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12160:8289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12160:8289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:1834":{"id":"2:12535:1834","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43902:7430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1902":{"id":"0:78:1902","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41686:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:249-0:93:1874":{"id":"a:2:2788:249-0:93:1874","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:23:725":{"id":"0:23:725","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2287":{"id":"0:54:2287","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"2:2379:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:143:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1889","0:45:1879","0:48:2418","0:50:2272","0:52:2280","0:54:2287"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12524:27372":{"id":"2:12524:27372","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:1844":{"id":"2:12601:1844","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:32126":{"id":"2:12602:32126","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12029:457","self::pattern":"2:12200:13508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12225:13505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:129:1875":{"id":"b:2:2589-0:129:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2592:135","2:2593:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2275:2563":{"id":"2:2275:2563","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4666:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12725:5475":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13229:5571":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14157:5855":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1525:19527":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13072:5543":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:6187:7982":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:699:7180":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13990:5810":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11816:5287":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11609:7492":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:39299:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2916:13646":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44212:7450":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:1092:7896":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:3085:8120":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:2961:2840":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22029:8165":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21810:8349":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:40384:7372":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8203:3814":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:1184:7737":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42041:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11513:7970":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14034:5824":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:21592:8352":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6248:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43902:7430":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:42761:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8153:2610":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6456:7243":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10279:7771":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5885:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42158:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4830:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11152:7815":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10604:7203":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3830:7971":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43648:7334":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:11760:1865":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9913:7754":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:48080:7105":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:7289:2788":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:2921:13647":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14119:5847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6047:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:12030:1666":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10341:5227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5301:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:6589:8307":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:21006:30819":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6818:4092":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:588:6135":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1639:6235":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:30446:30133":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:41771:4652":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44260:4660":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:11141:2605":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11390:7817":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2926:13648":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:45917:4689":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2796:2762":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13694:3857":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11031:3677":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9087:3807":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46139:4702":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:44280:7459":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7884:20470":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12112:5350":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:12214:7182":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14127:5849":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12027:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5075:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2359:3869":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:2037:4790":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:3232:3860":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1576:6187":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2305:19597":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13203:5569":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10487:7334":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:6918:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3301:13473":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1842:2845":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9004:20528":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:15:2288":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:44578:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3004:13474":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:20993:30673":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:4871:7923":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:10535:7966":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4351:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10457:7784":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:636:5204":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:21383:8347":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:44684:7470":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:2461:6056":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:44621:4669":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43666:7337":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43852:7428":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14111:5846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:6533:7669":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:427:33350":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:2012:7738":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22031:8345":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9124:4861":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13950:5800":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6114:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4847:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41814:13724":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11194:4861":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:0:2474":{"crate_id":17,"path":["object"],"kind":"module"},"16:6560:3541":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:7041:7269":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4989:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:4076:2846":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4902:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21907:5001":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:41831:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:703:7884":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11227:7216":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2933:19598":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5648:7820":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40374:7370":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12253:5383":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2857:8336":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:12040:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:2133:3575":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11995:29390":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2940:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:10983:2607":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2406:3871":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"9:507:4365":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7694:3911":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:868:7892":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11112:7812":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:548:6114":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47367:4766":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2196:7960":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3159:25245":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10152:7673":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:4299:7656":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:1407:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:707:7182":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10398:7775":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:7521:3803":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13711:5745":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7381:4385":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:784:3558":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:41804:7657":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5009:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4628:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:609:7726":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9973:7759":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:1507:6149":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:3503:2620":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4344:3924":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2374:8161":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:9618:33373":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:43444:7945":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5992:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:8779:7927":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4434:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:4032:7918":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:992:7276":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"7:78:19438":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:9044:25105":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:7544:7282":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:1911:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:10735:7423":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:7552:2629":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:12034:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"15:0:2472":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11307:5275":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:45642:4678":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:8449:7089":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6943:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21159:8165":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:7604:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13967:5807":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8142:7109":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10317:5226":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:7998:2848":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21297:8356":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:14101:5843":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4224:7972":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:504:7735":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11952:5318":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8887:4853":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13982:5809":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:7839:7986":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:357:3545":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:43816:7426":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4808:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1542:3578":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7523:7281":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:39343:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:2165:7310":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5152:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4719:3933":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11236:7217":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:4365:3586":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:1697:6270":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10662:7789":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:652:5185":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6960:7860":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7503:3907":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9071:3806":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2969:19599":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5928:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21253:8355":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"11:860:7891":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10371:7773":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44447:4666":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:21008:30822":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11640:3847":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1546:3597":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:45732:4682":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10092:8016":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7513:7280":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:8097:7288":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13056:5542":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:43618:7413":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4294:7655":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4686:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6569:3901":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4922:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4376:7974":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11202:7208":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:6753:4077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:48118:7107":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42080:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40444:7381":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2203:2034":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:2364:8156":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"0:77:1895":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"2:42706:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:44175:7449":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10789:20628":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1876:7308":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:7128:26844":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:1055:7893":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:113:24486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10777:4862":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:44387:7466":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4035:8216":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:690:7179":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12532:5447":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10060:5219":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6513:7244":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12268:5389":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8239:4161":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10699:7795":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6545:4044":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13827:5769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11813:3686":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5033:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6682:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:785:3578":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:46041:4694":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6419:7399":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"14:215:7296":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40202:4627":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6934:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:450:19445":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8233:8203":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:940:7889":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9426:2853":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"11:772:7305":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14025:5821":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4696:8238":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:47961:7096":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:2670:3882":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8277:7476":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:2394:3597":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:1484:7898":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:40899:7400":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9095:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3197:7963":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:727:5208":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4488:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:894:3578":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8980:8004":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"14:202:13521":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8854:8001":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:4527:3928":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43965:7357":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:276:2630":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44367:7461":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:10735:8024":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:7037:30002":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:207:3553":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13555:5695":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2284:19571":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:12028:1037":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:45786:4684":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9278:3813":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:1304:7652":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:46285:4706":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"13:0:2464":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10589:7202":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6100:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11063:7808":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:3315:5984":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:837:2845":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40214:30130":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:12853:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:80:24484":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3195:7962":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7722:3902":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4373:2871":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39283:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11473:7969":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:2968:32106":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:897:2845":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11846:5291":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8798:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:434:3759":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:9286:31320":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10266:7770":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:47509:4767":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4641:3932":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:47821:4771":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:629:7653":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:4044:7919":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:5634:3595":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10828:25351":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:507:6085":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:8669:8094":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:4428:3586":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10421:3751":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:8766:20520":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"0:75:1873":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"16:6332:3893":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:40365:7369":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43527:7343":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:11730:13732":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:2334:2846":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:1075:7736":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:46901:4731":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5829:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8824:2606":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2574:3878":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:40:5315":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:483:6076":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:7019:3668":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3362:7401":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13686:5744":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6159:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6944:33366":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:39323:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:12225:13505":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:324:7302":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:9471:7986":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5830:3967":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8472:5005":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:45994:4693":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10965:25356":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7861:4789":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:5493:2600":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:1855:3597":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:9631:2855":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:2260:7893":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1494:7884":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:42197:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7621:20468":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12935:5524":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"9:393:19446":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:41737:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:3802:3597":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:574:6127":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7736:4179":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8810:2605":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10529:7962":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:14174:5862":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10686:7793":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"9:177:19512":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7897:7473":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44459:13772":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5939:3984":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3286:30670":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10441:7779":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:5818:3654":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10521:7197":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:12044:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:40244:8136":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6079:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6781:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11368:5280":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7128:4857":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43870:7429":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40403:7375":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6268:33372":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40435:7380":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:7393:8105":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:30388:30146":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:7634:2628":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:0:2465":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13612:5733":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2321:3861":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2947:13650":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4893:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11138:7814":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6086:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7610:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:6335:8433":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6901:3903":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5424:2599":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:21815:8357":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11587:3844":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6204:7829":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12779:5483":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12048:1648":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10215:7768":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13114:5551":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3206:7308":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:41646:4647":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12946:5526":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9532:33375":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:12220:13506":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14402:5940":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5374:2596":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5068:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10617:7204":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:2479:33345":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:298:7299":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3214:7306":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14014:5817":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5743:7233":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4968:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:2351:2788":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5941:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13793:5766":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2795:2625":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46711:4728":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5384:20457":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9052:20506":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42959:7408":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6898:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10037:5217":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:693:2788":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:52:19463":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5982:7234":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43798:7425":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44671:4311":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7679:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1703:6271":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6017:20460":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:582:2757":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:23072:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:8216:7430":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2909:4119":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12672:5236":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40455:7382":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7792:20469":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2420:2023":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4364:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:11905:7416":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40307:2609":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4783:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6261:7856":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10607:7931":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12811:5487":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:45838:4686":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:32142:7939":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5773:7981":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:47161:4735":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:14500:5965":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12438:5430":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7660:4783":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44032:13519":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2810:3888":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46587:4714":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3436:2611":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10411:7776":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:32146:4161":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:5564:2603":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:21460:8165":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:3232:7743":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4921:3940":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7593:3601":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:41762:2788":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:48095:7106":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:4774:3935":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:3946":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40334:7943":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:44659:4674":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14309:5915":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:30950:2757":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10127:7190":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:1444:2788":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:44371:7462":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:39387:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:2423:19522":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:13568:5702":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11042:3678":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6819:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:30922:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:2467:6057":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8846:2845":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12137:5352":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:43464:7946":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:13102:8107":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:8002:13620":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11359:20654":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:3583:2845":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11367:4875":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11338:20653":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:5121:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:644:5185":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:2692:4981":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4986:3942":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2951:13651":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:43183:7093":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:47981:7098":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21209:30412":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10638:7207":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40042:7355":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8896:20524":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4878:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:8687:20518":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11508:20531":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8209:7334":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:3764:3918":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5905:3978":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7768:3900":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:10981:5222":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:41882:2846":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:2744:3885":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6879:4098":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12453:5434":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5995:3988":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:5233:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12051:855":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2853:2769":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8322:7999":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9999:3796":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6696:4065":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:423:33349":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10244:2613":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:7995:2847":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:2209:7742":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4939:1104":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:1104:32082":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:638:7953":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12998:5532":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5111:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:41899:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5897:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6136:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:40690:7395":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:481:7171":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40164:13574":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:41623:7475":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41823:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:10530:7336":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4814:8223":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:5328:3555":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:0:2470":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7474:7871":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11212:4869":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4473:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2526:3876":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:42734:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:44083:7446":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5588:3897":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:796:3597":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:3338:13476":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3418:2025":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:39462:7076":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:2362:8155":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:6830:3608":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12423:5426":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:5964:3660":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:21585:8165":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:7645:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:755:7189":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:7255:3578":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13287:5580":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7334:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47943:4774":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11048:3679":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9456:33380":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:22973:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:3235:7964":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8381:8274":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4755:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7269:33370":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46823:4730":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:43556:7949":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:564:5192":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:5044:7975":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1466:7304":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6804:8340":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"0:78:1902":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"17:13245:5573":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:7851:7108":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1064:7895":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5969:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:538:5190":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6792:4090":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7708:3912":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4566:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7391:20467":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42277:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:101:7298":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10647:3829":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:5976:3592":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:12826:31525":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4824:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1558:6177":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4998:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13136:5562":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2842:2765":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:7709:8091":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3390:3584":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10930:5263":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:123:14051":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49981:8359":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7482:3593":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11328:7222":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4710:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:822:7886":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2722:3884":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:829:8106":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:42238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:4737:8227":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9853:20540":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:46453:4711":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:23006:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:40036:7354":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11534:7971":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2380:3870":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:48027:7102":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40394:7373":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7902:7474":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:25:664":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:12960:5528":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:12160:8289":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:40905:7401":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:759:7304":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4595:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:8660:20505":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:6120:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:0:2469":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:45662:4679":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14515:5966":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11602:25475":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:30552:30137":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:6801:3595":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44069:7443":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9608:7749":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2892:8339":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:12036:1631":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11155:2606":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3332:3597":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:4395:3584":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:41610:4646":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6711:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4375:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:8205:20471":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10763:7934":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:3049:19600":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:527:6102":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14043:5825":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:21197:8350":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14479:5962":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:6603:3665":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3237:7965":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:4889:3939":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4733:8224":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5015:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40115:7357":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7668:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1528:6157":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44375:7463":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12766:5482":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2450:3873":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:25921:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:42980:7089":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3276:7967":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:3915:3922":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:5712:3953":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:43435:7339":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:21330:8351":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:149:3538":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7911:7988":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7613:7878":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8932:8311":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10950:7803":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10754:7478":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10228:7769":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6658:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:256:7732":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2225:33306":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9968:4643":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:1822:3008":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7365:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5974:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:666:2845":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3267:13549":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11175:4663":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:3888:3921":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46233:4704":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:946:7891":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4884:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46309:4707":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:1535:2845":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12173:5361":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:7372:29392":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4152:8234":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10508:7196":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40157:7361":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6718:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9476:3674":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7360:33371":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11548:3843":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:3441:7744":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6893:5990":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:6101:3584":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6889:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14470:5960":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:122:3543":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12197:5365":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9271:3007":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6401:3895":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14270:5900":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4724:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13011:5533":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:599:33383":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12054:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:20978:30673":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:2548:3877":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3830:3920":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40676:7394":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:0:885":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4789:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:12035:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22285:4395":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:7426:4386":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:41746:2845":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13025:5536":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:10470:3675":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"9:0:2467":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10094:8015":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:7633:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12831:5488":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7493:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:12804:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4543:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7660:4177":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:48001:7100":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:2972:32105":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1846:2788":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4523:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4585:3930":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11125:7813":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3981:8212":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44568:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6290:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:2286:7895":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:9888:4998":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:22874:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:39365:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10727:7798":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:2178:7739":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6263:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42990:7409":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:21482:4999":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2867:4117":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12466:5436":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:22709:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8282:8237":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4449:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14379:5939":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:30091:8206":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12544:5449":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13923:5796":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42445:2855":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5696:20458":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3493:2621":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1632:6231":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11616:7492":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:8050:4223":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11992:5329":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:12271:13513":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:2473:6058":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"0:0:2098":{"crate_id":0,"path":["version_check"],"kind":"module"},"17:13869:5783":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42119:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2511:13578":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"0:81:1926":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"16:6318:4030":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:531:7173":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2238:7276":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:8281:4230":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12025:5335":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:10290:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:5484:3584":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2931:4123":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6459:3664":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:1501:6146":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:48042:7103":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11618:3845":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4745:3934":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:261:7733":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:850:2846":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1145:7652":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43922:7432":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5085:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:22808:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"10:0:2468":{"crate_id":10,"path":["adler"],"kind":"module"},"18:681:7176":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4870:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2878:13642":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6242:3660":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43546:7344":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:32160:2871":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:7750:7939":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2810:2763":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:40890:7399":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12912:5523":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9160:8012":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:43536:7948":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10088:3632":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14057:5832":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:7577:3597":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10759:7480":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:5746:7980":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9946:5215":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"9:330:6066":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6587:2788":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3671:3555":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12052:1706":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:4053:3923":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10764:7472":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:7088:13616":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12046:1650":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:4630:6924":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:536:4976":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11174:20652":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5123:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:731:7885":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5574:3894":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:42678:7080":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:44379:7464":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7507:4393":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:4417:3925":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:766:24496":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10715:7797":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1290:7893":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:12016:7336":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:12043:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:582:3803":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:41474:8204":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39268:4488":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2616:7667":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12041:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4462:8238":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4236:2845":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:44391:7467":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:47697:4769":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:43912:7431":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:42688:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:5632:7471":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:42743:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8900:8310":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10569:7930":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21161:8348":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:736:24495":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6169:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10241:5215":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4738:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:7258:4160":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14135:5850":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12659:5467":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:8927:20525":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13175:5565":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8987:24569":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2896:13644":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:515:5188":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11408:20529":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:5388:2597":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6228:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:1744:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:41665:4649":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10837:25349":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4908:8264":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10789:7108":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:14069:5835":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10751:5229":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6243:7848":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4800:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:654:14408":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:13839:5772":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7440:30130":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10166:20559":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:9489:33378":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:7318:3655":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:11281:7936":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11911:5314":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12155:5360":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8165:8164":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11049:7804":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7616:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14222:5899":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4562:8256":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10739:7799":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:2185:13663":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6913:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:21344:13662":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:2472:3874":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46484:4712":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11743:3853":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12738:5477":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4462:3926":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40197:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13740:5753":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7534:3908":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:724:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4173:8236":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9868:5212":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:14435:5947":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13189:5566":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4698:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:929:8106":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43931:7433":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:1558:3584":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4947:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:14317:5918":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:45856:4687":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:40230:4628":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:12029:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:1764:7070":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:42452:2862":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9173:3810":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:7657:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5891:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12555:5450":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:2368:3578":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:10318:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:47619:4768":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4304:7973":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6804:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7639:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4647:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6536:8305":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:30318:4419":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"9:426:19447":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39448:4994":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:46087:4700":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1537:6162":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:10438:2845":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7651:7879":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:10071:3631":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11379:7489":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2900:13643":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:0:2475":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1882:7309":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:42002:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2580:3648":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:614:33385":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12124:5351":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7556:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12049:1649":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2644:3881":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:910:7898":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:904:3597":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:8296:7995":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13803:5767":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8849:20523":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7568:3910":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:400:7734":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:4557:3929":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9208:3811":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42951:7407":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5408:2598":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6600:20463":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4160:8235":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3274:7966":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1475:7305":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12042:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8196:7393":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6226:7844":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:4949:3941":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2960:13653":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"15:306:19552":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:9641:2860":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10575:3676":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1275:7895":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10479:1874":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:21468:8346":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:44399:7469":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:6091:7324":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47867:4772":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4676:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12039:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41587:30116":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8547:7112":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5435:5987":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7782:7283":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8399:4844":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:574:5185":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1734:6283":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10904:7800":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:7635:8165":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8868:4852":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5363:3948":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7844:7472":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8955:4856":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9138:3809":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22460:8207":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1875:7664":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:860:2788":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:641:7955":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:22775:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40079:4624":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:13009:3642":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:5572:3584":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:8974:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43940:7434":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5910:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11262:7218":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10024:7750":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:8714:20519":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6741:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9017:8009":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:12998:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:40487:7385":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11087:7810":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42316:7929":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6666:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11574:7225":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:521:24497":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:1935:7072":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9781:7752":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:40314:7342":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10280:8165":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13915:5794":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1820:3007":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40063:30124":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7891:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1041:7276":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:4912:861":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7702:7065":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22321:30125":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1904:8132":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6691:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9391:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:45686:4680":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:9633:2854":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"11:344:33346":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:7015:4102":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7572:3670":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:7681:3676":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14356:5926":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7828:4187":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5612:3899":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2872:4114":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:21025:30817":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12751:5479":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4914:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40924:7077":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7518:7654":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2346:2091":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:7655:7984":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2696:3883":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14336:5923":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9182:29609":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11474:3773":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:9883:8168":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:533:6105":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:10103:3637":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8541:2845":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:10673:7790":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3461:5985":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12033:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:1036:7895":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5867:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2199:1889":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11317:5278":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1413:2845":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:31:19431":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:4179:4995":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:952:7892":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10941:4362":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:8670:8278":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13677:5743":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:43501:7342":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:580:6130":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22147:5002":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:40477:7384":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:1750:13672":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11287:3680":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:5088:3945":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:8007:8193":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:8181:3914":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2864:3890":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:32254:2770":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6721:20464":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:46355:4709":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11024:5268":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8348:7110":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11231:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:6063:1875":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:868:7304":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6467:4042":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12238:5377":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:32167:7353":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8916:8309":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:21023:30821":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"10:44:6063":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8195:7295":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7090:7275":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7746:3012":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10642:7337":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:590:5193":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4814:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:39221:13475":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:10462:2846":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:12791:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:10749:7933":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:4474:2873":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8288:7998":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4693:8265":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6927:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"14:31:7644":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:9637:2863":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12622:5463":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44100:7447":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5130:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:504:3575":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:357:7950":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:1850:3578":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14146:5854":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12087:5345":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7054:7272":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40496:7386":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13149:5563":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4496:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10187:7192":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:45957:4691":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3273:13548":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1570:6185":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:12433:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:43716:7420":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4908:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:76:1887":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"17:12599:5458":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:3565:7745":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:40426:7379":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8531:5007":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2904:13645":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11449:20530":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45754:4683":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3531:3578":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3728:7970":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:671:7731":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4776:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9010:8008":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4841:6506":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:13047:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:3185:32069":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:41686:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9791:33374":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3246:13654":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7342:33369":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"15:288:19551":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11935:5315":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:2143:7312":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22200:5004":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8558:4850":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:45816:4685":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2888:8337":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:817:7898":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:8795:20521":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4932:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6128:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6742:7259":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7582:5997":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11972:5328":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2907:3892":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:41457:4633":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4955:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4603:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2428:3872":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4899:8263":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:9581:2622":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13891:5789":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:1010:7893":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:41874:2845":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6083:19570":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4835:3937":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:501:6082":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4484:8239":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13576:5703":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4977:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10629:7206":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8228:7997":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:6961:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1551:7306":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:7730:3011":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:39409:8099":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10562:7200":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4764:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:3959:8210":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13423:5589":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6837:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2766:3886":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:489:6079":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:10721:7422":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:40343:7366":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10576:7201":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6915:3904":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2964:7067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:119:14050":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13260:5577":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11394:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40356:7367":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10335:29163":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21416:8342":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10013:5222":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12306:5397":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4144:8233":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44054:7437":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:507:5185":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2348:8151":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4166:3584":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11385:7490":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9351:3816":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11662:3848":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:47759:4770":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:7692:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2848:2767":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:3032:3915":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3319:8190":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6929:5992":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5760:20459":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:45708:4681":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44247:7455":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11978:4876":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9661:33376":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:5140:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10098:7763":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14002:5816":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:22841:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:5419:3807":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41890:2788":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46741:4729":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12791:5484":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1259:7276":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14084:5839":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12971:5529":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12226:5374":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40183:4626":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12712:5474":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:491:7172":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:11322:13502":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:40287:7942":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:1568:7309":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5980:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:12205:7927":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10799:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:9281:30621":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42968:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1505:7885":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:4148:7920":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6222:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5963:7822":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10809:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:5376:13494":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:10680:7932":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3162:25239":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47990:7099":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11491:3841":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:5138:3592":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12044:5340":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13488:5640":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2183:13662":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:5739:7977":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3722:4790":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5017:3943":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5561:2601":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3663:8205":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:563:6122":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:22336:7073":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43475:7094":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39441:7941":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:48157:4775":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4651:13567":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7102:20466":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12000:8093":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:6350:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6361:4031":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"15:394:19562":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13817:5768":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9192:7116":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9702:7750":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4549:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43592:4654":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:47011:4734":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12294:5394":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2937:4124":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:482:3644":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:475:6071":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46977:4733":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:2494:4385":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8270:7475":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1710:6274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6764:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9887:7753":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:6139:3642":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43454:7341":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44226:13520":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14325:5919":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42718:4200":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:4079:13472":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11382:5283":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"0:82:1936":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"2:9635:2862":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:1525:7906":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8792:2604":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:4418:3617":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13633:5738":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8133:4160":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13102:5549":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:2172:7314":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21400:8165":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:4447:2771":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44148:7448":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:10950:2600":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:22253:4394":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:6872:2794":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:2150:20586":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:389:3547":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12485:5441":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13216:5570":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:45976:4692":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4480:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:22309:4400":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:0:2473":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4440:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9643:2861":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1496:6144":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6423:7983":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12984:5531":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:569:6125":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6415:7242":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:3600:5986":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:43947:7358":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9575:33379":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"0:84:1950":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"2:21561:8165":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10427:2604":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12209:5366":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1913:15400":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:3666:2788":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14283:5906":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2955:13652":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4735:8226":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11536:7224":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10448:7310":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1778:3597":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8222:7995":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:5632:7322":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7724:8092":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9373:5210":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6531:7252":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2596:3879":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11762:3856":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7305:4384":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14077:5838":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12577:5457":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"15:327:19556":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:6275:7328":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:7006:7861":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46947:4732":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13086:5545":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4860:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13974:5808":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6485:3896":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10819:2610":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1604:6206":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:20965:2757":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13275:5275":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14449:5954":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:6468:3578":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:357:19460":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4529:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:1651:4990":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40123:7354":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10113:7764":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1521:6154":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13452:5609":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5921:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12474:5438":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6071:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6425:4038":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:5618:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10963:5265":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:7997:7989":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6376:20462":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7554:3909":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:1681:1193":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:2907:3651":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:7388:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3240:7309":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8186:7366":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:22427:7350":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14297:5912":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6868:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6820:3607":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5661:7231":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6156:7236":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40512:4133":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:11965:7424":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:40412:7376":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:2085:7895":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9143:7477":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13668:5739":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5982:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:4034:3555":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:7:7644":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:21462:8344":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:6012:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:8154:7880":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:1072:33354":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47905:4773":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9022:8010":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:2788:3887":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14461:5956":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11688:20532":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:12200:13508":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:2051:7907":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11245:3845":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2943:13649":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3973:8211":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"0:79:1910":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"6:7371:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1591:6199":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"14:187:19539":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42998:7410":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40093:7356":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:596:6140":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1557:7307":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3089:8121":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:40932:7402":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42438:2854":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:624:33382":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:30358:4420":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44586:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6700:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40277:3618":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40138:13573":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:3173:2845":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:5727:3956":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22269:7346":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40876:7397":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12185:5364":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:3219:32070":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10772:5231":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:48016:7101":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12877:5512":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13877:5786":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4745:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8969:8002":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40666:7393":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4610:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11192:3847":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:30352:7074":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:6973:13624":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9960:7758":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:22448:4414":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44629:4671":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:40051:4621":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:35:3551":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:915:7884":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4791:3652":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:46665:4727":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4401:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5023:6600":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:21919:30671":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11450:3682":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:3725:7969":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:2303:7903":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7469:4392":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2962:33261":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12646:5464":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:44403:4663":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9329:3814":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:3046:2627":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11304:7486":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:42783:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:8954:20526":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5104:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:9103:3808":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:43202:7412":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:6155:3659":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"10:36:6062":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9934:7756":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10293:5222":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:4222:2870":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1514:6152":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1674:3555":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10548:7199":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3475:2622":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12008:5333":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42943:7405":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7862:7284":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11352:4873":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45939:4690":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7834:3752":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:2339:3863":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:12053:1253":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:44237:7451":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:2058:7276":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:23039:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8489:8288":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5052:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6687:7258":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7591:3672":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4516:6388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22382:30126":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7506:13621":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:6637:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40883:7398":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40536:7390":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6189:7239":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:5625:3660":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:261:3555":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43956:7354":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7409:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:923:7886":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1691:6267":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10431:7778":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6386:4035":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:6666:3555":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4556:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9565:7748":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:1682:6261":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3180:7307":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11216:7212":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4388:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4021:8214":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8838:2607":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:1963:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2881:3891":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9897:20541":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"13:110:33355":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:5997:13970":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:4806:3936":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10140:20558":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:4427:2872":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6813:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:588:8085":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10495:7194":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4628:6922":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4428:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3156:29888":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41963:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:14091:5840":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7284:4652":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9986:7760":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2942:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6583:7254":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:5322:3947":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:4497:3927":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:4988:3584":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43375:7944":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2845:2626":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:719:5205":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:880:3563":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22344:4401":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7226:3218":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:96:24485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2618:3880":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11711:5275":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6346:7859":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:622:7663":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6889:3667":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:660:7727":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3596:2846":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9522:7747":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5075:7975":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:1563:7308":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2656:7961":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7927:4790":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1539:2788":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7326:2788":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:46263:4705":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1797:3001":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"14:160:7644":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4461:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6976:7672":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:1773:4991":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13907:5792":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5044:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:41924:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:557:7952":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:4004:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9753:7751":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2832:3889":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:39182:2849":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43770:7423":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11273:7219":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4031:8215":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:4196:3584":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1635:3549":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:881:7305":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1428:2846":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11337:4872":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:32153:7940":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:46187:4703":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1546:6168":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9446:7746":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10937:3012":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:7502:13622":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5146:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12281:5393":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:10005:3628":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4535:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14523:5969":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1541:7899":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:8979:20527":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4578:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5439:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11887:5300":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10198:7765":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8002:7990":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5004:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43514:7947":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11720:20533":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43634:3814":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41417:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:1073:7652":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:7297:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8304:4832":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11310:2615":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2862:8338":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44383:7465":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1140:32083":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:841:7889":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12847:5493":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12011:25355":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:41754:2846":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:7532:7674":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:2245:7317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:824:3561":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46507:4713":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12099:5348":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5117:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:8671:7926":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2504:3875":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46406:4710":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10384:7774":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7067:4103":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40526:7389":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8595:20507":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1718:6278":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:43198:7411":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41440:4631":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46117:4701":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:8167:7883":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:22361:30140":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13852:5778":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22907:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11296:7220":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:4862:3938":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47970:7097":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1761:2992":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:44642:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12889:5514":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4455:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1966:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:1664:6254":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:680:2846":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13724:5750":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7275:32062":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:22398:30121":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1562:7900":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:919:7885":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:555:6117":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11075:7809":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3960:3584":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:8134:7294":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:0:2471":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5816:3966":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43606:4657":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:3035:2850":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42459:2863":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11981:7427":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12063:5341":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2682:7917":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:9243:3812":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:30374:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:1127:7897":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6041:20461":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7456:4389":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"11:1869:7307":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:2074:7893":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:7243:7321":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:542:6111":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:43698:7419":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2884:4118":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1596:6201":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:533:3645":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:4833:31563":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3929:8208":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:23519:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:11248:7935":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12374:5401":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3923:8209":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:39635:28546":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:80:1918":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"1:9030:4857":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3987:8213":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:2317:2845":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:9105:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:14537:5972":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:8115:7291":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:11942:7421":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8862:2788":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:646:8088":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:7622:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6987:3612":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6499:3913":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9922:7755":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11873:5299":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41503:7079":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40131:7358":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13163:5564":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:2487:6060":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2512:2024":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4122:26847":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13299:5587":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12686:5471":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:22940:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"13:226:6055":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4613:3931":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1650:6243":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9065:4860":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11282:5274":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7462:5995":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:12050:1646":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12045:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13547:5692":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45887:4688":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:3484:29250":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2594:3632":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:7265:3567":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5634:7227":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"14:221:6008":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6107:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10917:7801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4957:8270":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:7318:4142":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:7636:4782":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:11746:7661":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:4:1117":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:48065:7104":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44395:7468":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:495:6081":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:12032:1154":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6279:4026":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4618:8213":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:22434:4413":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7492:7277":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12699:5472":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"8:0:2466":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:3797:3919":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11590:7123":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4584:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5859:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1759:2991":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10073:3001":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:7874:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:3065:3706":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4616:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:32106:2608":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:6269:7329":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:6962:3609":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:2463:4983":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"9:237:7089":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6059:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:8039:30624":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12047:1647":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:43426:7338":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:1051:19526":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21211:13662":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:9100:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:43752:7422":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:22742:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:8072:6002":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40150:7360":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14164:5857":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11001:5267":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:9651:5222":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13041:5538":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12514:5446":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5955:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:1120:33114":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6352:7241":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:363:7951":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13759:5754":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"17:10367:7772":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:14347:5924":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:9090:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11099:7811":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7598:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21594:4999":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:7651:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4043:8218":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9712:33377":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:3655:3711":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9763:33381":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7919:7668":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:1013:3555":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4632:6926":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40914:3626":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40103:4625":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12075:5344":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:6968:20465":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10532:7964":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13779:5762":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7436:3997":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4854:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1674:6260":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10085:7762":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14421:5945":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:4363:3616":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43624:7414":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7597:33367":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:2194:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"14:165:19532":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:9464:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10469:5228":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:5798:3961":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8326:6911":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11789:5285":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12497:5443":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11167:25357":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:12878:7937":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:6514:3555":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7235:2788":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44422:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4506:6385":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:486:19444":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:2510:8165":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:1862:7306":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40464:7383":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5673:3898":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:8826:20522":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:6280:3624":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:9824:20539":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11163:5270":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5866:3974":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:62:13996":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13898:5791":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:3737:7907":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:5403:3806":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:5861:3578":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6798:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:46331:4708":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6844:4093":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11352:5279":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10535:7198":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5049:3944":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:21566:8343":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:5372:13493":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:5690:7323":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:7343:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}