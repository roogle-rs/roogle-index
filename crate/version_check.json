{"root":"0:0:2619","crate_version":"0.9.4","includes_private":false,"index":{"2:13371:25903":{"id":"2:13371:25903","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:3360":{"id":"2:13310:3360","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:26360":{"id":"2:13390:26360","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:2407":{"id":"0:76:2407","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:4660":{"id":"2:13295:4660","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43951:4071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13297:31648":{"id":"2:13297:31648","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:31663"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44248:7896","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3:1930":{"id":"0:3:1930","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:2394"],"is_stripped":true}}},"b:2:2986-0:93:2394":{"id":"b:2:2986-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2492"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2718:25825":{"id":"2:2718:25825","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:140:2396":{"id":"b:2:2713-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:3089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13321:29580":{"id":"2:13321:29580","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:7799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2797":{"id":"0:50:2797","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2430":{"id":"0:79:2430","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:127:2395":{"id":"b:2:2716-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:25825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13299:33947":{"id":"2:13299:33947","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44229:7894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:740:3380":{"id":"5:740:3380","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:3001-0:93:2394":{"id":"b:2:3001-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:84:2470":{"id":"0:84:2470","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:2456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1930":{"id":"0:60-0:3:1930","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1930","glob":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:9:2399":{"id":"0:9:2399","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3000:1809":{"id":"2:3000:1809","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:127:2395":{"id":"b:2:2986-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2492"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2989:2492":{"id":"2:2989:2492","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2963:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:12:2772":{"id":"0:12:2772","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2715:3089":{"id":"2:2715:3089","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"2:2805:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:1295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93:2394":{"id":"0:93:2394","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:42167:8658-0:93:2394","a:2:32364:3157-0:93:2394","a:2:42168:8855-0:93:2394","a:2:3244:3304-0:93:2394","a:2:32305:237-0:93:2394","a:2:3209:247-0:93:2394","b:2:2996-0:93:2394","b:2:2990-0:93:2394","b:2:2986-0:93:2394","b:2:2716-0:93:2394","b:2:3001-0:93:2394","b:2:3828-0:93:2394","b:2:2713-0:93:2394","b:5:5866-0:93:2394","b:5:738-0:93:2394","0:106","0:102","0:97","0:99","0:22","0:96","0:104","0:101","0:20"]}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:29551","`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:29549":{"id":"2:13282:29549","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:33949":{"id":"2:13330:33949","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:14091","str::split":"2:13318:2359","prim@char":"1:12341:471","str::split_terminator":"2:13327:33948"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44033:7883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:26356":{"id":"2:13388:26356","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3244:3304-0:127:2395":{"id":"a:2:3244:3304-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13389:30755":{"id":"2:13389:30755","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39974:14168","Self::is_ascii":"2:13388:26356"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39974:14168","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:3157-0:127:2395":{"id":"a:2:32364:3157-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3828-0:127:2395":{"id":"b:2:3828-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:482":{"id":"0:156:482","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31067:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:29582":{"id":"2:13324:29582","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split":"2:13318:2359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43983:7800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42167:8658-0:93:2394":{"id":"a:2:42167:8658-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:8658","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32305:237-0:140:2396":{"id":"a:2:32305:237-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2799:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13327:33948":{"id":"2:13327:33948","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:14091","str::split":"2:13318:2359","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:33949"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44015:7882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:802":{"id":"0:144:802","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:26306":{"id":"2:13274:26306","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:2385"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2438":{"id":"0:80:2438","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:33953":{"id":"2:13359:33953","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:2350":{"id":"0:62-0:39:2350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:2350","glob":true}}},"2:13301:2889":{"id":"2:13301:2889","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5632:34657":{"id":"5:5632:34657","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2716-0:140:2396":{"id":"b:2:2716-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:25825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:802":{"id":"0:21:802","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:997","2:13267:3323","2:13268:33941","2:13269:33942","2:13271:33943","2:13274:26306","2:13275:33944","2:13276:336","2:13277:29551","2:13278:29547","2:13280:29548","2:13282:29549","2:13284:29550","2:13286:33945","2:13287:33946","2:13288:29573","2:13289:29574","2:13290:29577","2:13291:29578","2:13293:7898","2:13294:7908","2:13295:4660","2:13296:31663","2:13297:31648","2:13298:2355","2:13299:33947","2:13300:32060","2:13301:2889","2:13304:2486","2:13307:2363","2:13310:3360","2:13314:3322","2:13318:2359","2:13321:29580","2:13324:29582","2:13327:33948","2:13330:33949","2:13333:2372","2:13336:29585","2:13339:29587","2:13342:29588","2:13345:3103","2:13348:33950","2:13351:33951","2:13354:33952","2:13357:2358","2:13359:33953","2:13361:33954","2:13363:2367","2:13364:2365","2:13365:33955","2:13368:33956","2:13371:25903","2:13374:29589","2:13377:33957","2:13380:2368","2:13383:2366","2:13386:2399","2:13388:26356","2:13389:30755","2:13390:26360","2:13391:26361","2:13392:26362","2:13393:30758","2:13394:30759","2:13395:30760","2:13396:33958","2:13398:8650","2:13399:33959"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2999:137":{"id":"2:2999:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2992:832":{"id":"2:2992:832","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:127:2395":{"id":"b:2:2996-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32305:237-0:93:2394":{"id":"a:2:32305:237-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:742:3382":{"id":"5:742:3382","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2409":{"id":"0:42:2409","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2415":{"id":"0:77:2415","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2784":{"id":"0:13:2784","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:127:2395":{"id":"a:2:3209:247-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2713-0:127:2395":{"id":"b:2:2713-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:3089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2422":{"id":"0:78:2422","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:93:2394":{"id":"a:2:3209:247-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13280:29548":{"id":"2:13280:29548","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:741:3381":{"id":"5:741:3381","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:2409":{"id":"0:6:2409","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:802":{"id":"0:38:802","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:699":{"id":"0:134:699","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:140:2396":{"id":"a:2:3209:247-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3001-0:140:2396":{"id":"b:2:3001-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13284:29550":{"id":"2:13284:29550","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:7898":{"id":"2:13293:7898","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43935:7876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:29574":{"id":"2:13289:29574","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13288:29573","str::split_at_mut_checked":"2:13291:29578"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:93:2394":{"id":"b:2:2716-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:25825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2996-0:140:2396":{"id":"b:2:2996-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:18:2812":{"id":"0:18:2812","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13271:33943":{"id":"2:13271:33943","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13269:33942"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2409","0:30:2399","0:32:2457","0:33:2906","0:34:2910","0:35:2914","0:36:2917"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42167:8658-0:140:2396":{"id":"a:2:42167:8658-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:8658","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42168:8855-0:127:2395":{"id":"a:2:42168:8855-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:8855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:57:802":{"id":"0:57:802","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3830:1822":{"id":"2:3830:1822","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39788:5326","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2619":{"id":"0:0:2619","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:2394","`is_max_version`":"0:80:2438","`is_exact_version`":"0:81:2446","`is_max_date`":"0:77:2415","`is_exact_date`":"0:78:2422","`triple()`":"0:75:2393","`Date`":"0:140:2396","`Channel`":"0:127:2395"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:2393","0:76:2407","0:77:2415","0:78:2422","0:79:2430","0:80:2438","0:81:2446","0:82:2456","0:84:2470","0:60-0:3:1930","0:61-0:24:2349","0:62-0:39:2350"],"is_stripped":false}}},"a:2:32364:3157-0:93:2394":{"id":"a:2:32364:3157-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5866-0:127:2395":{"id":"b:5:5866-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13288:29573":{"id":"2:13288:29573","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13290:29577","str::split_at_mut":"2:13289:29574"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:32060":{"id":"2:13300:32060","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44257:7897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:29587":{"id":"2:13339:29587","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:29588":{"id":"2:13342:29588","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:34655":{"id":"5:5621:34655","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:8763":{"id":"5:5634:8763","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:30759":{"id":"2:13394:30759","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37981"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:34654","5:5618:14225","5:5621:34655","5:5624:34656","5:5632:34657","5:5633:34658","5:5634:8763","5:5635:26358","5:5636:26359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13269:33942":{"id":"2:13269:33942","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:29551":{"id":"2:13277:29551","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:33945":{"id":"2:13286:33945","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1722","str::slice_mut_unchecked":"2:13287:33946","crate::ops::Index":"2:39619:8687"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:33951":{"id":"2:13351:33951","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13354:33952"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44115:7888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:482":{"id":"0:107:482","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31067:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:3157-0:140:2396":{"id":"a:2:32364:3157-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:3157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:147:699":{"id":"0:147:699","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:3322":{"id":"2:13314:3322","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:2367":{"id":"2:13363:2367","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:33955":{"id":"2:13365:33955","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:14088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:33956":{"id":"2:13368:33956","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:2366":{"id":"2:13383:2366","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:2399":{"id":"2:13386:2399","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:8715"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:8715","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:8715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:33944":{"id":"2:13275:33944","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:26361":{"id":"2:13391:26361","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2906":{"id":"0:33:2906","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:31663":{"id":"2:13296:31663","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:31648"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44239:7895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:127:2395":{"id":"b:2:2990-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13395:30760":{"id":"2:13395:30760","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37981"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:8658-0:127:2395":{"id":"a:2:42167:8658-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:8658","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5624:34656":{"id":"5:5624:34656","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2910":{"id":"0:34:2910","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:29577":{"id":"2:13290:29577","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:29578"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:26358":{"id":"5:5635:26358","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:26361"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2457":{"id":"0:32:2457","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:93:2394":{"id":"b:2:3828-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:699":{"id":"0:98:699","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:2365":{"id":"2:13364:2365","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2797":{"id":"0:14:2797","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:93:2394":{"id":"b:2:2996-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:2917":{"id":"0:36:2917","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:2363":{"id":"2:13307:2363","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1295":{"id":"0:105:1295","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31067:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:34654":{"id":"5:5617:34654","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3161","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:3161","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2943":{"id":"0:48:2943","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:14225":{"id":"5:5618:14225","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:26359":{"id":"5:5636:26359","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:26362"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:33958":{"id":"2:13396:33958","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5021:33958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44264:7823","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:2355":{"id":"2:13298:2355","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44219:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:2349":{"id":"0:24:2349","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:127:2395"],"is_stripped":true}}},"b:2:3828-0:140:2396":{"id":"b:2:3828-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:2456":{"id":"0:82:2456","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:2470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3005:1807":{"id":"2:3005:1807","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:29578":{"id":"2:13291:29578","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:29577"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2914":{"id":"0:35:2914","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:127:2395":{"id":"a:2:32305:237-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13361:33954":{"id":"2:13361:33954","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:33957":{"id":"2:13377:33957","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3004:137":{"id":"2:3004:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32229:3138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:5866-0:93:2394":{"id":"b:5:5866-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:2395":{"id":"0:127:2395","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:42167:8658-0:127:2395","a:2:32364:3157-0:127:2395","a:2:42168:8855-0:127:2395","a:2:3244:3304-0:127:2395","a:2:32305:237-0:127:2395","a:2:3209:247-0:127:2395","b:2:2996-0:127:2395","b:2:2990-0:127:2395","b:2:2986-0:127:2395","b:2:2716-0:127:2395","b:2:3001-0:127:2395","b:2:3828-0:127:2395","b:2:2713-0:127:2395","b:5:5866-0:127:2395","b:5:738-0:127:2395","0:135","0:137","0:132","0:37","0:133","0:130","0:138"]}}},"2:13399:33959":{"id":"2:13399:33959","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5019:33959"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44282:7822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2805":{"id":"0:16:2805","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:3103":{"id":"2:13345:3103","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatches":"2:13348:33950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44169:7891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:475":{"id":"0:103:475","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2399":{"id":"0:30:2399","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:8855-0:93:2394":{"id":"a:2:42168:8855-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:8855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:140:2396":{"id":"0:140:2396","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:42167:8658-0:140:2396","a:2:32364:3157-0:140:2396","a:2:42168:8855-0:140:2396","a:2:3244:3304-0:140:2396","a:2:32305:237-0:140:2396","a:2:3209:247-0:140:2396","b:2:2996-0:140:2396","b:2:2990-0:140:2396","b:2:2986-0:140:2396","b:2:2716-0:140:2396","b:2:3001-0:140:2396","b:2:3828-0:140:2396","b:2:2713-0:140:2396","b:5:5866-0:140:2396","b:5:738-0:140:2396","0:155","0:146","0:143","0:145","0:153","0:148","0:56","0:151","0:150"]}}},"b:2:2990-0:140:2396":{"id":"b:2:2990-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2799:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:482"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:802":{"id":"0:23:802","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:140:2396":{"id":"b:5:5866-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:738-0:127:2395":{"id":"b:5:738-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:3380","5:741:3381","5:742:3382"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61-0:24:2349":{"id":"0:61-0:24:2349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:2349","glob":true}}},"2:13267:3323":{"id":"2:13267:3323","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:34658":{"id":"5:5633:34658","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:3161","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3161","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:29547":{"id":"2:13278:29547","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:475":{"id":"0:139:475","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13357:2358":{"id":"2:13357:2358","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1295":{"id":"0:154:1295","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31067:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:33941":{"id":"2:13268:33941","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:29589":{"id":"2:13374:29589","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:33950":{"id":"2:13348:33950","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::matches":"2:13345:3103"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44187:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:2409","0:9:2399","0:12:2772","0:13:2784","0:14:2797","0:16:2805","0:18:2812"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2812":{"id":"0:54:2812","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:8855-0:140:2396":{"id":"a:2:42168:8855-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:8855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3001-0:127:2395":{"id":"b:2:3001-0:127:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13318:2359":{"id":"2:13318:2359","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split_whitespace":"2:13296:31663","str::rsplit":"2:13324:29582"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43965:7795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:2372":{"id":"2:13333:2372","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091","str::rsplitn":"2:13336:29585"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44069:7885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:802":{"id":"0:131:802","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"2:2805:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:475":{"id":"0:152:475","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:7908":{"id":"2:13294:7908","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43941:7877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:3304-0:93:2394":{"id":"a:2:3244:3304-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13287:33946":{"id":"2:13287:33946","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1722","crate::ops::IndexMut":"2:3487:8688","str::slice_unchecked":"2:13286:33945"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:33952":{"id":"2:13354:33952","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:14091","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::match_indices":"2:13351:33951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44133:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:93:2394":{"id":"b:2:2990-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3244:3304-0:140:2396":{"id":"a:2:3244:3304-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2986-0:140:2396":{"id":"b:2:2986-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2492"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13392:26362":{"id":"2:13392:26362","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2399":{"id":"0:45:2399","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5868:1782":{"id":"5:5868:1782","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2446":{"id":"0:81:2446","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:2486":{"id":"2:13304:2486","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2350":{"id":"0:39:2350","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:140:2396"],"is_stripped":true}}},"2:13398:8650":{"id":"2:13398:8650","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5022:8650"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44273:7819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:30758":{"id":"2:13393:30758","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37981"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:997":{"id":"2:13266:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:93:2394":{"id":"b:2:2713-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:3156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:3089"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:2409","0:45:2399","0:48:2943","0:50:2797","0:52:2805","0:54:2812"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:738-0:140:2396":{"id":"b:5:738-0:140:2396","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:3380","5:741:3381","5:742:3382"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:2409":{"id":"0:27:2409","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2805":{"id":"0:52:2805","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:29585":{"id":"2:13336:29585","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13333:2372","self::pattern":"2:12955:14091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44087:7886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:14089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:2368":{"id":"2:13380:2368","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:14091"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:93:2394":{"id":"b:5:738-0:93:2394","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:3380","5:741:3381","5:742:3382"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:2393":{"id":"0:75:2393","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:2394","`Version::read()`":"0:6:2409","`Channel`":"0:127:2395","crate":"0:0:2619","`Channel::read()`":"0:27:2409","`Date::read()`":"0:42:2409","`Date`":"0:140:2396"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:127:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:140:2396","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11812:8295":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:481:7617":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11648:3145":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7540:4652":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:598:35062":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:1590:8421":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10184:3395":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:4821:8249":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:2132:14266":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"14:214:7742":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:39711:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:3597:8248":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2316:2555":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:44699:7929":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:643:5493":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:1883:3385":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10573:35054":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:96:25783":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:3014:20677":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:1098:8239":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:16093:6350":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:10710:8254":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:2902:20675":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8249:8535":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:1917:7755":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13877:5768":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13538:5688":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44899:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7755:4162":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5632:3129":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1570:8397":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44679:7924":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:23247:4696":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:23090:8789":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"0:77:2415":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"2:33666:14236":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:1723:6647":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8554:8542":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:14575:5584":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44691:7927":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:674:8652":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12572:5530":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12056:5572":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2838:4150":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2028:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:16069:6345":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:1007:7722":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42806:3406":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22909:7811":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14111:5798":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:8351:7488":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22563:9007":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1680:6631":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2548:6423":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"13:229:6420":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8058:8655":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:45964:4971":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15168:6095":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6519:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4975:8516":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:32282:8475":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7446:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:13679:32912":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6763:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:13146:5602":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5927:4227":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5483:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:12961:8456":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3263:33838":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:12363:1846":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:41286:7861":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:15313:6128":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12516:8319":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:6379:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"0:82:2456":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"17:15701:6251":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10018:21587":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6927:4362":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"15:288:20628":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:553:6487":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9737:21585":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:666:8491":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1077:33370":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43324:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13187:5611":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5367:21534":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9938:21605":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7412:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12768:21588":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15944:5625":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:617:8649":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:6972:7789":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:9278:8548":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:10721:8505":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:40707:3139":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:3820:8423":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5212:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5075:4205":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:4743:4194":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11035:8732":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4650:3413":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11865:8301":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9726:26239":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:12724:21609":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10044:21607":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13526:5685":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:12470:14323":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:2140:8405":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:43850:8482":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5361:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10647:26229":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:6968:14122":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:10769:35057":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:545:6482":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6802:7705":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15992:6331":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:14372:5855":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:2383:3385":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:6031:8524":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4959:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10877:8256":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8535:4071":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:6566:8410":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:491:6446":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15023:6062":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5307:4207":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11227:8267":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:9370:5162":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:12970:7628":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:951:8398":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:1092:8406":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15418:6158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4133:8792":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:485:6445":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13497:5676":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8548:7893":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8774:7515":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11324:8269":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11256:7636":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:38381:14244":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:44414:7910":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:34464:4388":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:12308:25977":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2970:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43539:7519":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12671:8325":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:1066:20602":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:5324:8452":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:980:8404":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:15635:6234":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:2477:8722":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10720:35055":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11089:8262":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15646:6235":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13272:5639":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:5306:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:9531:8456":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10534:35052":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:13884:7808":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8797:5338":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5250:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:32396:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:5831:4216":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12175:8306":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13412:5661":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:957:8670":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"0:0:2619":{"crate_id":0,"path":["version_check"],"kind":"module"},"1:1853:3532":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:7452:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:5959:8522":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4319:8816":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42013:7939":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:42189:14315":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7575:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10661:8253":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"14:31:8135":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:39788:5326":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6934:14120":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:4881:3310":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:33945:14238":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9329:8556":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40505:14161":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11688:7646":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:44733:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:23721:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12433:5584":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:43924:4939":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4877:8843":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"1:5283:8517":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:1825:3521":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:15214:6105":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12264:8316":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8498:8731":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3049:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5630:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44115:7888":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:30433:8775":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4400:8513":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15569:6211":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5092:8841":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:586:6504":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12150:5577":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:14079:5794":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:6400:8525":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:23236:4695":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:11574:7757":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:5729:14120":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6414:9010":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12089:5574":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:491:7618":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:9984:21606":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14212:5835":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13899:5769":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6976:6398":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12887:7671":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6066:7680":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42198:3389":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10622:35058":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13437:5663":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14402:5861":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2458:4133":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46017:4978":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5838:5345":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:6775:33370":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:396:35015":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:44961:33014":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:32306:3156":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:6672:7861":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12361:1834":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:1676:35017":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:687:3386":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:856:8401":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8259:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22616:9008":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:21653:3296":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11647:7643":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15116:6080":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"14:160:8135":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45947:4970":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:44219:7893":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22191:8732":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:2309:8498":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4481:8514":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6880:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2438:4132":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:754:7635":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13922:5774":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13731:8470":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:32296:7818":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:15596:6223":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8611:8820":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:1625:7754":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15039:6065":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6962:4164":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11915:21707":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:39691:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46532:5028":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7497:6401":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8726:5146":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9551:3548":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:517:6466":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:597:4059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:43101:3394":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11631:27260":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40386:7819":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12278:8317":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:7425:4650":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:2636:4141":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12508:5592":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10964:7560":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"11:673:3385":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43790:7803":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4205:8797":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11513:26233":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:2528:4136":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46323:5003":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46931:5070":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12292:5179":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:15266:6118":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13832:5758":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9469:7942":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:1184:33841":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7799:4160":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11764:7653":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9425:8174":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:13594:8469":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:6154:7780":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:4252:7941":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7467:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:878:3386":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3435:14046":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:47050:5073":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:4917:8806":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5528:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:33532:8911":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3432:8508":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4979:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4502:4187":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4097:8791":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12348:1812":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3270:4383":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6657:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13235:5626":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12353:7662":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:2443:8410":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:10218:4066":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5677:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7602:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2219:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4066:3327":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6335:8368":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:883:8671":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14147:5804":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:573:5493":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:2231:7757":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:5470:14076":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:4437:8447":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:7415:8441":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14025:5786":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:1997:8699":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7595:14302":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12043:8303":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11316:7562":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:4117:33370":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:330:6430":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7823:21547":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7461:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3251:3306":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4811:7347":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:651:5493":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:5702:3130":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:14325:5848":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40433:31614":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:3778:4178":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3244:3304":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"9:502:4631":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:16249:6385":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:9155:3137":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:1914:3548":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"18:689:7625":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:888:3327":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:10648:5331":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:4481:7941":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6746:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:9171:8547":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5700:4157":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1653:6618":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:6790:8168":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8241:7938":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:367:8486":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5266:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5112:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12127:5576":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4771:4195":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44015:7882":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"14:202:14104":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:23192:4691":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"18:635:5512":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40774:7833":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6597:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:32394:3307":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:7144:8914":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12824:21610":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1699:6638":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3586:2546":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:5466:14075":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6460:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:3684:31788":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3340:4384":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:12360:1852":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41979:31636":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15678:6250":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:8259:4426":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:41310:7864":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15778:6273":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46192:4996":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:4062:4183":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8654:7336":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:10403:3404":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:3209:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4800:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15822:6280":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6895:4357":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44707:7931":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:12502:2385":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46046:4980":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:6777:7782":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15760:6267":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8470:4425":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8304:3160":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:10643:8735":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:45915:4966":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3553:7941":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8236:7937":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:5686:4154":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5400:4063":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3446:3158":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:4449:8448":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7330:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9406:7941":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:8294:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:564:6492":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:5252:8517":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8253:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:8328:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:3699:14055":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13738:5741":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4992:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4155:8794":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:832:8409":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11787:8510":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40865:7845":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12707:8328":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5014:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7052:8373":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:531:7619":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12485:21733":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:47324:7539":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:4571:8449":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:0:2989":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2151:8406":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:22487:9003":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:2729:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:8300:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:43711:8479":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46338:5004":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:8759:14215":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:38960:14245":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:8247:14217":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8257:8162":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:2304:7722":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:12408:5583":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:44695:7928":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46113:4984":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10612:8252":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3291:26806":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:1628:6599":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7428:21545":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12313:8657":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11090:26220":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:1671:6625":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46482:5026":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:14189:5826":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"14:0:2995":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7098:7718":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:3050:33358":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43080:32055":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:13509:5677":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:22708:8997":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:13064:4115":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:47079:5074":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:2210:8636":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47108:5075":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43354:7873":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:41295:7862":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11764:26210":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8650:8546":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:8155:7740":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11269:21637":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:2607:14255":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"5:7551:8669":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43892:8484":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:670:8234":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12362:1840":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:7360:8175":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40826:7841":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:15463:6168":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:5952:8519":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:15273:6119":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:39575:14057":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:4103:8790":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6442:4295":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8812:8865":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6300:8356":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:4282:7941":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:47286:7537":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13568:5700":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12076:8305":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14341:5850":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43346:7872":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11051:8260":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5817:4213":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:8271:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:872:8236":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:3040:33840":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4793:7773":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:46099:4983":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"11:2562:6425":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44229:7894":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1663:6624":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44715:4945":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47248:7530":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12530:8321":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5477:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12189:8310":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22981:4670":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40743:7829":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:479:6443":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:2878:4152":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:38216:14241":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5489:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:1083:8405":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2707:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12478:5588":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1485:6508":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:0:2994":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11108:26224":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:1891:8410":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10393:3397":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:6542:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:44711:7932":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:11524:8279":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10818:8255":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4998:8805":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:42799:3405":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7478:28843":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10764:5543":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"18:613:35061":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12251:8315":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:5582:3126":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3671:3150":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:8852:5340":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:7546:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11013:3130":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:3204:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:2234:8245":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:23032:31605":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:7429:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13946:5775":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15608:6226":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:3810:4179":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:44347:14102":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:16121:6357":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10353:8560":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:15078:6074":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5244:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13485:5675":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:41272:7859":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:3487:8688":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15957:6301":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:46384:5006":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44033:7883":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7686:8391":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:11515:8463":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12584:8255":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:2612:4140":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46511:5027":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8868:7557":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6849:4354":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5557:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8625:8542":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:22575:31898":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:11473:7885":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46594:5030":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11153:8255":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11251:5163":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:4087:8410":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:2127:8424":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5390:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12969:4107":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7085:7715":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46128:4985":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47021:5072":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:2708:4144":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5423:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6524:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5006:4203":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"9:392:20522":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10927:7936":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:7132:33406":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:299:7746":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:41867:8773":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6466:4299":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2933:8732":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:7359:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:22703:8999":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:9142:3136":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"9:447:20521":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3260:8912":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13814:5757":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10828:35051":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2479:8723":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:947:8397":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:680:7622":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4876:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40578:7826":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6768:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:4985:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:8175:8392":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21908:8732":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46777:5037":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4870:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8565:8772":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:1692:6635":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9163:3385":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:5934:8410":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:21918:8917":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:2569:4652":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:43771:7802":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4348:8819":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:13706:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:11668:5176":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:15010:6057":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11916:27401":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:12732:7890":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:623:35063":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11642:7951":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:44257:7897":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11075:5523":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10905:8257":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:6268:7781":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6441:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5200:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5769:7677":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12289:5579":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:32305:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:44489:7912":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22549:8732":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4824:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:46623:5031":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:11394:7800":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:47271:7536":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:21663:32927":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15426:6160":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"14:165:20609":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46422:5008":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:32275:4426":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:3614:6392":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:11501:8462":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44885:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:40756:7830":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:46209:4997":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:8006:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8709:8851":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:44561:7918":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40544:7825":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41895:7502":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41086:7857":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43299:7868":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:11359:8460":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:32271:8474":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12808:4100":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14545:5885":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6793:8880":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46224:4998":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:13029:14096":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:44239:7895":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1107:8407":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:3294:29233":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:42035:4928":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1526:6526":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:8282:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14876:6015":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10938:5164":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:21709:32919":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5466:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12543:8322":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:12000:8464":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:11190:3385":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10350:4070":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:40490:7819":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6471:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2463:8718":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8073:4488":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7321:4934":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7610:4658":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43983:7800":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6612:33370":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2418:4131":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:42126:4934":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:9916:21604":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:9398:8165":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:44907:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6574:4173":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42168:8855":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:44551:7914":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6494:7688":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10887:35056":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12399:7665":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8177:4005":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40844:7843":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12494:5589":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1585:6565":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13046:4112":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"10:44:6428":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12201:8311":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:10039:31817":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9886:21603":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2374:4129":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14356:5854":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:42271:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13455:5671":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10604:3134":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:816:8776":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:532:6475":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:42490:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8631:5134":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:865:3385":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10898:8568":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:2699:8499":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5102:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:5286:32962":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12318:4106":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3046:33359":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12695:8327":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"0:84:2470":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"11:0:2993":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:40927:7851":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:2037:8241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:14260:5840":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12238:8314":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13766:5747":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:2203:8242":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15624:6230":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:16187:6374":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:25:696":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:12656:7879":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:79:20514":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:40611:4908":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44264:7823":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4802:4196":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43872:8483":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5064:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5134:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3604:3141":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2394:4130":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5037:4204":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11609:8573":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:47167:7523":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:7485:3327":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5230:7769":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12443:5587":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:15456:6166":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11102:8263":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:14994:4117":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42053:4931":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40659:8702":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:2710:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:22841:5337":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:21739:8732":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3290:14054":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:3659:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5039:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13774:5749":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5400:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:3842:4180":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43762:7801":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:521:8636":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:2469:8422":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:9214:8884":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:43811:7520":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:4850:14145":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11028:25914":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8479:7553":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11904:7569":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:1952:7941":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:2713:26236":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40461:7821":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12107:5530":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:47363:5078":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6678:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:41279:7860":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6447:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:39651:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13999:5783":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4468:4186":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3736:14058":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:698:7626":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:1923:7756":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8194:7552":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:34118:14239":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:10994:26245":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6634:4161":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:710:8396":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5052:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:10391:3398":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2960:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:1603:3385":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:16176:6373":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:8317:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15197:6102":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11841:8299":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6689:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:3644:14246":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22675:8998":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:10985:26247":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13399:5659":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:434:35019":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13797:5754":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5283:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14271:5841":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5352:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14284:5843":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6176:7941":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:8247:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11102:26223":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:44940:4951":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8187:7936":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11487:7886":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3897:8510":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10421:3143":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"9:53:20539":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7925:26214":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6480:4155":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4587:4190":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:41320:7500":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15814:6277":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5385:4062":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:22349:8732":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:14246:5838":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:32:20507":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6433:9011":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:497:6449":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14529:5883":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:2805:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:513:8238":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:5366:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44282:7822":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"0:79:2430":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"18:735:25792":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16165:6368":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7435:33828":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5617:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43951:4071":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43336:7515":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:15748:6265":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5515:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:3090:8446":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:13617:7841":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:13861:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6491:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1580:6563":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3026:8502":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:41835:4912":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:40888:7847":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13986:5782":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:42295:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1565:6551":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15390:6151":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:14038:5788":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7723:25991":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13844:5760":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40794:7835":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4766:8839":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5624:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:4461:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21741:8920":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:3826:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:12074:14084":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:811:8422":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:47176:7524":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:16259:5656":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"0:78:2422":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"2:45021:7933":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:7566:4653":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5260:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:2554:35009":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14855:6007":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10185:4064":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:11321:8459":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44982:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:437:4012":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13211:5625":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5671:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6782:21542":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:15333:6135":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:11239:7795":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5565:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:42334:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"15:327:20633":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:23269:4698":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:8118:7734":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6712:5347":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:46727:5035":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:23148:4687":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:11848:8512":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1355:8405":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40622:14302":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10825:32814":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:15289:6121":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:4986:8250":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6621:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:31067:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22788:5335":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22351:8918":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:22196:8922":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:542:5299":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15720:6256":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2788:4148":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:44273:7819":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:42167:8658":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11583:8287":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6714:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:1168:33874":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6079:4250":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10227:4924":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:11026:21620":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3661:3385":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4919:8808":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11634:7642":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6276:2395":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:14868:6014":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2326:8405":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:46171:4995":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22997:31621":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:680:8146":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15126:6081":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2322:7765":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5773:3133":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11268:5172":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:45009:4576":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8676:7554":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:6077:7941":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:13577:8466":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:4720:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8204:5090":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:44368:7900":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:774:7751":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:44877:7522":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:46253:4999":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:12486:8154":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:8003:4425":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11605:2394":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:1916:3549":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44526:7913":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10155:4062":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3900:8511":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6706:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14475:5877":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14386:5857":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7813:7729":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46854:5069":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:3665:14135":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3039:3380":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5181:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16138:6359":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:2799:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47233:7529":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2660:4142":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:5781:4158":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8265:5091":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4352:4184":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40392:7820":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11547:4004":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6455:5345":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14177:5823":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9755:21583":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:42609:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:5981:7941":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7385:3327":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10982:21619":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12371:4104":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5472:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:4555:8515":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6433:7687":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5174:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13015:5584":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5225:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12929:4104":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:40937:7852":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:1517:6521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11699:7955":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11115:8264":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21675:32927":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:16079:6346":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:13941:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7727:8422":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11773:4086":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4924:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1324:7722":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6915:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1531:7751":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15281:6120":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10512:27247":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:44087:7886":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40734:8478":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40677:7774":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4921:8809":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6543:4306":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:6788:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15092:6078":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"13:110:35026":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:1607:3327":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6665:21541":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5107:4206":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7516:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:16269:5661":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:33260:14234":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43307:7870":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44540:14103":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:7314:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44133:7889":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6026:4245":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:21721:32922":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:7857:4452":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:12981:14088":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13308:5644":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10915:35050":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11799:8293":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1510:6518":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:32364:3157":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"9:357:20536":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11877:5537":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:44169:7891":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11341:8272":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4864:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3196:4120":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:4451:33389":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:23225:4694":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:46274:5000":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:559:6490":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9324:8555":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11313:7638":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:4801:8795":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3835:8774":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14235:5836":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7989:5083":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:8136:7737":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:6177:5345":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12328:7654":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16105:6352":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:1496:6513":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:38271:14242":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42073:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:6051:7769":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:2403:3386":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46405:5007":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12993:21611":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8251:14216":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7306:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6991:35041":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:8306:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11674:7645":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:39636:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:16223:6381":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:23214:4693":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:5986:8523":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11367:5523":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:23017:31619":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:7389:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15206:6103":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"14:7:8135":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13173:5610":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:5722:4159":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8072:8656":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:424:20523":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4209:8798":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15342:6136":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:6966:7790":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:40649:4071":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"11:364:35010":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8030:5543":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:1610:8410":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:10044:31858":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3399:14056":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:44703:7930":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9671:21586":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11493:8276":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6648:7700":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7539:4167":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:39731:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7875:4059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:10340:3152":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10718:8503":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:7403:26241":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4940:4201":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12362:7663":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6629:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2144:7493":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44972:8485":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:41062:7855":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:5077:7941":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6435:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:8226:21549":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23203:4692":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:2934:14167":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5083:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:178:20588":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7379:35042":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:4515:33389":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:43025:7503":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10355:8559":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:5616:3128":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44248:7896":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43052:7513":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11423:4628":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5290:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"15:306:20629":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11293:21638":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1593:6570":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8288:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13753:5745":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:16198:6375":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:0:2998":{"crate_id":17,"path":["object"],"kind":"module"},"17:11467:5535":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14414:5863":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1369:8144":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8093:6408":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14311:5845":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:39781:8476":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:39623:4769":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:46644:5032":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14912:6045":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:8197:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10092:21608":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:7658:4662":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3671:14134":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7888:7730":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:3297:29228":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12597:5594":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:22218:5334":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5160:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:11432:8461":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1639:6607":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14977:6055":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:8753:3387":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46756:5036":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42568:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:3925:4182":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:5106:8842":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10976:3140":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:23258:4697":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:6729:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:42785:3397":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3318:7756":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13089:5596":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6278:8341":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2536:6421":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6758:4329":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11567:8282":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:47150:5077":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1621:6595":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46306:5002":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7580:7728":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:3329:6390":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13723:5737":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8617:8545":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:30709:3394":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9807:21591":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:7622:4661":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2539:5311":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5376:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:1582:8411":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4614:4191":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7648:8390":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:22525:9004":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:15:2813":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:765:25793":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:45979:4972":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4424:4185":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11142:5530":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:40856:7844":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:5845:7934":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:42262:3327":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8528:7855":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:5598:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11443:5534":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13292:5640":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:2175:21665":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13674:5712":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:6693:3327":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:6958:14121":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12300:21731":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:43558:7875":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10419:4073":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7061:4366":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40585:7827":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:16151:6365":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7355:4407":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:586:8490":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39751:8663":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:883:8404":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:1204:33875":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:7331:26231":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2728:4145":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11166:5525":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:43863:7805":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:4162:3386":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8488:3140":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:7485:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:1603:8412":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3523:7863":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9420:8173":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:8349:8762":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4560:4189":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5897:4221":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:40637:4909":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7405:8410":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40878:7846":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6263:7685":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:2770:5308":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3334:8503":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:938:8409":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42792:3398":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46976:5071":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3387:8505":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5802:21535":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:3754:33370":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6120:21538":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4787:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9185:5154":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:8341:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:837:8398":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:14091:5795":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15616:6229":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14933:6050":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6504:4302":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4322:3385":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:562:8641":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6811:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:12346:1688":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11730:7649":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:7366:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:4327:8817":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13785:5752":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:932:8422":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11788:8292":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4909:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4976:4202":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3285:14053":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:14298:5844":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:44948:4953":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4217:8800":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2338:4121":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15222:6107":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:14752:5921":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:23159:4688":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:15400:6154":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4830:4197":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6409:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4916:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:22577:14255":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:1843:8422":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10524:8251":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1490:6510":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:3899:4181":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:706:7628":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:256:8235":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13363:5652":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5277:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:909:7752":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14131:5799":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:3264:8246":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10251:4067":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:16235:6384":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:11621:7640":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2489:8728":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1891:3542":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5436:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:10401:3403":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13594:5705":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2035:5321":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7570:4168":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:5596:3127":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:8012:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1707:6642":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:608:8229":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:12955:14091":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:47222:7528":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:32836:4382":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5236:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:3417:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15931:5611":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:7984:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:23059:7815":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:7944:26218":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:12976:14089":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5020:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6098:21537":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11016:8258":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7634:8442":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:47207:7527":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:15582:6217":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9451:5163":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:5046:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1540:7752":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4965:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6775:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:42206:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:1547:6541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:523:6469":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:21920:5333":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:289:33370":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:4729:8149":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13855:5761":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13325:5646":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10334:3542":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:403:8237":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:11214:3386":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:6664:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:494:26216":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11063:8261":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42246:3385":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:2572:4138":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11360:8176":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:7107:33402":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11537:8280":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:1478:3385":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6756:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:4952:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3430:8507":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:7393:7771":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8202:4174":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2684:4143":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11242:8268":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11214:3136":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:650:8156":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12342:7658":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:150:5297":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:1207:8240":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41072:7856":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:843:8416":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15151:6090":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4891:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:6861:8171":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:11405:8275":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7397:35044":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42117:3327":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:47301:7538":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:538:6478":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1619:7753":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6160:20647":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:2423:3327":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:46067:4981":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:40606:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:896:7751":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43139:3396":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:219:8145":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:39974:14168":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5415:6393":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8301:4495":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:974:8403":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:21792:8732":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:2302:33790":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1686:6634":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:238:7515":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8339:8536":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5502:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:9202:5155":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:0:2997":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:31094:3296":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:11005:3553":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:6813:4341":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3038:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:14587:5892":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:43941:7877":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40913:4398":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7618:6403":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14986:6056":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:40687:8477":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12030:8302":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42529:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4813:7349":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"11:1142:8408":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3297:33839":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40803:7837":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5296:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:7584:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:538:5498":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3042:7490":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:3292:7753":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3410:8422":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4880:8821":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:1887:3327":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43315:7871":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3282:14052":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5191:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5846:7679":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:15368:6146":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2774:8501":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:589:5501":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8518:7829":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3214:3302":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15434:6161":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3284:7755":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:26121:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22959:31629":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:10857:32126":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:43064:4465":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15836:6283":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5320:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11214:8266":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:10947:7552":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:4837:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5653:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:4913:4200":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10759:5530":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:8216:7741":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1340:8406":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6749:7704":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4688:8822":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2966:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1968:8157":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7559:7727":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6427:8371":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:1910:7754":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2629:2545":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:7769:4444":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:943:8396":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13375:5655":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2593:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:23066:4682":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4942:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7465:4651":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:10759:14334":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14968:6051":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46032:4979":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15138:6084":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4912:3416":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15301:6127":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5643:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:659:8230":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:482:20520":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2808:4149":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:3475:6391":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42109:3386":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42092:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8182:8533":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8879:5152":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7695:4442":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13424:5662":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:3669:3961":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:1509:3327":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8093:3553":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10395:3405":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6698:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:7493:3327":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3933:8410":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3661:3151":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2153:5322":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:787:7752":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1503:6516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:6368:26213":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:1636:7756":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:7561:7429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2130:14265":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11042:8259":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:7610:3333":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:5756:8332":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5083:8840":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:669:8493":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:41328:7865":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:7780:31962":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:46437:5009":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2323:20674":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:9112:3134":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6606:7698":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:3452:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:8606:7940":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5122:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11755:7652":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7168:5159":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2478:4134":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7633:35040":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5329:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:1614:8422":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:123:7745":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"0:81:2446":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"17:11497:8277":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7339:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6670:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6532:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2957:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5636:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13344:5651":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16032:5629":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6231:7682":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:9317:8554":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:563:5500":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:39673:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13959:5778":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11045:3137":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15445:6165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2249:7762":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11661:7644":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:30720:31615":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"14:187:20616":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:42412:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3430:3391":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2535:2544":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:22894:4663":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:43093:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22973:7496":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9179:3327":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2065:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7509:8383":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6047:8334":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14847:6004":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:473:6440":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15383:6150":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:521:25794":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11715:7648":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10068:21590":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7006:8372":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:570:6495":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2768:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:15376:6149":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:12693:7884":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:726:5516":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:3674:3386":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6721:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:2461:2612":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:4666:8821":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11557:8281":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40422:4902":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45900:4965":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43118:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7132:7721":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12464:21732":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:44462:7911":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39539:3390":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12621:5595":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5344:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:40482:7822":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:0:2991":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:1903:7753":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8078:3552":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5457:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13387:5656":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5146:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:21692:32929":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12557:5523":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:16212:6379":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:4484:14051":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9265:5158":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"18:113:25784":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40765:7832":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:2102:5091":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43780:8480":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:46355:5005":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10317:4069":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43800:8481":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"15:0:2996":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:742:8397":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12863:4102":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6385:4292":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1559:8396":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44574:4942":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6317:8360":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9350:25910":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44768:14367":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:23111:8732":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:43035:3394":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:581:3296":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:41301:7863":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:22661:8732":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:1101:8144":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21707:32931":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:373:8488":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6417:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10671:35053":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5665:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:12716:7887":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1069:7722":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:44998:4956":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6456:21540":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:5162:8847":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2763:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47187:7525":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14599:5899":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12683:8326":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:2998:4175":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10917:7943":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:956:3385":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:42451:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:14449:5875":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12647:8323":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:30688:7497":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7741:4172":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3805:5091":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:40835:7842":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:9420:8455":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5581:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8599:7939":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11693:7954":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:2963:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:39619:8687":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1493:3386":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3258:7754":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6940:6396":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12366:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46142:4986":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:45885:4962":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5219:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11419:5530":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:2124:7722":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:16050:5639":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12213:8312":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:9337:5159":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5370:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11702:7647":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:9289:8550":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44882:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:718:5513":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4885:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:40812:7838":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:844:8670":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:30694:4701":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:2542:6422":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:41851:4914":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:5422:33370":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:44683:7925":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:2498:20598":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:13581:5704":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:4360:7941":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6353:4288":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:860:8331":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5742:7673":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2355:4123":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2548:4137":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:7716:14165":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6505:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:43554:7874":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:2369:8415":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:9229:8883":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47129:5076":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:8797:31821":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5415:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"14:40:5626":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14560:5889":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:21690:32924":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7668:8147":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:3473:8247":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6532:7689":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11654:5175":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:40:8689":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:507:5493":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40471:4906":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:939:8672":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12388:7664":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8344:8537":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:15410:6157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7590:4169":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4002:8512":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15190:6101":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42254:3386":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5445:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:1896:8422":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14788:5952":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11923:7957":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9129:3135":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11354:8273":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11827:8511":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4531:4188":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42157:8150":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5960:4235":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9858:21602":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8560:8544":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5914:4226":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:430:35023":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:7885:8177":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:33048:4379":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:578:6500":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:13996:8673":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:12770:7799":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2768:4147":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:6636:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:21800:8919":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6738:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:4897:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10922:7945":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:4503:14137":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:43837:7804":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:46084:4982":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2936:20676":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12225:8313":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8541:7795":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6948:4163":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15655:6237":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3255:8910":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11189:5527":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:968:8401":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6874:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6342:35046":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7743:5167":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:33733:14235":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:9721:8533":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:30656:4700":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7549:7726":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:15324:6132":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1739:33370":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:47196:7526":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7537:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12342:1874":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12454:7668":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3336:8504":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2609:14256":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:36340:4389":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:7988:8732":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7014:21543":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15799:6276":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"14:220:6414":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:6352:7808":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14012:5785":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5382:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:1087:35024":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:44889:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:44757:4948":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12659:8324":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:2508:4135":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6872:4356":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12127:26240":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:1549:8409":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12347:1722":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:12033:8465":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:6412:21539":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:922:8410":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15769:6271":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9781:21601":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:42373:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2748:4146":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43965:7795":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5995:4239":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46000:4977":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10170:4063":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:13904:7810":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:33800:14237":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12792:4026":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:328:7749":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:38326:14243":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2340:7495":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:2352:8406":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12949:4106":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14051:5790":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4147:8793":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:6977:7787":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:8012:5084":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:32229:3138":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15102:6079":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:5770:3131":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3652:29473":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7727:4171":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:44383:7906":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:1025:8405":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11853:8300":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44069:7885":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15176:6098":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:1566:20603":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6620:4308":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:6821:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11201:3135":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43882:7806":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2854:4151":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:8265:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:40714:7804":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22948:4669":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"15:394:20639":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:8007:8531":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:1559:6549":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10399:4071":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3643:3152":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13473:5672":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12900:4103":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7656:21546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6609:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9296:25902":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15473:6173":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:3029:3956":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:23170:4689":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:2116:8423":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40897:7848":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6398:4153":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1631:7755":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14489:5878":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:21794:8916":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40498:7823":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:44687:7926":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13553:5694":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14463:5876":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:32365:3308":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:23079:4683":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46291:5001":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4811:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6847:8527":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:7111:4368":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:45932:4969":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13972:5545":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11233:4945":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:11225:26243":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:4882:4199":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15058:6066":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6900:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7910:21548":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:40784:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11128:4052":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2312:2409":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10997:5520":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5588:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:4815:7351":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:46682:5034":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"10:36:6427":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:21812:5333":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:8188:8395":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40593:4907":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:34291:14240":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40448:4905":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5314:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:42101:3385":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10842:26236":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:80:25782":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:22443:9002":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"10:0:2992":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13024:21612":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44592:7922":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5336:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:11282:7799":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11595:5536":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1051:8406":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4641:4192":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:102:7744":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6072:14563":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:4335:8818":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:15521:6210":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10954:21618":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:12915:8715":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44397:7909":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11682:5178":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11392:8274":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:10724:8507":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13252:5629":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:7831:14211":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4297:28846":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4724:8148":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:351:35012":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:33599:8913":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42001:4927":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12324:25909":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11510:8278":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4856:4198":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2220:7759":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7582:4655":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:515:5496":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2592:4139":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:8029:7463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14503:5881":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6478:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5863:21536":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7348:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:1160:8144":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:8063:5348":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"13:0:2988":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:7449:3327":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"0:80:2438":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"6:6562:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14723:5901":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7528:7723":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2735:8161":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3202:3301":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42687:8458":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46661:5033":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:0:1714":{"crate_id":1,"path":["std"],"kind":"module"},"16:6560:4156":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10439:5518":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46549:5029":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:15249:6111":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6588:7690":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:3389:8506":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13116:5598":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:304:3161":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44187:7892":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:4602:5327":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:3251:3385":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5002:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:12364:1828":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:7144:21544":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:0:2999":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7473:4259":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:32307:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:23181:4690":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:3480:8757":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:4195:8796":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14516:5882":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:22630:14255":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:11931:7957":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5546:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4971:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11743:7650":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10284:4068":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15356:6143":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43935:7876":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9244:8885":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:875:8403":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:261:8236":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11825:8297":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5347:4208":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:7376:3760":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:700:3327":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2954:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4932:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14436:5874":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13606:5708":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:2303:20648":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41813:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12851:7670":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39801:7499":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4859:3415":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:5092:14155":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7604:4170":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:32289:3414":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5536:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1855:3533":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6676:8526":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3885:8422":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:10397:3406":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15734:6258":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:867:8235":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:4718:4193":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7306:35045":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11898:5539":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5031:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:8386:3159":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:4803:3414":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10137:21584":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"8:0:2990":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14066:5793":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6650:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:43911:4936":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8862:3385":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:1535:6532":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:465:6435":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22925:4664":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"0:76:2407":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"11:800:8410":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:75:2393":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"2:22230:32917":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12422:7666":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:7715:14164":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:4161:8795":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}