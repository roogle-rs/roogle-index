{"root":"0:0:1930","crate_version":"0.9.4","includes_private":false,"index":{"0:34:2208":{"id":"0:34:2208","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:28370":{"id":"2:11910:28370","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:6786":{"id":"2:11923:6786","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43130:6764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:30805":{"id":"2:11927:30805","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11926:30816"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43443:6784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2684:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2686:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:93:1705":{"id":"b:2:2241-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:23762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:664":{"id":"0:38:664","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2243:23762":{"id":"2:2243:23762","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:2665":{"id":"5:685:2665","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:11994:1675":{"id":"2:11994:1675","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2547:1465":{"id":"2:2547:1465","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:129:1706":{"id":"b:2:2238-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2387"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5642-0:129:1706":{"id":"b:5:5642-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5640:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5644:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:52:2103":{"id":"0:52:2103","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2674:218-0:143:1707":{"id":"a:2:2674:218-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:686:2666":{"id":"5:686:2666","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2543-0:129:1706":{"id":"b:2:2543-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:609":{"id":"0:136:609","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2338:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:426"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:158:1029":{"id":"0:158:1029","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30653:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:33759":{"id":"2:11902:33759","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:33763":{"id":"2:11920:33763","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11877:1389","crate::ops::IndexMut":"2:2973:7457","str::slice_unchecked":"2:11919:33762"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:30816":{"id":"2:11926:30816","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11927:30805"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43434:6783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:2187":{"id":"2:11931:2187","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3307-0:129:1706":{"id":"b:2:3307-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11940:2646":{"id":"2:11940:2646","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2684:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2691:226-0:93:1705":{"id":"a:2:2691:226-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:54:2110":{"id":"0:54:2110","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1710":{"id":"0:45:1710","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2691:226-0:129:1706":{"id":"a:2:2691:226-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2686:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:62-0:39:1658":{"id":"0:62-0:39:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"date","name":"date","id":"0:39:1658","glob":true}},"2:11969:33767":{"id":"2:11969:33767","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2684:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11972:33768":{"id":"2:11972:33768","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:24389":{"id":"2:12001:24389","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898":{"id":"2:11898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11899:807","2:11900:2609","2:11901:33758","2:11902:33759","2:11904:33760","2:11907:28356","2:11908:33761","2:11909:312","2:11910:28370","2:11911:28366","2:11913:28367","2:11915:28368","2:11917:28369","2:11919:33762","2:11920:33763","2:11921:28392","2:11922:28393","2:11923:6786","2:11924:6796","2:11925:3778","2:11926:30816","2:11927:30805","2:11928:1664","2:11929:33764","2:11930:30820","2:11931:2187","2:11934:1796","2:11937:1673","2:11940:2646","2:11944:2608","2:11948:1668","2:11951:28401","2:11954:28403","2:11957:33765","2:11960:33766","2:11963:1682","2:11966:28406","2:11969:33767","2:11972:33768","2:11975:2400","2:11978:33769","2:11981:33770","2:11984:33771","2:11987:1667","2:11989:33772","2:11991:33773","2:11993:1677","2:11994:1675","2:11995:33774","2:11998:33775","2:12001:24389","2:12004:28408","2:12007:33776","2:12010:1678","2:12013:1676","2:12016:1710","2:12018:27866","2:12019:29475","2:12020:27867","2:12021:27863","2:12022:27862","2:12023:33777","2:12025:7424","2:12026:33778"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5389:34430":{"id":"5:5389:34430","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:129:1706":{"id":"b:2:2241-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:23762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11989:33772":{"id":"2:11989:33772","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:93:1705":{"id":"b:2:2528-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:1802"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:419"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:150:609":{"id":"0:150:609","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:143:1707":{"id":"0:143:1707","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:8202:7609-0:143:1707","a:2:2674:218-0:143:1707","a:2:8203:7608-0:143:1707","a:2:2731:2449-0:143:1707","a:2:2691:226-0:143:1707","b:2:2538-0:143:1707","b:2:2532-0:143:1707","b:2:2528-0:143:1707","b:2:2238-0:143:1707","b:2:2543-0:143:1707","b:2:2241-0:143:1707","b:2:3307-0:143:1707","b:5:683-0:143:1707","b:5:5642-0:143:1707","0:149","0:155","0:56","0:154","0:151","0:159","0:146","0:152","0:148","0:157"]}},"5:5644:1443":{"id":"5:5644:1443","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1718":{"id":"0:76:1718","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["min_date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:1664":{"id":"2:11928:1664","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43414:6781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:2608":{"id":"2:11944:2608","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:27867":{"id":"2:12020:27867","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:93:1705":{"id":"b:5:683-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:2665","5:686:2666","5:687:2667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:79:1741":{"id":"0:79:1741","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["min_version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:28368":{"id":"2:11915:28368","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2685:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12026:33778":{"id":"2:12026:33778","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4524:33778"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43477:6708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9093:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77:1726":{"id":"0:77:1726","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["max_date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:2609":{"id":"2:11900:2609","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:7609-0:129:1706":{"id":"a:2:8202:7609-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:7609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2686:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12025:7424":{"id":"2:12025:7424","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4527:7424"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43468:6705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:1678":{"id":"2:12010:1678","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:28408":{"id":"2:12004:28408","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:1682":{"id":"2:11963:1682","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795","str::rsplitn":"2:11966:28406"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43264:6773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:36:2215":{"id":"0:36:2215","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:33771":{"id":"2:11984:33771","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::match_indices":"2:11981:33770"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43328:6777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:129:1706":{"id":"b:2:2538-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2685:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:106:1029":{"id":"0:106:1029","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30653:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2685:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"name":"PartialOrd","id":"2:2344:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1029"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:12:2070":{"id":"0:12:2070","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["major",{"kind":"primitive","inner":"u16"}],["minor",{"kind":"primitive","inner":"u16"}],["patch",{"kind":"primitive","inner":"u16"}]],"output":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:2103":{"id":"0:16:2103","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:7609-0:93:1705":{"id":"a:2:8202:7609-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:7609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:21:664":{"id":"0:21:664","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:419":{"id":"0:156:419","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:33761":{"id":"2:11908:33761","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:14:2095":{"id":"0:14:2095","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:2110":{"id":"0:18:2110","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:33769":{"id":"2:11978:33769","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2400"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43382:6780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:27:1720":{"id":"0:27:1720","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:1930"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:143:1707":{"id":"b:2:2238-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2387"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2302:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1720","0:30:1710","0:32:1768","0:33:2204","0:34:2208","0:35:2212","0:36:2215"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:48:2241":{"id":"0:48:2241","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"u16"}],["month",{"kind":"primitive","inner":"u8"}],["day",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:143:1707":{"id":"b:2:2528-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:1802"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:81:1757":{"id":"0:81:1757","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2240:2387":{"id":"2:2240:2387","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:6796":{"id":"2:11924:6796","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43136:6765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1657":{"id":"0:24:1657","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:129:1706"],"is_stripped":true}},"2:11930:30820":{"id":"2:11930:30820","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43452:6785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8202:7609-0:143:1707":{"id":"a:2:8202:7609-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8202:7609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11907:28356":{"id":"2:11907:28356","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11167:1696"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:28406":{"id":"2:11966:28406","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11871:415","str::splitn":"2:11963:1682","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43282:6774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:2400":{"id":"2:11975:2400","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:2400"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43364:6779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60-0:3:1554":{"id":"0:60-0:3:1554","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"version","name":"version","id":"0:3:1554","glob":true}},"2:11917:28369":{"id":"2:11917:28369","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:143:1707":{"id":"b:2:2543-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8203:7608-0:93:1705":{"id":"a:2:8203:7608-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:7608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2532-0:129:1706":{"id":"b:2:2532-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:1704":{"id":"0:75:1704","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1705","`Version::read()`":"0:6:1720","`Channel`":"0:129:1706","crate":"0:0:1930","`Channel::read()`":"0:27:1720","`Date::read()`":"0:42:1720","`Date`":"0:143:1707"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61-0:24:1657":{"id":"0:61-0:24:1657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"channel","name":"channel","id":"0:24:1657","glob":true}},"2:11911:28366":{"id":"2:11911:28366","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:33764":{"id":"2:11929:33764","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43424:6782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:1710":{"id":"2:12016:1710","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11561:125","`FromStr`":"2:11560:7621"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11560:7621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11560:7621","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:12921":{"id":"5:5383:12921","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:93:1705":{"id":"b:2:2538-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:93:1705":{"id":"b:2:2238-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2387"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:143:1707":{"id":"b:5:683-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:2665","5:686:2666","5:687:2667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:57:664":{"id":"0:57:664","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:28403":{"id":"2:11954:28403","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split":"2:11948:1668"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43178:6688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:7523":{"id":"5:5399:7523","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3309:1479":{"id":"2:3309:1479","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:39139:3886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:1796":{"id":"2:11934:1796","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2674:218-0:93:1705":{"id":"a:2:2674:218-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11937:1673":{"id":"2:11937:1673","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:664":{"id":"0:147:664","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2691:226-0:143:1707":{"id":"a:2:2691:226-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2691:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:93:1705":{"id":"0:93:1705","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:8202:7609-0:93:1705","a:2:2674:218-0:93:1705","a:2:8203:7608-0:93:1705","a:2:2731:2449-0:93:1705","a:2:2691:226-0:93:1705","b:2:2538-0:93:1705","b:2:2532-0:93:1705","b:2:2528-0:93:1705","b:2:2238-0:93:1705","b:2:2543-0:93:1705","b:2:2241-0:93:1705","b:2:3307-0:93:1705","b:5:683-0:93:1705","b:5:5642-0:93:1705","0:107","0:22","0:99","0:103","0:102","0:97","0:105","0:20","0:100","0:96"]}},"2:2531:1802":{"id":"2:2531:1802","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2505:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:126":{"id":"2:2541:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:33:2204":{"id":"0:33:2204","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30:1710":{"id":"0:30:1710","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1720":{"id":"0:6:1720","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:1930"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:7608-0:129:1706":{"id":"a:2:8203:7608-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:7608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5642-0:143:1707":{"id":"b:5:5642-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5640:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5644:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5401:27864":{"id":"5:5401:27864","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12022:27862"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3307-0:143:1707":{"id":"b:2:3307-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11901:33758":{"id":"2:11901:33758","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:2667":{"id":"5:687:2667","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:312":{"id":"2:11909:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11910:28370","`u8`":"1:11888:1487"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2542:1466":{"id":"2:2542:1466","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1706":{"id":"0:129:1706","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:8202:7609-0:129:1706","a:2:2674:218-0:129:1706","a:2:8203:7608-0:129:1706","a:2:2731:2449-0:129:1706","a:2:2691:226-0:129:1706","b:2:2538-0:129:1706","b:2:2532-0:129:1706","b:2:2528-0:129:1706","b:2:2238-0:129:1706","b:2:2543-0:129:1706","b:2:2241-0:129:1706","b:2:3307-0:129:1706","b:5:683-0:129:1706","b:5:5642-0:129:1706","0:140","0:132","0:135","0:137","0:134","0:141","0:37","0:138"]}},"2:11948:1668":{"id":"2:11948:1668","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split_whitespace":"2:11926:30816","str::rsplit":"2:11954:28403"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43160:6685","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:1667":{"id":"2:11987:1667","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:33775":{"id":"2:11998:33775","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:664":{"id":"0:133:664","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1930":{"id":"0:0:1930","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1705","`is_max_version`":"0:80:1749","`is_exact_version`":"0:81:1757","`is_max_date`":"0:77:1726","`is_exact_date`":"0:78:1733","`triple()`":"0:75:1704","`Date`":"0:143:1707","`Channel`":"0:129:1706"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:75:1704","0:76:1718","0:77:1726","0:78:1733","0:79:1741","0:80:1749","0:81:1757","0:82:1767","0:84:1781","0:60-0:3:1554","0:61-0:24:1657","0:62-0:39:1658"],"is_stripped":false}},"2:11899:807":{"id":"2:11899:807","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11871:415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:1677":{"id":"2:11993:1677","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:27865":{"id":"5:5400:27865","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12021:27863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:33760":{"id":"2:11904:33760","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11902:33759"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:33773":{"id":"2:11991:33773","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:33776":{"id":"2:12007:33776","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1733":{"id":"0:78:1733","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:143:1707":{"id":"b:2:2241-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:23762"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12018:27866":{"id":"2:12018:27866","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:3778":{"id":"2:11925:3778","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43146:3216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:27862":{"id":"2:12022:27862","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1720":{"id":"0:42:1720","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:1930"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:28393":{"id":"2:11922:28393","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11921:28392"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2543-0:93:1705":{"id":"b:2:2543-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:126","2:2547:1465"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2307:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11919:33762":{"id":"2:11919:33762","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11877:1389","str::slice_mut_unchecked":"2:11920:33763","crate::ops::Index":"2:2969:7456"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:28392":{"id":"2:11921:28392","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11922:28393"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:33765":{"id":"2:11957:33765","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11600:12795","str::split":"2:11948:1668","prim@char":"1:11871:415","`DoubleEndedIterator`":"2:7193:119","str::rsplit_terminator":"2:11960:33766"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43210:6770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1554":{"id":"0:3:1554","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:93:1705"],"is_stripped":true}},"a:2:2731:2449-0:129:1706":{"id":"a:2:2731:2449-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:142:419":{"id":"0:142:419","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35:2212":{"id":"0:35:2212","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8203:7608-0:143:1707":{"id":"a:2:8203:7608-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8203:7608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:84:1781":{"id":"0:84:1781","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1767"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["feature",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:129:1706":{"id":"b:2:2528-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:1802"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5382:34428":{"id":"5:5382:34428","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2456","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2456","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:34431":{"id":"5:5397:34431","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:160:426":{"id":"0:160:426","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30653:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:426":{"id":"0:108:426","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:30653:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2338:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:426"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12013:1676":{"id":"2:12013:1676","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:29475":{"id":"2:12019:29475","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39353:28355","Self::is_ascii":"2:12018:27866"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39353:28355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:34428","5:5383:12921","5:5386:34429","5:5389:34430","5:5397:34431","5:5398:34432","5:5399:7523","5:5400:27865","5:5401:27864"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:50:2095":{"id":"0:50:2095","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["date",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13:2082":{"id":"0:13:2082","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"u16"},{"kind":"primitive","inner":"u16"},{"kind":"primitive","inner":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1720","0:9:1710","0:12:2070","0:13:2082","0:14:2095","0:16:2103","0:18:2110"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2538-0:143:1707":{"id":"b:2:2538-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2512:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2508:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:126","2:2542:1466"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3307-0:93:1705":{"id":"b:2:3307-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3305:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3309:1479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:23:664":{"id":"0:23:664","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9068:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9057:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2674:218-0:129:1706":{"id":"a:2:2674:218-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2674:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11951:28401":{"id":"2:11951:28401","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11423:6687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2449-0:143:1707":{"id":"a:2:2731:2449-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11960:33766":{"id":"2:11960:33766","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11600:12795","str::split":"2:11948:1668","prim@char":"1:11871:415","str::split_terminator":"2:11957:33765"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43228:6771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:12793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12023:33777":{"id":"2:12023:33777","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4526:33777"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43459:6709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:1768":{"id":"0:32:1768","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:28367":{"id":"2:11913:28367","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2449-0:93:1705":{"id":"a:2:2731:2449-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5642-0:93:1705":{"id":"b:5:5642-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9098:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2681:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5640:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5644:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2534:690":{"id":"2:2534:690","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:33774":{"id":"2:11995:33774","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:12795"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11625:12792","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12021:27863":{"id":"2:12021:27863","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:419":{"id":"0:104:419","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:129:1706":{"id":"b:5:683-0:129:1706","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2254:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Channel","id":"0:129:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:2665","5:686:2666","5:687:2667"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:1658":{"id":"0:39:1658","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:143:1707"],"is_stripped":true}},"0:80:1749":{"id":"0:80:1749","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["max_version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9:1710":{"id":"0:9:1710","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["version",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:609":{"id":"0:98:609","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1720","0:45:1710","0:48:2241","0:50:2095","0:52:2103","0:54:2110"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2532-0:93:1705":{"id":"b:2:2532-0:93:1705","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5386:34429":{"id":"5:5386:34429","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2546:126":{"id":"2:2546:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31837:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"name":"PartialOrd","id":"2:2344:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Version","id":"0:93:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1029"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5398:34432":{"id":"5:5398:34432","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2456","`String`":"5:7250:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2456","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:4034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:33770":{"id":"2:11981:33770","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11600:12795","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::rmatch_indices":"2:11984:33771"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43310:6776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:143:1707":{"id":"b:2:2532-0:143:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2505:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Date","id":"0:143:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2534:690"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:82:1767":{"id":"0:82:1767","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1781"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:2917:2452":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:7479:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:10092:7276":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:7069:3771":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2298:18729":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7317:34576":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6474:3307":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:4702:3327":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4277:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:42204:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46139:4123":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2357:3263":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44946:4073":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21833:7536":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3675:7318":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:43891:6815":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7098:2614":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8945:7358":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5741:19613":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10618:7371":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:45076:4078":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:1845:2955":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:7585:30297":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4903:5966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3906:7539":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4037:3317":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2609:7306":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43104:4049":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:3162:34506":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:3872:3315":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10409:7312":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10125:4614":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10334:4605":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:1724:12960":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:3546:2671":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11167:1696":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:2904:2665":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:41090:6461":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"11:1859:6663":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11090:3249":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:3640:3119":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11135:3089":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10015:7139":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:3446:5376":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10823:3179":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4872:3333":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7837:6640":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4568:3324":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8738:2428":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:41954:2677":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5630:7170":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:500:5472":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:659:2614":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2572:3272":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45593:4101":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10054:7275":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:506:5475":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11025:4058":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:9923:2670":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11339:4714":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7518:3081":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:20673:7690":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"9:421:18612":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3610:7534":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"8:0:2289":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6582:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"15:219:18714":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:2069:7243":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:9780:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:39180:6458":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13698:5316":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11062:4261":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7543:3304":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22346:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:44924:4072":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:959:7242":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9596:4602":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:47199:6478":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43887:6814":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2830:3283":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11902:4835":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1723:5664":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:531:6541":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2864:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12592:4958":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11844:4828":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:9175:2833":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9748:4605":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:12393:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6904:5383":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42699:6475":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:834:7239":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:38912:12763":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9469:7107":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5693:3346":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7029:6628":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7031:2979":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11885:739":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:7499:3079":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11615:4774":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10416:7158":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11451:6504":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10626:6575":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:2905:33483":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:21694:30985":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:20802:4385":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9453:19695":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:6903:3077":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:5794:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:41961:2678":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11422:4729":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:38974:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:762:2955":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:6004:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9178:7102":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:5190:2967":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:43282:6774":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43048:7293":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4935:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11459:4735":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6662:6614":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:11388:6778":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:6760:3022":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4690:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:21821:3801":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13461:5237":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:45125:4080":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8726:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6868:5381":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8993:4252":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:9321:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:1196:6632":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"10:0:2291":{"crate_id":10,"path":["adler"],"kind":"module"},"17:8683:3209":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5104:3340":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4301:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3124:24769":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:814:2973":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"0:77:1726":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"6:1731:5668":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6943:19619":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4799:791":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:20724:7681":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:4034:12759":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43544:12806":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1609:5591":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:7271:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5330:2420":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:21642:6697":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2505:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:810:7248":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10465:7162":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3870:7538":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6558:6610":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:5903:2997":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:43118:4052":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:487:7088":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:5381:1660":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43228:6771":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10885:6580":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1687:5650":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11874:1043":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:4731:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:21321:4387":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12158:4872":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42887:7289":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:8979:34583":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:1550:5552":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7932:7522":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6045:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6098:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5498:2426":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2751:3507":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2780:12931":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:43967:13052":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:47265:6484":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:9917:1705":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:20507:31515":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3140:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41512:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41271:2614":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42467:6758":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10642:6830":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"0:0:1930":{"crate_id":0,"path":["version_check"],"kind":"module"},"17:9895:7134":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:4252:7010":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12033:4856":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43026:7292":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1994:7254":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6022:19615":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1565:2614":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5316:2419":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"0:78:1733":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"18:574:4568":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40097:6722":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:9313:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:2204:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:507:4568":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3928:7541":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:4674:7553":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:8490:19678":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:587:5525":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10837:24382":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5976:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5367:18727":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:6362:2614":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12282:4909":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10936:3240":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11544:4750":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2973:7457":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5831:6125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2319:3255":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2499:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10478:7163":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8198:6825":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41133:4041":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41255:2670":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:8632:19660":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2545:3040":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:39159:3551":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:40056:6717":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9068:34582":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11060:4660":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:2367:7496":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11446:4733":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13488:5244":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3067:7458":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11372:4720":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6809:6401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:0:2298":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10052:7145":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3396:2434":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:4335:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:8796:30394":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:8025:3613":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11484:4737":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:8090:6647":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:2915:33482":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8124:6743":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:5814:3005":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5034:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:44992:4075":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:9972:6685":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:22082:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44129:4064":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9653:7118":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12902:5080":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:42506:6760":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"14:7:6998":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5797:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"9:445:18610":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8170:6651":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2235:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8720:2427":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:1520:5539":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13865:5359":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:480:3052":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44094:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:766:23535":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:20439:2582":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9772:4609":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:39756:6705":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10598:3241":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10681:6578":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:1541:5547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:2184:5448":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42514:6761":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:39823:4019":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1677:5644":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47356:6489":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9853:7128":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6544:3295":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:719:4588":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:20761:7685":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13194:5168":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5386:3207":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7803:3577":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6243:2992":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7016:6625":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4445:3320":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6990:3492":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11282:4700":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11321:7317":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4271:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:4752:386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:9246:7274":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:6836:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40087:6720":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6104:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3242:7314":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:8598:19682":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43749:6802":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:481:6539":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:8823:3214":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1057:33485":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43738:12807":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2734:2592":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"0:75:1704":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"1:7649:7429":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:47239:6482":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"14:187:18703":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:1812:4380":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:9361:4384":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7275:7008":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:7771:3158":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:20452:31377":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5005:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9104:2686":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11158:2438":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:39056:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:4369:3027":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2756:3504":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12622:4660":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13791:5344":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:582:2582":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12433:4930":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2694:3277":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40260:6743":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2827:3060":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:3130:12941":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8897:7351":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"14:0:2294":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10798:19684":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2404:3265":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11894:1540":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10840:3237":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"9:502:3752":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3982:7545":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:42259:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:595:5530":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8144:6781":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9577:4600":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8400:4394":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:42475:6759":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11532:4749":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"0:80:1749":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:221:5399":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:123:13331":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9098:7100":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47280:6485":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12550:4954":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4624:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:7548:12907":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1071:7245":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39950:4022":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8938:7357":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1747:5673":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6981:7211":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10660:4660":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:697:7235":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:2115:6669":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:11842:7430":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2338:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13356:5207":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9947:2671":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11869:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40478:6748":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2772:7676":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10000:3225":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:40274:6744":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7173:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10989:3243":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:39917:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:2907:6449":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:1034:7090":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:45722:4104":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43146:3216":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:5830:13250":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9498:4598":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11312:6767":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13842:5355":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:42938:6689":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:39014:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6307:3287":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8752:2429":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:39884:12869":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43903:6818":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:49635:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3047:18757":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2810:12935":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:45155:4081":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:7347:3013":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12113:4867":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:45569:4100":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:7039:33477":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:12196:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3130:26224":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:5063:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13211:5173":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:5640:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:8573:19681":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5017:7323":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10527:19791":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:43364:6779":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:5906:3063":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:1527:5542":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7859:19624":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4834:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4492:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2920:2453":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11011:3244":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:8548:19680":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11888:1487":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47333:6488":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2337:3257":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5000:3337":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:8065:3550":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12510:4949":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43687:6800":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:4206:2670":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:618:7016":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2788:12932":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7246:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9523:7112":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5998:19614":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:922:7234":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47318:6487":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6201:7194":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1895:7017":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:47219:6480":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10199:1660":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13265:5186":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39922:4021":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43895:6816":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5175:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41632:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43911:6820":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1900:14669":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12835:5025":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2899:2675":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:530:3053":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9641:7117":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:42987:6476":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:47254:6483":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12894:5077":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41432:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11355:4718":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13041:5130":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:12435:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:2594:3273":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:42222:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10142:19766":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6935:7210":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:8651:3207":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6164:6595":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13376:5214":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6890:3298":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:1852:6662":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:8214:3551":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7366:19621":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4757:3329":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12449:4934":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9018:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"9:352:18625":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9477:3036":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4848:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:47395:4167":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2569:7020":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3987:7265":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:644:4568":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:39132:7285":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:41044:4027":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43130:6764":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4773:32232":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11109:3252":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"7:32:18596":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45691:4103":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:21520:4388":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:44167:4069":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45903:4119":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11193:4676":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5735:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10735:4668":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13433:5230":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6793:3482":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:43660:6799":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8377:6471":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2684:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7240:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2616:3274":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3496:2992":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8109:6650":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2831:12937":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13385:5215":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11890:1485":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5779:3354":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:46747:4159":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"14:202:12808":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5804:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:0:2292":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6575:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4894:5960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41672:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5048:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:5366:2422":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:2076:2985":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11233:6840":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4469:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:1906:6454":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7042:3493":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:901:2992":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:9591:3045":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13812:5350":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2460:12873":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:590:4576":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7556:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"14:31:6998":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:4818:3331":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:3321":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4728:3328":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6336:3421":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:9100:2678":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11800:4819":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:30049:3811":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5983:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:6674:32078":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7520:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4422:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7626:7229":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43468:6705":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9628:7116":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4773:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11258:4699":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5947:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4924:5981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:44880:4070":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10545:3243":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4314:3026":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:6175:3011":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:4424:2697":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13659:5308":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7411:3389":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7467:6633":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6365:6749":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10316:4648":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5552:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:3127:26218":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:10855:2430":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5305:3341":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12980:5123":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:985:6632":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"19:0:1025":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2593:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5786:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:0:1381":{"crate_id":1,"path":["std"],"kind":"module"},"5:7053:2614":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:3116:2670":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4676:7556":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:0:2288":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"15:198:18710":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10068:7147":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6616:6315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11152:6836":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7151:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:30681:2582":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:962:2967":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7250:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7669:3305":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43328:6777":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7065:6631":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:49557:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2524:3270":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43883:6813":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12098:4864":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46857:4160":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4904:3334":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11298:3091":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10660:4255":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:234:6471":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:9071:6827":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:1381:2614":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:568:5515":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:7155:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:39783:30967":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8156:7346":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:930:7236":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4702:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8037:2432":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:1514:5536":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:9102:2677":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:8047:5393":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9986:6563":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10412:7314":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:4136:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3149:6664":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:1518:18691":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4573:6312":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3244:7315":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:42956:7290":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40209:6736":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:5481:6676":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:39843:6705":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:3142:7097":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:41280:4047":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13803:5346":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6743:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:62:13276":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:9057:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:47105:4164":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10428:7159":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:40485:6749":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:1621:584":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47228:6481":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40168:6732":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40519:6459":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9380:19693":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9218:4605":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:41169:4042":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:1365:2671":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2835:12938":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:40125:6726":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5850:6127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11924:4842":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13821:5352":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:386:7087":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40047:7288":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:41398:2614":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47181:4166":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2254:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:755:6557":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13453:5236":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7585:4175":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6184:3063":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4:1008":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:875:6660":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:8791:30299":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10938:3088":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11434:4730":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2784:12930":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6431:6599":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:9106:2687":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9409:19694":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10104:4612":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:60:34559":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10452:7161":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21626:3781":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:11423:6687":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:782:2970":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3974:2992":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5418:5378":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10041:7026":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2512:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"18:707:6550":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13564:5289":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42484:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:39762:6706":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12085:4862":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:41004:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6361:3425":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5888:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:40288:6745":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2762:12929":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8844:7641":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:2764:3280":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:39870:6711":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:7491:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10670:4663":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3063:3115":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"15:0:2295":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4849:7594":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:3672:4182":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:22280:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:43879:6812":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:40027:6693":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13257:5184":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:1003:7243":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:4789:3330":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40509:3034":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5715:7329":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:699:6548":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9545:3202":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10516:4653":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:247:7086":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4406:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8150:7344":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:7114:12909":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6919:34573":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:80:23523":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1077:33539":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10816:3749":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10092:7149":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:24:606":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:9822:7125":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:8129:7230":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:614:34595":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:0:812":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39034:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4715:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13516:5252":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9868:4038":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:1628:4376":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13033:5129":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:4046:2671":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7767:19623":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40107:6723":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:3621:2967":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43595:6797":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4375:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:936:7441":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4930:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:6764:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:731:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12563:4955":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7011:27624":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6506:6608":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:879:2670":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11871:415":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:6292:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3876:7537":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4650:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4756:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3378:1857":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13639:5302":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3899:3316":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11813:4821":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5868:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2668:3276":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11081:4253":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:22313:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:7293:3532":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4624:3326":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:25696:3808":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12318:4914":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1716:5661":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40148:6730":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4898:7600":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:7193:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"0:79:1741":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"1:11200:4265":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:30083:6456":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8908:7353":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:9052:4254":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11946:4843":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:40078:6719":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1442:7235":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:488:5469":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:4378:2696":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13678:5313":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:8858:3215":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:3777:7319":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6575:19617":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:8521:19679":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9876:3157":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:1982:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7023:2992":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:46399:4127":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:2406:4369":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1844:2833":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40471:6747":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2579:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:3030:3309":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:8310:19673":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4671:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7562:4174":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"13:0:2287":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:41331:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:1832:2670":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:12244:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:1919:19724":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:7667:2837":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:7927:7339":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6541:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:31873:7284":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:7526:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:11826:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4974:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:2696:2588":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:2378:3264":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:4817:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2357:7491":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5990:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:1589:5577":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12059:4859":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10897:3239":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:2209:1720":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6818:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6679:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12799:4994":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:521:23536":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:7544:2673":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7077:19620":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5920:3376":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:30283:30980":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:5655:3292":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9534:7113":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:7922:7338":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:10220:6774":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4709:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:40527:6753":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:7776:7335":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9028:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5773:6092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2344:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4354:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13419:5228":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:653:13687":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:4247:7009":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11886:740":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9683:7122":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:624:34593":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:3157:12845":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:264:2967":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11671:3095":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:46061:4122":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:5539:6677":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4828:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8958:4249":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:6930:3066":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"9:481:18609":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:11560:7621":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7596:19622":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10026:7140":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13169:5159":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11439:6503":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:21429:7684":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4290:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1645:5621":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8081:2433":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11892:1483":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:660:7080":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43612:6798":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6656:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47059:4163":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11882:639":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:8782:7350":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:42947:6690":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:47208:6479":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:3305:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4503:7586":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11876:1359":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:119:2949":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42250:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3460:2443":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"17:13309:5197":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:35:2963":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:41313:7011":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7157:7440":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"0:76:1718":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"2:45425:4095":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7008:2614":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9617:7115":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:21800:6701":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11853:24387":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:1738:6452":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:45745:4105":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6688:6327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:44137:4066":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1710:5660":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:8788:3213":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:1138:7006":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22148:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:844:2670":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10406:7310":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:6232:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5346:3342":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1120:7247":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:1555:7250":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44086:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:1029:7245":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1212:7245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:4011:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:7497:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:20467:31377":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13316:5198":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9488:7109":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:1840:2992":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:41263:2671":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:3163:7310":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:11671:12800":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12046:4857":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:41061:7533":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45177:4082":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21658:3782":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:43136:6765":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:3687:7254":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11870:932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:20699:7691":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4120:7566":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4634:7595":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7557:5388":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2808:3282":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:41968:2686":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5922:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:9478:7108":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:7090:2614":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1583:5575":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5797:3358":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11520:4746":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43424:6782":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:20484:31513":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4678:7557":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8860:7643":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4542:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:4398:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9886:7131":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13324:5199":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:2178:5447":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:21755:30957":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:7532:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:635:7298":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6557:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43414:6781":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11220:4684":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:6861:7025":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"14:160:6998":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12138:4869":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:5682:7325":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3320:6752":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:45054:4077":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5557:3288":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8790:2614":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10283:4646":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:44900:4071":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6012:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6254:3416":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9907:4611":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6696:19618":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4750:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:7788:6492":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:2086:6667":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2448:3267":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13469:5239":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8327:4236":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10615:6574":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:42496:6471":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:38873:2674":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1241:7006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9110:25856":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7743:3294":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3999:7266":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8902:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:20505:31518":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12236:4899":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13053:5135":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6179:7179":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43459:6709":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:1080:7006":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6236:7206":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"13:110:34563":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46605:4158":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:49200:7718":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:6005:1706":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:10682:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8137:6685":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13689:5314":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6400:3428":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:599:34594":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4243:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:41407:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:9770:7554":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11785:4815":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3444:29972":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:46997:4162":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"12:0:2293":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6854:3488":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7660:6823":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11410:4726":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:12183:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:41832:7273":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4314:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5923:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:320:2951":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12770:4974":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2969:7456":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:4365:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4461:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10705:4664":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:1594:6665":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12516:7448":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10555:6564":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3990:7547":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:0:2297":{"crate_id":17,"path":["object"],"kind":"module"},"6:1559:5558":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:7852:4182":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9933:6558":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7145:3772":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11895:1118":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:30653:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11137:13011":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10248:7279":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:7541:2672":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13744:5330":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:6405:3074":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:3123:6663":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3920:7540":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13101:5144":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:43899:6817":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:2205:3772":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:154:2944":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4455:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"14:215:6652":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:4320:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22886:3807":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2793:3509":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:3749:3312":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:41382:2670":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6533:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6132:6592":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3435:2445":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:652:4568":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8256:19659":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6671:3455":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43452:6785":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6712:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7259:4047":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7264:3780":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10647:6824":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:43160:6685":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:20905:7554":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2232:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:4932:3335":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:41390:2671":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12522:4950":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:6753:7679":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:1846:2834":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10452:3085":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1421:7248":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:1787:7091":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8250:7348":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:6691:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:10733:7280":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5743:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7683:2838":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13426:5229":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6390:6598":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:41146:6825":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6819:3483":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7485:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7233:3779":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2426:3266":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:9377:3083":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:3128:34505":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39799:4018":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21682:3787":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:21427:7554":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6081:3050":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8883:4248":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3815:3314":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2731:2449":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:3782:3313":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6673:6322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7508:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11969:4848":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6218:7198":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:690:6547":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10692:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8486:4242":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:42714:6762":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4982:6006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8909:3216":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:2470:3268":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:242:7085":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40190:6734":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10691:19792":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:1583:6663":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13121:5152":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2951:12762":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12959:5118":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13879:5362":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9512:7111":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:8204:7270":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5935:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7519:6638":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4251:7321":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:2198:5450":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22247:3805":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10569:6568":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:7566:6447":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9023:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2341:7486":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12634:4965":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7543:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:41110:30971":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:6773:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11349:6772":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42234:3590":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40249:6740":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6129:7330":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:482:5466":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41752:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:3978:7544":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:355:7295":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11556:4751":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2681:2448":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:5034:3005":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6548:3075":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:12217:32562":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5976:3380":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4767:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:39877:6712":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2776:7678":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1924:7469":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7572:34574":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6788:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:636:4587":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4442:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9028:7099":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:911:2955":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:7687:7284":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:39964:7471":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:1561:2670":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1412:6661":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:22379:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5761:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4510:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:573:5517":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:43013:6693":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5963:6590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9866:7129":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6520:3434":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:1785:2818":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:2472:1856":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:4327:3318":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2674:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:9110:2684":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:632:7007":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11136:4670":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:6870:3550":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45825:4106":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:49622:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9576:3040":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9826:7126":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:41975:2687":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:9058:2445":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5817:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:554:7297":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13443:5233":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:49596:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:669:7234":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13763:5335":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2213:1866":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:1589:6664":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8950:7359":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7844:7021":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3275:2955":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:3630:2614":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11877:1389":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6593:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:3203:7312":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"0:84:1781":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"1:10825:2423":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11770:4811":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6097:3070":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6139:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"9:52:18628":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:2188:6672":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13249:5182":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:325:5456":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50931:6491":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:3087:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:1462:7253":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2839:12939":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:40116:6725":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:3300:5375":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4381:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6876:3297":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:20886:7682":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46215:4125":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8815:4245":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:4323:7322":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:8205:6826":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:541:5501":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12536:4951":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11319:4713":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:8953:4593":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10637:6828":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:11625:12792":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12345:4917":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13082:5143":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:4398:2598":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:5571:3291":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:8256:3620":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6321:7209":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3350:2997":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10993:2428":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:8360:19674":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11476:6842":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:1652:5625":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1534:5544":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5944:7172":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3055:7307":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:6441:2967":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:45523:4098":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7437:5386":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6061:18728":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4819:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11585:4762":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40200:6735":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6535:2947":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4521:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:9275:34584":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12923:5088":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43772:4055":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5243:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4963:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2815:3513":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8389:19675":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:5689:7328":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13181:5162":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7431:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5767:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11362:7318":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2800:12933":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22412:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:42966:6692":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5350:2421":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:119:13330":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:5060:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5015:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:3287:7519":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:9696:4598":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8828:7642":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8309:7604":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4726:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:7164:2455":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:10812:2838":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4740:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1715:2955":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11017:24371":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"0:81:1757":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"16:6717:6615":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:6721:12903":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"13:226:5446":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4409:7568":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7220:3776":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7190:3773":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2736:2594":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:4592:12862":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:2933:7096":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:2190:34556":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43477:6708":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3923:2997":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42718:6763":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:12461:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4953:5997":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:12269:7282":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12419:4928":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:44970:4074":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:3170:32668":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:45644:4102":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2728:2590":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"7:79:18603":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:7514:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:6538:2620":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:45355:4093":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9093:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:6999:4034":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:8142:7233":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:6369:7332":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:96:23524":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9959:6561":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4592:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:39353:28355":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:42976:7291":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:6289:2967":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:1947:7092":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:39813:6707":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:22115:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10257:7150":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:862:2975":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9138:7101":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7781:6824":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5705:6048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1980:4182":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:29860:7535":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13292:5190":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7757:6639":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1313:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11896:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11887:736":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8276:6494":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:44179:3699":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:751:2992":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4569:6308":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12006:4852":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4107:7565":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10635:4659":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9973:6562":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8796:4244":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13625:5296":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44192:6821":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:49609:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:40225:3523":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:857:2671":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13240:5181":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11878:1469":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2682:2587":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:738:6661":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6481:7637":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4540:3323":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2535:3057":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:10165:7277":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2141:585":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13499:5245":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:725:6660":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:31837:2431":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6767:3480":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:671:7084":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12576:4956":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:7118:12908":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1227:7243":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:1872:6665":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13219:5176":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2862:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:6035:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:49570:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:30089:3812":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12072:4860":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10761:19683":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41592:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4366:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1571:5567":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7836:7337":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:39858:12868":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10491:7164":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:47303:6486":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10923:6581":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13066:5140":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12019:4619":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9038:34581":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11891:1486":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4865:996":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:10127:6688":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:45325:4092":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:30119:30984":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13612:5290":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:22181:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6460:3290":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:4986:7323":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:861:7242":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7561:7554":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6534:7639":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:9559:3039":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:4069:27630":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:38959:3880":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4360:5741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:494:5471":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9566:7103":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:30177:30958":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43310:6776":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:20712:7554":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12194:4878":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4554:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6243:34578":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9796:4610":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4536:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:21734:30972":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9312:7104":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:20881:7554":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:43934:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:6092:7720":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:5847:3366":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5940:6678":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:11605:7271":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:5708:2992":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:1537:2997":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:779:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4529:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3585:5377":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2905:3286":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7061:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9188:34580":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40494:6750":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4840:7593":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:867:2614":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9734:7124":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:39851:6709":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10702:2433":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9443:7106":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6293:3420":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10672:6492":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5724:6589":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:4004:2967":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:3183:6665":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:1509:5534":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4414:5768":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8161:7532":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6566:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:8202:7609":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11653:4782":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:8774:2670":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11383:7319":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:7218:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11234:4685":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43210:6770":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:8628:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43581:6794":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3672:7317":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:30105:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4681:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4636:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5495:2424":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13667:5309":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11573:4759":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:632:2670":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4482:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10128:2436":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:1821:2827":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2786:3281":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10921:3086":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2967:18756":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:638:7300":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9946:6560":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5677:19612":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11832:4826":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:40177:6733":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8753:3212":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5032:3338":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:10015:6687":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4449:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:20912:7687":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:45195:4083":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11879:4832":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:8443:19677":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:2382:1855":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:8469:2670":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:4166:2997":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:609:7079":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5559:3063":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:45501:4097":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4324:2695":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7473:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:39166:7286":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4998:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7204:30983":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2910:2450":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13145:5157":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1617:5596":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13367:5211":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7634:7428":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1604:5589":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:9350:34586":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:491:6540":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:4510:3322":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:2720:3278":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12496:4948":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8254:6297":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8667:3208":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11471:4736":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10721:4665":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4873:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:501:2985":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43434:6783":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:1433:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3774:2967":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:21771:30975":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43039:6694":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11891:4834":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11600:4768":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7014:6675":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:11614:6550":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11069:19687":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:7263:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4504:5812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12358:4918":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:5234:12780":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:564:4575":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:8718:3211":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12372:4921":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:41181:4044":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:41712:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:41322:13004":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:21807:3800":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:777:2960":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12331:4916":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:676:7427":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:10932:3087":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5955:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:20753:7554":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:41792:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11893:785":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40500:6752":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9670:7121":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12224:4897":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4475:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:11372:6775":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6639:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50910:6490":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:6574:3007":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4387:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2914:2451":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4637:7568":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22214:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8216:7347":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:38990:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6328:7331":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8915:24376":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:6478:7022":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:20486:31517":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:0:2296":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9721:7123":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:1695:5651":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1044:18690":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:7580:7333":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13024:5128":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1062:7243":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7335:34577":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8224:7344":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:9265:7103":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:43907:6819":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2746:7677":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:45949:4120":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9088:7361":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4858:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4732:3061":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:113:23525":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:554:5507":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9322:34587":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4664:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:420:3165":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:45979:4121":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:8623:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12259:4908":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:42277:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:585:7423":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:40157:6731":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1866:6664":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43382:6780":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4943:5991":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11037:19686":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5041:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8459:4396":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7244:34575":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4602:5841":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:11153:7014":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:1704:5657":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:44150:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9424:4595":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:20636:7689":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:45471:4096":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:39997:3028":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11881:638":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6351:19616":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9148:34588":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:39078:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11227:6839":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:45024:4076":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6442:3432":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:361:7296":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"10:36:5452":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:562:5512":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2302:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2459:7554":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7588:7228":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4612:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2502:3269":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:3520:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:45377:4094":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:4845:3332":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8232:4224":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11889:1484":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6802:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:1628:2961":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:681:6544":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10743:7167":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:49583:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1572:2955":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8972:24373":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4804:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11391:4725":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4755:7552":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:20755:7683":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8475:6496":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10354:4650":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2911:33481":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:815:7236":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41195:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:41339:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:926:7235":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11299:4703":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46249:4126":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:6617:7331":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:42299:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1568:2992":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10857:19685":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9372:7335":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:3157:6662":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6694:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:55:3603":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:4969:3336":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2206:7305":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:11620:12793":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:4171:7320":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3968:7543":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42459:6756":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4559:7542":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:1431:7234":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:9112:2685":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12404:3050":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:387:34558":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4091:7563":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:7811:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:8072:6644":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2737:2595":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5962:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9033:4253":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:562:3247":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:3205:7313":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39100:7434":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11875:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:1783:2817":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:853:7241":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"14:165:18696":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5402:3208":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7509:3302":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:40069:6718":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12293:4911":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:4133:4381":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4786:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:1836:2614":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:41472:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11163:4672":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:4596:3325":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"7:0:1530":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:535:4362":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:9068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:953:7241":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44076:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5845:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40139:6729":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2805:12934":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11821:4823":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13506:5247":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:515:4571":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:39771:4015":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46185:4124":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"9:0:2290":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3453:2444":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:10216:25946":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8766:2430":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11483:6842":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:9356:12878":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9557:4605":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12646:4972":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"3:0:439":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:11628:4778":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:1658:1081":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1768:606":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21169:7709":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2827:12936":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22445:3806":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10440:7160":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5616:6583":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2821:3514":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2496:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:2339:1923":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:274:6655":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4432:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10766:7281":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4840:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6728:3467":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:21164:7686":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:39173:2695":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:5566:3064":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2742:3279":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5996:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12403:4927":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:679:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11872:1503":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13651:5305":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10712:19793":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6488:6600":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13721:5329":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4734:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:7450:3247":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:45214:4084":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12178:4873":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:42194:6462":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:8309:7271":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3934:7542":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:3266:7098":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:947:7239":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10402:7154":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2768:3508":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:46935:4161":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1453:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5811:3359":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10712:24380":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7103:4249":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8210:7567":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:9365:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9340:7105":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:43724:6801":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5858:6132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10580:6572":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:3356:12828":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:1403:6660":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:47143:4165":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:8195:19661":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10039:7143":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:646:2671":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:14:2111":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:20914:4385":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:31942:2597":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:45547:4099":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5054:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:9108:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12126:4868":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:45279:4086":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40007:7287":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:39903:4020":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:4102:7267":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:210:2965":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:474:5461":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:727:4591":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:43915:4058":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11641:4779":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7488:6636":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5886:3370":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13399:5222":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:5435:2423":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2546:3271":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13332:5200":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:43955:4061":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:6627:12911":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11721:4786":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3222:12761":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:9098:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10303:7153":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12388:4923":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:2355:7490":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:3752:2955":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:43058:6695":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4431:7569":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:8931:3218":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:21709:6455":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2844:12940":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:6593:3018":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:975:7089":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:39835:6708":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:353:2953":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:31877:6704":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11502:4745":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:643:7426":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:7655:6822":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7478:3301":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:688:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13135:5156":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1041:33541":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:11884:738":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10377:4651":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7683:3306":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10270:7151":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4399:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:917:7248":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:8156:3308":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2508:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2685:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:2886:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5071:3339":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:3185:12760":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1085:7246":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7449:7221":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:45094:4079":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:2168:33480":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43792:6810":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6327:6597":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7606:3085":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8114:6717":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:526:5492":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2635:4367":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:1978:7095":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:11600:12795":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5760:3065":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13477:5240":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43759:6806":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11044:4254":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:888:6661":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"15:180:18709":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:39934:30983":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7711:3569":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:43178:6688":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:7330:2955":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:5238:12781":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"14:40:4700":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8072:6493":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:98:6654":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:579:5520":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"10:44:5453":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:10347:3084":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:8203:7608":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9839:7127":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11005:2429":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7697:3296":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6124:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12915:5087":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11820:4268":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:9972:2827":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4780:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4881:5950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40239:6739":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7498:6637":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5643:6587":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2879:3285":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3368:7264":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:3533:2670":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:7216:2454":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:2080:7245":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:1534:7249":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6586:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5708:3349":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:2642:3275":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13857:5356":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11837:25579":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1611:2967":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:1747:4377":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:10234:7278":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10505:7165":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11883:741":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6735:3011":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:279:2456":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7635:3567":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10080:7148":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:1350:2670":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7529:3303":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:538:4573":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13233:5179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43566:6788":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:21573:4390":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:822:7441":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10304:2427":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:393:34560":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7798:4181":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1663:5633":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4571:6310":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:4400:3319":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21717:3788":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7252:25576":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"11:300:6658":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12607:4962":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13411:5225":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13344:5206":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:8420:19676":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:1577:6662":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11215:4267":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4810:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:39139:3886":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:547:5504":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13777:5337":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:45232:4085":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:532:5495":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:8283:19672":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:4913:2997":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4573:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4327:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8131:3216":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2931:18755":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4796:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8417:7620":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13159:5158":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12483:4947":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:3165:7311":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"9:174:18676":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43068:7294":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6376:3289":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"9:388:18611":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:9991:25947":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3225:5374":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4099:7564":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10649:6576":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8180:19625":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41246:2613":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11185:4264":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2741:7675":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:5484:3007":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:9228:34579":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:7461:7027":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8093:7499":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13015:5124":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11861:4831":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:6603:3019":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2862:3284":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:3151:12846":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7828:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:736:23534":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11993:4849":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5594:3293":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2053:6632":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:4175:2694":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2307:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:10206:6773":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4915:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10589:6573":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43443:6784":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10967:3241":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43264:6773":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9108:34585":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:1048:6632":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:1065:34557":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12307:4913":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:21333:31381":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"0:82:1767":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"17:12461:4936":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:41027:4025":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}