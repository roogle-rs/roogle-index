{"root":"0:0:2096","crate_version":"0.9.4","includes_private":false,"index":{"2:12997:1841":{"id":"2:12997:1841","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:27387":{"id":"2:13022:27387","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40215:27343","Self::is_ascii":"2:13021:25994"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40215:27343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1934":{"id":"0:32:1934","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:722":{"id":"0:57:722","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2282":{"id":"0:54:2282","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:1899":{"id":"0:78:1899","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:26162":{"id":"2:12910:26162","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:7591":{"id":"2:12927:7591","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44101:7560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:30959":{"id":"2:12930:30959","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12929:30949"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44408:7579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:1839":{"id":"2:12940:1839","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2282":{"id":"0:18:2282","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1876":{"id":"0:30:1876","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:333":{"id":"2:12909:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12910:26162","`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:26194":{"id":"2:12957:26194","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split":"2:12951:1835"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44143:7483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2380":{"id":"0:34:2380","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42366:8283-0:127:1872":{"id":"a:2:42366:8283-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42366:8283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12963:32992":{"id":"2:12963:32992","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12592:13714","str::split":"2:12951:1835","prim@char":"1:12072:453","str::split_terminator":"2:12960:32991"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44193:7566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32788:2626-0:127:1872":{"id":"a:2:32788:2626-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32788:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:27:1886":{"id":"0:27:1886","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","le","lt"],"trait":{"name":"PartialOrd","id":"2:2558:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:1143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2978:246-0:140:1873":{"id":"a:2:2978:246-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12987:32995":{"id":"2:12987:32995","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::match_indices":"2:12984:32994"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44293:7572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:25490":{"id":"2:13004:25490","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:2572":{"id":"2:12978:2572","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatches":"2:12981:32993"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44329:7574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:457":{"id":"0:103:457","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:26201":{"id":"2:13007:26201","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:25995":{"id":"2:13023:25995","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:93:1871":{"id":"b:2:2756-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:1969"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2456-0:93:1871":{"id":"b:2:2456-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13025:25990":{"id":"2:13025:25990","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32733:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2766-0:140:1873":{"id":"b:2:2766-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:1870":{"id":"0:75:1870","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1871","`Version::read()`":"0:6:1886","`Channel`":"0:127:1872","crate":"0:0:2096","`Channel::read()`":"0:27:1886","`Date::read()`":"0:42:1886","`Date`":"0:140:1873"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13029:33001":{"id":"2:13029:33001","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4771:33001"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44424:7504","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42367:8477-0:140:1873":{"id":"a:2:42367:8477-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42367:8477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5586:13844":{"id":"5:5586:13844","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:140:1873":{"id":"b:2:2760-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:16:2275":{"id":"0:16:2275","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32733:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3591-0:127:1872":{"id":"b:2:3591-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5858-0:140:1873":{"id":"b:5:5858-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5856:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5860:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12984:32994":{"id":"2:12984:32994","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12987:32995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44275:7571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:27390":{"id":"2:13026:27390","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2552:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:1892":{"id":"0:77:1892","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:26161":{"id":"2:12917:26161","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:30939":{"id":"2:12933:30939","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44417:7580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:32999":{"id":"2:13001:32999","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:26199":{"id":"2:12972:26199","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592:33699":{"id":"5:5592:33699","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:26158":{"id":"2:12911:26158","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:722":{"id":"0:144:722","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:26159":{"id":"2:12913:26159","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:127:1872":{"id":"b:2:2771-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32731:237-0:127:1872":{"id":"a:2:32731:237-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:2387":{"id":"0:36:2387","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:717-0:140:1873":{"id":"b:5:717-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:2842","5:720:2843","5:721:2844"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:93:1871":{"id":"0:93:1871","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:32731:237-0:93:1871","a:2:42366:8283-0:93:1871","a:2:2978:246-0:93:1871","a:2:32788:2626-0:93:1871","a:2:42367:8477-0:93:1871","b:2:2456-0:93:1871","b:2:2760-0:93:1871","b:2:2453-0:93:1871","b:2:3591-0:93:1871","b:2:2766-0:93:1871","b:2:2756-0:93:1871","b:2:2771-0:93:1871","b:5:5858-0:93:1871","b:5:717-0:93:1871","0:106","0:97","0:104","0:102","0:22","0:101","0:99","0:20","0:96"]}}},"2:12908:32987":{"id":"2:12908:32987","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:14:2267":{"id":"0:14:2267","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42367:8477-0:93:1871":{"id":"a:2:42367:8477-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42367:8477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12924:26190":{"id":"2:12924:26190","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12923:26189"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2267":{"id":"0:50:2267","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:749":{"id":"2:2762:749","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:93:1871":{"id":"b:2:2760-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12:2242":{"id":"0:12:2242","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2453-0:93:1871":{"id":"b:2:2453-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:2384":{"id":"0:35:2384","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:457":{"id":"0:152:457","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:26185":{"id":"2:12921:26185","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12923:26189","str::split_at_mut":"2:12922:26186"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:464":{"id":"0:156:464","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32788:2626-0:140:1873":{"id":"a:2:32788:2626-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32788:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:1884":{"id":"0:76:1884","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32731:237-0:93:1871":{"id":"a:2:32731:237-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:105:1143":{"id":"0:105:1143","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:32990":{"id":"2:12932:32990","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44389:7577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42367:8477-0:127:1872":{"id":"a:2:42367:8477-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42367:8477","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12900:2785":{"id":"2:12900:2785","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:26192":{"id":"2:12954:26192","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12408:7482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:1848":{"id":"2:12966:1848","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714","str::rsplitn":"2:12969:26197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44229:7568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:32996":{"id":"2:12992:32996","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:1915":{"id":"0:80:1915","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1825":{"id":"0:24:1825","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:127:1872"],"is_stripped":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1886","0:30:1876","0:32:1934","0:33:2376","0:34:2380","0:35:2384","0:36:2387"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:1923":{"id":"0:81:1923","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1886":{"id":"0:42:1886","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:26160":{"id":"2:12915:26160","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:1963":{"id":"2:12937:1963","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13032:33002":{"id":"2:13032:33002","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4769:33002"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44442:7503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2769:138":{"id":"2:2769:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:134:665":{"id":"0:134:665","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:32986":{"id":"2:12904:32986","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12902:32985"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:7581":{"id":"2:12926:7581","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44095:7559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2458:25423":{"id":"2:2458:25423","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:127:1872":{"id":"b:2:2456-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12901:32984":{"id":"2:12901:32984","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1143":{"id":"0:154:1143","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:32985":{"id":"2:12902:32985","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32733:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:464":{"id":"0:107:464","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42366:8283-0:140:1873":{"id":"a:2:42366:8283-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42366:8283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12907:25530":{"id":"2:12907:25530","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12140:1862"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2775:1625":{"id":"2:2775:1625","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:665":{"id":"0:147:665","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2096":{"id":"0:0:2096","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1871","`is_max_version`":"0:80:1915","`is_exact_version`":"0:81:1923","`is_max_date`":"0:77:1892","`is_exact_date`":"0:78:1899","`triple()`":"0:75:1870","`Date`":"0:140:1873","`Channel`":"0:127:1872"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1870","0:76:1884","0:77:1892","0:78:1899","0:79:1907","0:80:1915","0:81:1923","0:82:1933","0:84:1947","0:60-0:3:1717","0:61-0:24:1825","0:62-0:39:1826"],"is_stripped":false}}},"2:12951:1835":{"id":"2:12951:1835","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split_whitespace":"2:12929:30949","str::rsplit":"2:12957:26194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44125:7479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:879":{"id":"2:12899:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:722":{"id":"0:38:722","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:32993":{"id":"2:12981:32993","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12592:13714","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::matches":"2:12978:2572"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44347:7575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2453-0:127:1872":{"id":"b:2:2453-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12994:32997":{"id":"2:12994:32997","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:138":{"id":"2:2774:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32661:2606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13024:25991":{"id":"2:13024:25991","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:32998":{"id":"2:12998:32998","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12617:13711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:27392":{"id":"2:13028:27392","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:33698":{"id":"5:5589:33698","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:33700":{"id":"5:5600:33700","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:93:1871":{"id":"b:2:2771-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:717-0:93:1871":{"id":"b:5:717-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:2842","5:720:2843","5:721:2844"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42366:8283-0:93:1871":{"id":"a:2:42366:8283-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42366:8283","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3593:1640":{"id":"2:3593:1640","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40029:5014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:127:1872":{"id":"b:2:2760-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3591-0:140:1873":{"id":"b:2:3591-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2771-0:140:1873":{"id":"b:2:2771-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32731:237-0:140:1873":{"id":"a:2:32731:237-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:39:1826":{"id":"0:39:1826","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:140:1873"],"is_stripped":true}}},"a:2:2978:246-0:93:1871":{"id":"a:2:2978:246-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:457":{"id":"0:139:457","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1876":{"id":"0:45:1876","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1717":{"id":"0:60-0:3:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1717","glob":true}}},"a:2:2978:246-0:127:1872":{"id":"a:2:2978:246-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:2376":{"id":"0:33:2376","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:127:1872":{"id":"b:2:2756-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:1969"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13010:33000":{"id":"2:13010:33000","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:32988":{"id":"2:12919:32988","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1545","str::slice_mut_unchecked":"2:12920:32989","crate::ops::Index":"2:39861:8310"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3591-0:93:1871":{"id":"b:2:3591-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3:1717":{"id":"0:3:1717","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1871"],"is_stripped":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2766-0:93:1871":{"id":"b:2:2766-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:665":{"id":"0:98:665","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:4396":{"id":"2:12928:4396","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44111:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:25993":{"id":"5:5603:25993","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13024:25991"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:32989":{"id":"2:12920:32989","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1545","crate::ops::IndexMut":"2:3253:8311","str::slice_unchecked":"2:12919:32988"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2759:1969":{"id":"2:2759:1969","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:26197":{"id":"2:12969:26197","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12966:1848","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44247:7569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2455:2558":{"id":"2:2455:2558","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:717-0:127:1872":{"id":"b:5:717-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:2842","5:720:2843","5:721:2844"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2552:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2766-0:127:1872":{"id":"b:2:2766-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:1907":{"id":"0:79:1907","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:719:2842":{"id":"5:719:2842","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12923:26189":{"id":"2:12923:26189","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12924:26190"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:1831":{"id":"2:12931:1831","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44379:7576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:33701":{"id":"5:5601:33701","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2630","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2630","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2453-0:140:1873":{"id":"b:2:2453-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2413":{"id":"0:48:2413","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:1826":{"id":"0:62-0:39:1826","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1826","glob":true}}},"5:5604:25992":{"id":"5:5604:25992","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13025:25990"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:140:1873":{"id":"b:2:2456-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2756-0:140:1873":{"id":"b:2:2756-0:140:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:1969"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:720:2843":{"id":"5:720:2843","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13:2254":{"id":"0:13:2254","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1947":{"id":"0:84:1947","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1933"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61-0:24:1825":{"id":"0:61-0:24:1825","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1825","glob":true}}},"0:82:1933":{"id":"0:82:1933","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5858-0:93:1871":{"id":"b:5:5858-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5856:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5860:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1886","0:9:1876","0:12:2242","0:13:2254","0:14:2267","0:16:2275","0:18:2282"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12922:26186":{"id":"2:12922:26186","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12921:26185","str::split_at_mut_checked":"2:12924:26190"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:721:2844":{"id":"5:721:2844","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:30949":{"id":"2:12929:30949","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12930:30959"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44399:7578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:2784":{"id":"2:12947:2784","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:26200":{"id":"2:12975:26200","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1876":{"id":"0:9:1876","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","le","lt"],"trait":{"name":"PartialOrd","id":"2:2558:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:722":{"id":"0:21:722","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:722":{"id":"0:131:722","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:2822":{"id":"2:12943:2822","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:1844":{"id":"2:13013:1844","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:1842":{"id":"2:13016:1842","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:13712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:1876":{"id":"2:13019:1876","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12553:137","`FromStr`":"2:12552:8488"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12552:8488","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12552:8488","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5858-0:127:1872":{"id":"b:5:5858-0:127:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5856:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5860:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13021:25994":{"id":"2:13021:25994","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:8275":{"id":"2:13031:8275","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4772:8275"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44433:7500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1872":{"id":"0:127:1872","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:32731:237-0:127:1872","a:2:42366:8283-0:127:1872","a:2:2978:246-0:127:1872","a:2:32788:2626-0:127:1872","a:2:42367:8477-0:127:1872","b:2:2456-0:127:1872","b:2:2760-0:127:1872","b:2:2453-0:127:1872","b:2:3591-0:127:1872","b:2:2766-0:127:1872","b:2:2756-0:127:1872","b:2:2771-0:127:1872","b:5:5858-0:127:1872","b:5:717-0:127:1872","0:138","0:135","0:132","0:130","0:37","0:133","0:137"]}}},"2:12990:1834":{"id":"2:12990:1834","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898":{"id":"2:12898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12899:879","2:12900:2785","2:12901:32984","2:12902:32985","2:12904:32986","2:12907:25530","2:12908:32987","2:12909:333","2:12910:26162","2:12911:26158","2:12913:26159","2:12915:26160","2:12917:26161","2:12919:32988","2:12920:32989","2:12921:26185","2:12922:26186","2:12923:26189","2:12924:26190","2:12926:7581","2:12927:7591","2:12928:4396","2:12929:30949","2:12930:30959","2:12931:1831","2:12932:32990","2:12933:30939","2:12934:2359","2:12937:1963","2:12940:1839","2:12943:2822","2:12947:2784","2:12951:1835","2:12954:26192","2:12957:26194","2:12960:32991","2:12963:32992","2:12966:1848","2:12969:26197","2:12972:26199","2:12975:26200","2:12978:2572","2:12981:32993","2:12984:32994","2:12987:32995","2:12990:1834","2:12992:32996","2:12994:32997","2:12996:1843","2:12997:1841","2:12998:32998","2:13001:32999","2:13004:25490","2:13007:26201","2:13010:33000","2:13013:1844","2:13016:1842","2:13019:1876","2:13021:25994","2:13022:27387","2:13023:25995","2:13024:25991","2:13025:25990","2:13026:27390","2:13027:27391","2:13028:27392","2:13029:33001","2:13031:8275","2:13032:33002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5602:8383":{"id":"5:5602:8383","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:722":{"id":"0:23:722","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:1873":{"id":"0:140:1873","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:32731:237-0:140:1873","a:2:42366:8283-0:140:1873","a:2:2978:246-0:140:1873","a:2:32788:2626-0:140:1873","a:2:42367:8477-0:140:1873","b:2:2456-0:140:1873","b:2:2760-0:140:1873","b:2:2453-0:140:1873","b:2:3591-0:140:1873","b:2:2766-0:140:1873","b:2:2756-0:140:1873","b:2:2771-0:140:1873","b:5:5858-0:140:1873","b:5:717-0:140:1873","0:151","0:145","0:148","0:56","0:150","0:143","0:146","0:153","0:155"]}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:33697","5:5586:13844","5:5589:33698","5:5592:33699","5:5600:33700","5:5601:33701","5:5602:8383","5:5603:25993","5:5604:25992"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6:1886":{"id":"0:6:1886","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2770:1627":{"id":"2:2770:1627","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5860:1602":{"id":"5:5860:1602","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32788:2626-0:93:1871":{"id":"a:2:32788:2626-0:93:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32788:2626","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:140:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1886","0:45:1876","0:48:2413","0:50:2267","0:52:2275","0:54:2282"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12960:32991":{"id":"2:12960:32991","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12592:13714","str::split":"2:12951:1835","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7973:131","str::rsplit_terminator":"2:12963:32992"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44175:7565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:33697":{"id":"5:5585:33697","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2630","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2630","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:1843":{"id":"2:12996:1843","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2275":{"id":"0:52:2275","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:2359":{"id":"2:12934:2359","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:13714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:27391":{"id":"2:13027:27391","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35330"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:4409:2876":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6417:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12264:7974":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44849:7610":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:1590:7450":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3056:13677":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:14051:5472":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5361:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44193:7566":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:4065:3570":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4392:8144":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7491:4181":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12768:21190":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6664:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"0:75:1870":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"1:914:8053":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:3993:3927":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44861:7613":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1887:3016":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:39952:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:4215:8088":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12089:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:4822:722":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:5238:3951":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11293:21240":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:2399:3875":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43466:7551":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:2569:4390":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:351:34401":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:32820:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4017:8407":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:12087:802":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5020:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:4137:2849":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6201:3897":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1680:6354":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:16121:6039":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:7645:7813":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15039:5746":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:40828:8325":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44399:7578":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43482:7554":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46470:4705":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:10447:8137":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:42985:2869":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14752:5602":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:40934:7515":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:4733:3940":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6505:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:42291:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14436:5555":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13325:5328":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41464:7546":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12454:7366":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:844:8295":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2489:3879":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10001:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10441:8133":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:3221:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"14:160:7803":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:774:7448":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11042:7915":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:8012:7439":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:513:7894":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:4550:3613":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:7113:3664":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44433:7500":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:123:3534":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6532:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10689:4865":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:40846:3615":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40772:4631":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:5390:3547":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1063:8063":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7684:7428":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:5181:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:48344:7240":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:8864:2602":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11142:5213":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1547:6264":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4312:8143":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:8097:4234":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"15:288:20230":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5568:7375":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45055:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5617:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:4661:2879":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"14:187:20218":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12724:21211":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7984:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8285:3816":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8377:8166":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:32788:2626":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:22537:8624":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:8954:4856":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13946:5457":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11124:7569":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3020:7211":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:42367:8477":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:9685:31563":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:4250:13675":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9122:4863":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42020:4638":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40995:7525":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:21574:8545":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:10827:2848":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15383:5832":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:45047:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4937:3947":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:46115:4687":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:8300:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"14:202:13727":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:12044:8282":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:4489:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:680:7320":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11547:3750":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10090:8185":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2883:20277":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2657:3644":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10915:34431":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4909:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"10:44:6151":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5390:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6880:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5825:3988":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11715:7346":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6524:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:945:8060":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7984:8052":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5336:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:5846:7991":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:177:20190":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5006:3949":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:3214:2627":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7392:3559":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:4986:7906":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:1923:7453":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:15521:5892":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42513:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:45134:4679":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6042:3585":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:42385:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:6151:1872":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6275:8153":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:3424:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:2693:7826":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11730:7347":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:8265:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:6811:21144":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3317:8136":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:48410:7246":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4916:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15957:5983":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5219:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:32789:2770":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6915:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4787:3942":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13814:5439":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:21744:8354":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15655:5919":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"0:81:1923":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"17:13553:5376":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3190:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6254:4039":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15222:5789":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12659:7982":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11341:7929":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45157:7616":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:1824:2999":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11858:3682":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:22782:4405":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:22394:8632":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15281:5802":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:40746:7507":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10494:3633":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:11026:21222":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:10031:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41231:7539":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14489:5559":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7616:3804":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5031:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5601:21137":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3773:3924":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44071:4659":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11358:2614":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4825:8426":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11095:4864":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:8564:8487":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14212:5516":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5250:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:11637:8104":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:7480:13827":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:507:5176":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40042:7220":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42450:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3399:8379":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5436:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:36582:4128":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"0:79:1907":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"2:46137:4688":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4550:8437":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:2542:6145":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6215:8028":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:12294:7562":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43706:7237":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:5699:3588":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:10462:3627":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14912:5726":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:11110:7568":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:735:25395":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1883:2848":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6292:4042":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:9690:32334":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:6954:3601":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:40693:4630":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6441:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7546:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5472:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5415:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:916:3555":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:661:7812":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2733:8132":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:41489:7221":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9755:21185":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:44143:7483":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:2326:8062":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:16093:6032":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:6376:7388":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7932:7435":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:893:3570":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10700:7252":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:9503:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6152:4030":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:7584:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:523:6193":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11214:7923":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:40727:13780":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:2422:2089":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:7362:2789":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10710:7910":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12671:7983":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:13397:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:40627:7500":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14414:5544":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:7467:29554":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12443:5269":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:1968:8321":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:14575:5266":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11385:4875":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6646:4094":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:8317:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15836:5965":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3589:2619":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2268:8131":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9472:3670":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:48288:4778":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43963:8116":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:14977:5736":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3504:2023":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:12023:4879":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:34050:13856":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6268:3899":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15931:5293":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"18:623:34442":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:933:2848":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46377:4698":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:9982:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:41013:7527":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12251:7973":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3464:13679":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11799:7950":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"0:76:1884":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"1:4572:8438":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:597:3804":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5244:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2983:2764":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13173:5292":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13485:5357":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3832:2789":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11399:4876":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2769:3892":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:4011:8408":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:30905:4424":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:867:7448":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6636:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40953:7518":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7889:6090":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:4781:8464":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7118:4657":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6895:7416":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40816:4633":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5236:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8291:7479":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9235:25526":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43721:7557":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11367:5206":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6756:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:6678:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6331:4046":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14325:5529":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12189:7968":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:811:3590":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:7366:3912":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12150:5259":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48142:4775":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5827:8148":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8090:8382":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4837:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12175:7964":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:1455:2848":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:1621:6318":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:4605:3614":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:15:2283":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13235:5308":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3039:4122":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6746:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12085:800":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:10350:3815":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:6921:3588":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:10285:8357":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11670:8105":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:45034:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:41047:7530":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:485:6169":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22448:8633":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11102:7920":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"0:84:1947":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"17:11557:7938":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:0:2470":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2709:3889":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:1470:2849":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12213:7970":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42788:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15456:5848":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:581:2758":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:16032:5311":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:8394:2851":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:8351:7209":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15445:5847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8894:2604":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7653:4191":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6811:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8428:7254":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:13199:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10218:3811":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13211:5307":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6099:8013":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:10479:3628":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:1181:34126":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10044:21209":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:4283:3928":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:42170:4651":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:4784:8437":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15102:5760":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7114:3609":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:7402:4388":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5046:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5671:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10666:7624":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:1809:662":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2353:639":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22183:8354":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:8306:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"9:423:20125":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15010:5738":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14356:5535":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2439:3877":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:4821:8423":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:42747:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:7485:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6944:3600":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:7944:2629":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46616:4709":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:2509:3880":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:5834:8151":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22900:4418":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:6052:3656":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:7802:8280":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6677:8506":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:10996:8100":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3234:30507":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46340:4696":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10672:8354":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7330:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:403:7893":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:3262:7452":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:718:5196":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:670:7890":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11841:7957":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:46169:4689":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7461:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7364:13835":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4996:8463":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:0:1537":{"crate_id":1,"path":["std"],"kind":"module"},"16:5580:3902":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:6379:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3783:4793":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:46867:4717":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5536:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11788:7949":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:437:3758":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15734:5940":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:0:2460":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:41441:7543":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14079:5476":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13568:5382":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7103:34426":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:16050:5321":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12089:5256":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8080:8160":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5555:7989":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5370:6626":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:261:7892":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:34360:13858":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:7894:13833":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47048:4732":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:33873:8538":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:3051:13676":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"11:2352:8063":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:465:6159":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47750:4771":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:517:6190":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:39817:13681":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:10935:3673":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:491:6170":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10041:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43259:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:3275:32740":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13899:5451":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11424:7635":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:44379:7576":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"7:31:20109":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11290:4366":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11688:7344":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:11714:13708":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:15400:5836":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:4297:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22807:7217":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12707:7986":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:7516:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:2304:7420":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:1717:3576":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11153:7911":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1536:8053":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:434:34404":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11558:8141":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:856:8058":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:1925:7214":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:481:20122":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9213:8182":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6803:8029":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12851:7368":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3589:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"18:659:7886":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8385:4835":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11621:7338":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7572:31070":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7412:32752":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:10876:7479":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14587:5573":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:10851:2849":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10647:8194":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:13959:5460":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1161:34184":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9299:3015":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:3264:7902":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:8197:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:7575:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:4261:8435":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:15168:5776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:1072:7811":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:30958:2857":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:3473:7903":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:1098:7895":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10738:29877":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:44101:7560":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5645:7377":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44719:7601":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:7704:3590":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10137:21186":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5528:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9196:7623":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:939:8058":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12094:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44408:7579":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:3406:6073":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:47330:4737":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"13:0:2459":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3741:3923":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7376:7426":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14599:5580":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15356:5825":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3749:8394":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:48478:7250":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3698:3570":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13424:5344":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10905:7913":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:22924:8406":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6858:4106":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:41479:3623":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:7931:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:39992:8288":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:8294:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5352:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12516:7977":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12792:3772":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11634:7340":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:13248:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:48002:4773":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14260:5521":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:1051:8063":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4811:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11269:21239":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:6691:3661":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:859:2789":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:1160:7811":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:38458:13860":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13116:5280":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5462:2594":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:38513:13861":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10251:3812":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:820:3550":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15701:5933":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12092:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11077:4668":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:3811:8140":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:44647:7595":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11853:7958":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14025:5468":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7194:34428":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:9102:25430":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:637:8124":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:725:8354":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:22815:4406":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7482:8048":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13344:5333":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14131:5481":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11419:5213":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2529:3881":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:33208:4121":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:102:7442":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:31026:31029":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:16249:6067":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13509:5359":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6435:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13497:5358":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8604:5027":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:4674:3938":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:46646:4710":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:2562:6148":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:299:7443":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4824:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3356:8138":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:7359:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:4:1122":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:14311:5526":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15434:5843":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8881:2603":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15769:5953":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12572:5213":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12127:5258":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5557:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:6063:14168":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12107:5213":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12342:7356":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13538:5370":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46424:4699":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11313:7336":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:46199:4690":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3436:13754":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:6621:7828":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:4456:3576":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12422:7364":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13292:5322":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10155:3807":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6737:6078":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10982:21221":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5283:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:5434:13699":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4787:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13581:5386":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5314:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6729:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:5483:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6698:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:12039:29555":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:8026:2628":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3814:8141":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:608:7885":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:42866:8098":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6409:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2859:3896":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9671:21188":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"9:329:6154":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10156:2612":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:45096:4676":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8400:13831":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14386:5538":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:6402:8635":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:42827:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:7517:4390":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:16138:6041":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:6788:34424":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5260:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1581:3570":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:10682:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9089:4860":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:6979:3663":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5581:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5598:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12597:5276":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:12592:13714":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:12408:7482":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13437:5345":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10247:29523":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:10855:2598":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:6426:7468":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:40912:7512":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4119:8414":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:557:8123":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3501:13682":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11354:7930":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12362:7361":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6692:4097":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5581:2598":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10018:21189":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6892:8539":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:12606:7326":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5298:21136":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6491:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43214:2857":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:42552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47394:4739":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:635:5195":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14516:5563":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5515:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:9467:8157":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:2121:7216":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:787:7449":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:44841:7608":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11112:4872":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"14:165:20211":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:38623:13863":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14111:5480":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42204:4652":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10035:2860":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6745:3907":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"9:237:7233":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12289:5261":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44891:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40029:5014":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5052:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2284:20250":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:7426:2789":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:7898:13832":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46069:4685":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6188:4034":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7587:4394":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6721:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:4123:8415":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13999:5465":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:39781:2853":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3224:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6629:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:21753:8542":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5038:3950":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8082:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:1841:1196":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:14298:5525":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14994:3861":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2459:3878":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:357:8121":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11510:7935":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5499:3901":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:15197:5784":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7370:7465":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:8391:2850":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10573:34436":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47544:4740":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"13:226:6143":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10997:5203":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4702:3939":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:1911:13881":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2971:2763":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:9076:8179":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:4649:3937":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8478:4847":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3430:13755":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40704:7503":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5277:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12077:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"0:82:1933":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"16:6408:4048":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4718:7071":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:5861:8152":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11654:7638":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:482:3640":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11497:7934":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11166:5208":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9017:4859":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:3600:3707":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21755:5020":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6141:34425":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:9181:8096":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7400:3914":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10092:21210":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46714:4713":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6609:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1686:6357":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5174:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:536:4996":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9041:8174":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:8282:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46239:4692":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42325:4657":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12090:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:1910:7451":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7225:21146":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:3270:7450":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11413:4878":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13774:5431":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:1007:7420":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3561:2621":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:2498:20200":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:5713:3970":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13046:3857":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9178:4864":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1517:7449":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7998:3918":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:4823:8425":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8358:7622":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:39865:4493":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44055:8119":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7720:3594":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6077:7998":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:7710:3651":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12584:7911":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:6768:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:7561:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:39877:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2319:3865":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15206:5785":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2588:2022":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12508:5274":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10870:25500":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:45118:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14723:5582":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6669:4096":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10534:34430":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1559:6272":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:22913:4419":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:47284:4736":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:7258:2795":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:4486:7815":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:12095:1704":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4203:8087":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:4706:8412":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5643:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3916:8142":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10622:34435":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4464:8145":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14091:5477":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8923:8171":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:5883:7466":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:446:20123":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7971:8049":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"15:327:20235":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10887:2605":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4987:8462":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:42630:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11430:7636":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15418:5840":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14545:5566":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:2419:3876":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:8931:2789":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:46692:4712":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:5097:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"9:0:2462":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:3010:3702":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42964:2860":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:12464:21334":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:33394:4118":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:40876:2607":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12201:7969":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5726:3971":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:515:5179":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15799:5958":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:726:8396":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:7635:4398":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:33991:13854":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11743:7348":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:3237:29327":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6562:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:39914:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5191:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15944:5307":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:42064:7223":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:39861:8310":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1663:6347":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:7938:7252":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7822:3019":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:7611:3586":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15760:5949":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13594:5387":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:3236:7451":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15410:5839":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11075:5206":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13455:5353":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15333:5817":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:14038:5470":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14788:5633":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14246:5519":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12238:7972":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41004:7526":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:15748:5947":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:12140:1862":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15778:5955":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:645:8277":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:10026:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:15092:5759":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5083:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6116:8017":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:564:6215":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:3652:2849":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5878:3992":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10382:3671":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:44865:7614":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40683:7502":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:3240:29338":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:396:3538":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:12597:8096":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2438:8344":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:598:34445":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:45088:4674":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12485:21335":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13412:5343":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2440:8345":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8236:2608":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:1593:6293":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15214:5787":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13308:5326":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:1496:6236":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:44541:7589":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11128:3797":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4634:2772":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:7650:4164":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8085:8161":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:256:7891":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:41057:7531":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5296:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5445:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7335:3911":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11773:3831":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:4481:7814":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10242:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"0:77:1892":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"5:7528:8294":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:586:6227":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43243:4204":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:33580:13853":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6941:21145":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4876:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10439:5201":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:22851:31036":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15426:5842":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4968:3948":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:588:8274":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15569:5893":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:2093:8075":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44709:7597":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:2423:2789":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7429:34423":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:46522:4707":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:7467:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14235:5517":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:44732:4665":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5346:6075":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11764:7351":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6542:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3013:2766":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:44347:7575":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1574:2848":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:15058:5747":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:22728:4399":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:2641:3886":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:5200:3585":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"9:501:4369":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:48501:7251":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10847:3020":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"14:220:6096":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:12823:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:3863:3590":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7414:6085":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:689:7323":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6849:8030":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5122:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4462:3932":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2279:34222":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:8461:8473":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:698:7324":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7355:7425":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:12370:7573":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4965:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7537:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11567:7939":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4885:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41082:4137":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6763:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:7996:8159":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:7731:4785":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"14:7:7803":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:12354:7570":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:22893:7496":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:4545:3935":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:3856:3926":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4131:8417":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:21572:8354":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11405:7932":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:8055:4165":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:44837:7607":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:48250:4777":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1526:8066":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:42004:4636":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:43725:7558":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4355:3929":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13387:5338":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40883:7487":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14284:5524":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:3830:3925":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:13435:7491":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:1567:8074":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13064:3860":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11495:3678":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11256:7334":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:40753:13781":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11227:7924":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7951:7438":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:32732:2625":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41066:7532":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:42182:7621":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:44389:7577":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14503:5562":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7270:4001":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13738:5423":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7774:3672":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:521:25397":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9069:8178":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:673:2848":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:710:8053":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4891:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44620:7594":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:0:2464":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:10339:2602":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:9830:2858":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:14449:5556":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5163:8146":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21384:31543":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6882:7413":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:2197:7456":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7152:4146":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5466:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5134:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6447:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:8271:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40215:27343":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2276:2032":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:9048:25498":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13252:5311":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3028:34191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2375:3874":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1585:6288":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7619:21148":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44915:4671":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10887:34434":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:7324:7421":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5677:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:5720:7617":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2748:5001":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14876:5696":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4871:3945":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46836:4716":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:4813:3943":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:12331:7567":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15720:5938":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10720:34432":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:7754:4786":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8298:7576":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8315:8392":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:4879:3648":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4979:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:2469:3590":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:40963:7519":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:32697:8109":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:1508:7448":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5146:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6471:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8620:7256":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:849:2849":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3218:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:21416:31558":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8310:8168":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15473:5855":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:8022:21150":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:5997:7467":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:2536:6144":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:2175:21267":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12278:7975":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8526:7233":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1485:6231":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8215:4164":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:16235:6066":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"14:31:7803":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43474:7553":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:328:7446":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:5132:8146":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43513:7555":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40801:31070":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2617:3885":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1582:8067":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:30937:7218":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:42300:2848":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44111:3816":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12043:7961":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:2234:7901":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4800:6385":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:41241:7540":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:16269:5343":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:12093:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4109:8413":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10399:3816":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11595:5219":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:5541:7371":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10919:7482":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12683:7984":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:1025:8062":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:41255:7541":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4075:8412":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1486:2789":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13797:5436":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5200:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:34706:4127":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10729:2608":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44329:7574":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12808:3845":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:6600:3547":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13753:5427":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:16198:6057":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2553:3882":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:14475:5558":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11537:7937":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3315:8135":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:44750:7605":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:44175:7565":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:21627:8541":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:26357:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:7987:7620":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:8012:4793":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1535:6255":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10524:7907":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:909:8066":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5382:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:2151:8063":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6610:4081":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:22542:8622":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:42591:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44035:8118":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:7089:3606":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46270:4693":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:8328:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41034:7529":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:40712:7500":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22866:31031":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"0:78:1899":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"16:6965:4860":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10284:3813":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:21646:5020":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:10487:3672":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:1346:7811":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:4095:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:363:8122":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6394:7396":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44275:7571":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8981:8508":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6422:3532":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:13273:8106":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39972:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15616:5911":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4985:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1653:6341":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10769:34433":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"15:306:20231":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:7452:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11647:7341":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7314:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12030:7960":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:4335:8089":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:4227:3576":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"9:356:20138":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"15:394:20241":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10419:3818":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:538:5181":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11352:7632":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15463:5850":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5329:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:42978:2868":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10088:8186":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2979:3919":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43491:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:32708:8110":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:1526:6249":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:880:7449":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3409:13865":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15376:5831":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21372:31543":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:533:3641":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5423:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5039:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:217:3545":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:46738:4714":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40022:8111":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:45037:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"0:80:1915":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"2:7935:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40943:7516":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:14066:5475":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7382:3570":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7595:3904":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:951:8061":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:48540:4780":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2665:3887":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10069:3009":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"14:40:5308":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7345:7424":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:44095:7559":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9916:21206":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5344:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:1301:7420":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7444:8047":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:10290:5019":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6227:3638":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:12055:25527":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:706:7326":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6547:3660":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5649:2599":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3449:31536":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6579:21143":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42308:2849":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40856:8112":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:13415:3638":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:44045:7489":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7446:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:39892:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:7559:4391":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:9070:8095":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:559:6213":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:1811:5010":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2859:8086":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:3570:30891":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2729:3890":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4720:7073":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:44125:7479":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:12108:13932":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13785:5434":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1332:8062":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8996:8510":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:2336:3867":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15078:5755":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5865:7378":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:16212:6061":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:44417:7580":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12695:7985":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6929:7419":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4716:7069":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:43874:8114":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1975:709":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:44698:13726":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3419:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12543:7980":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12900:3848":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2995:20279":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11661:7638":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14560:5570":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:48448:7248":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"11:2369:8071":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8937:4855":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4248:8434":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6362:3917":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:2443:3570":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5002:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15023:5743":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"10:36:6150":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46322:4695":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15176:5779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10317:3814":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:15249:5793":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:31131:31017":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11392:7931":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"8:0:2461":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12225:7971":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:504:3567":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:9030:8172":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2819:3894":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5630:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:15635:5916":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:44873:4668":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5565:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:32818:2769":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13015:5266":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:38568:13862":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5616:3957":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:7470:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:31480:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44845:7609":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1054:3547":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4047:8409":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:1885:3015":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2573:3883":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8406:7058":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:765:25396":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:16079:6028":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:928:8295":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15301:5809":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7412:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12824:21212":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13766:5429":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:12073:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:4126:3576":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2688:13785":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44026:7488":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:32715:2877":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:10444:8135":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15266:5800":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11242:7925":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1896:3590":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15582:5899":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:2037:7897":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46221:4691":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:1603:8068":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:47360:4738":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:3798:8075":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8363:8436":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:491:7316":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4942:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:25:662":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:9081:8180":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:32661:2606":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1040:7420":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11812:7953":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:22408:13871":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:8259:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:6511:8154":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:31507:2758":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11138:8102":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6738:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:4232:8432":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46668:4711":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22073:31550":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:47206:4735":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14271:5522":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:16105:6034":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11898:5222":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:46359:4697":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48425:7247":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12408:5265":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5306:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43934:7485":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9781:21203":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6348:3900":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40644:4626":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14402:5542":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1723:6370":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9938:21207":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:22185:8543":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7926:8157":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:42433:2849":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:47892:4772":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40720:7504":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4433:3931":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42377:2852":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13272:5321":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:44424:7504":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44853:7611":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42148:31030":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2079:4793":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:22271:8627":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:7948:4792":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:48080:4774":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:41448:7544":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7565:4183":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:2355:3873":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:22:736":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:13525:8296":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11579:8142":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3061:13678":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:6462:21142":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8224:7253":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:800:3570":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11674:7343":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:10396:3625":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:3732:3547":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:5438:13700":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:621:7822":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13877:5450":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:479:6167":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6775:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:43503:7233":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13146:5284":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:21625:8354":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14933:5731":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11089:7919":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1939:7823":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22622:5022":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:48373:7243":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:48326:4779":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:6167:3576":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:1066:20204":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13972:5227":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5546:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6714:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:10661:7909":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:22508:8623":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14177:5505":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21633:8544":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:5050:3576":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:742:8054":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44442:7503":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40655:31050":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4992:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6478:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11045:2603":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6900:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7348:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:497:6173":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3522:2609":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40903:8113":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9807:21193":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:80:25384":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12530:7979":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:22675:5024":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4952:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:42971:2861":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:48463:7249":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13922:5456":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3273:8133":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1699:6361":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:44572:7593":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11755:7350":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5696:3965":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:46025:4683":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2140:8062":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7602:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3296:7453":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7627:7833":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15126:5762":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:7543:3580":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1510:6241":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:8006:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4971:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5521:3903":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11524:7936":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5624:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"11:364:3536":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:46045:4684":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"0:0:2096":{"crate_id":0,"path":["version_check"],"kind":"module"},"2:22743:7492":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4897:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:16151:6047":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:4240:8433":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:32701:4165":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"14:214:7440":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:44229:7568":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:8438:31566":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7537:3916":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:113:25386":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:1891:3570":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:700:2789":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13375:5337":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14968:5732":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:96:25385":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:1578:2789":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13855:5443":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5477:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43231:31058":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7706:21149":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:1547:8054":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14986:5737":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22031:8354":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:5959:20249":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:7931:7618":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10818:7911":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7442:4389":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12887:7369":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40670:4629":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44869:7615":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5713:3656":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:754:7333":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:640:8126":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"9:52:20141":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7609:7427":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7914:7432":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14463:5557":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7306:8040":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:4227:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:6615:7474":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14847:5685":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12478:5270":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5636:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:430:34409":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:1820:3590":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:7070:7831":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10671:7626":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:12071:1041":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22061:5021":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6621:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1517:6244":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:860:3553":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:21401:31552":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5331:3808":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:4821:7905":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:42368:13924":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8004:7827":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:5926:3570":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5112:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9964:4648":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"17:3597:7904":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1639:6330":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13844:5442":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:30681:8395":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:12086:801":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:43925:7484":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1602:7452":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:578:6223":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:15624:5912":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:875:8060":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:1903:7450":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10946:3674":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4932:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41470:7547":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15273:5801":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:2450:8350":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6134:8025":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14012:5467":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6519:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6030:7380":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:6706:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:10068:21192":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7730:8354":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:7366:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8631:4853":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:32731:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:40972:7521":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:30969:31033":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11574:7454":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:22406:30985":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:2226:7458":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:5512:2597":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:532:6199":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:44684:7596":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:1934:5011":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4870:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4924:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5794:3982":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2424:8340":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:1207:7896":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:12084:803":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5102:6535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7294:6083":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3545:6074":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:4210:29200":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:2517:5003":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12079:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:1671:6348":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43943:8115":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7921:3751":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6460:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41982:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:6554:3570":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:3709:3922":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3203:2854":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:3029:8537":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13674:5394":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:4650:8455":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15289:5803":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9858:21204":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8248:8353":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:9983:2621":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:14189:5507":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44247:7569":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12318:3851":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:40925:7513":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14372:5536":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1142:8065":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"15:0:2467":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:45109:8120":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:8029:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:6626:3621":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:7363:13834":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:10039:2869":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6908:4107":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:43974:7238":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5502:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:8614:2848":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:16176:6055":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12076:7963":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6689:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:5919:21140":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8966:8509":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14855:5688":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:5807:3576":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:12075:1159":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:651:5176":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:34187:13857":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11605:1871":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:1826:3000":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:2203:7898":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:10045:2867":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:22493:8354":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:7353:3229":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:613:34443":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:22462:13871":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:10954:21220":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:42669:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5045:8469":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10747:29875":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:271:3547":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12388:7362":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:570:6218":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:1087:34411":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:43204:7224":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13399:5341":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11335:3676":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:2383:2848":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:11069:29873":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15342:5818":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6874:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5457:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:2187:3567":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:573:5176":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"13:109:34412":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:12612:13712":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:12663:13719":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22316:8628":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:2403:2849":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:32722:7499":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:7429:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:4838:13774":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:42708:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:3177:3864":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40739:7506":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:15814:5959":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:7339:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:14529:5564":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:903:3590":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:0:2468":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5489:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:13473:5354":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:531:7317":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3229:2848":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46890:4718":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:6062:7383":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:23957:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:16259:5338":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:11230:7832":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10759:5213":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:39932:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:3241:32748":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:4257:3576":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11583:7944":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:7306:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42425:2848":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:5056:8092":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:2554:34410":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:43306:2859":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:34533:13859":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:4477:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11016:7914":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:43268:2857":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10828:34437":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2299:7461":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15368:5828":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5064:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12647:7981":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12091:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46570:4708":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6599:7403":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:4269:13757":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:5712:3576":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:1607:7453":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11189:5210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15190:5782":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1317:8063":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44000:7487":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:11031:7483":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9737:21187":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:1580:6286":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11877:5220":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:1107:8064":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:44505:13725":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:2124:7420":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1707:6365":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10612:7908":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2671:3628":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12056:5254":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11324:7926":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10033:2861":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10170:3808":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6724:4102":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12433:5266":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1054:8062":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46091:4686":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:8012:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15313:5810":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:643:5176":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15116:5761":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11058:2604":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:5652:2601":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:6682:2789":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:4069:8411":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:1676:3540":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:2104:8076":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15646:5917":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5225:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13986:5464":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7599:4397":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11115:7921":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5278:3952":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13089:5278":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:5018:32022":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11443:5217":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:922:8055":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15596:5905":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:32733:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41096:7535":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22379:8354":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:1862:3009":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2917:20278":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13723:5419":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11467:5218":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:48384:7244":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40633:7501":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:1566:20205":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10671:34438":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:3388:3590":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6657:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:21430:31555":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12993:21213":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6445:7398":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44926:13971":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1145:34125":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12088:798":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:43953:7486":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5496:2596":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44526:7583":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3442:7547":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"14:0:2466":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9984:21208":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:22793:31069":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11063:7917":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7176:34427":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13363:5334":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46970:4719":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1585:3590":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:9498:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43285:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8915:2848":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:473:6164":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:3260:6072":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11493:7933":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:6621:7473":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7223:29195":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:39202:13864":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:563:5183":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:7982:7619":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"9:391:20124":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6421:8636":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:12124:7820":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:42036:8393":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:7428:30936":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:2304:20276":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:6788:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3172:13680":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"18:726:5199":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:43521:7556":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:12552:8488":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:7837:3020":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:4366:5015":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2749:3891":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5266:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5400:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1565:6274":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3018:34231":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:42441:2789":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:6243:3655":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:4426:3578":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8278:7539":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:11518:8140":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10676:7618":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12557:5206":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10043:2866":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:0:2465":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:837:8055":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:836:2848":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11865:7959":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:10958:8099":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22355:8629":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:10037:2868":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15390:5833":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:7973:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46500:4706":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12621:5277":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:1503:6239":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:11069:8101":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13187:5293":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:47124:4734":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44857:7612":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:15822:5962":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7667:3666":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4560:2877":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6773:6080":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8351:7621":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:1804:638":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5320:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8304:8166":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3024:8535":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:13470:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8549:5025":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6431:3905":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6624:8504":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12969:3852":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22036:8547":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10877:7912":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12078:1545":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4399:3930":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5630:3960":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5290:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6282:7386":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2593:3884":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15151:5771":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11647:25495":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:6330:3656":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:48399:7245":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5665:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6821:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5662:21138":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6597:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6320:7387":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7749:8155":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:48364:7242":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4061:8410":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:4997:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3346:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1596:7451":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8369:8169":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:918:8054":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21362:2758":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5316:3807":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12929:3849":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16165:6050":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:40785:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12300:21333":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:33814:8536":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:481:7315":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:0:2469":{"crate_id":17,"path":["object"],"kind":"module"},"17:11702:7345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:10185:3809":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:1716:3547":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11915:21309":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:286:2630":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4902:8422":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:4614:2878":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7551:3906":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1628:6322":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6555:4069":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11661:7342":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:30943:4425":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12353:7360":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7462:2789":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2689:3888":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:8253:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4844:3944":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12949:3851":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:42474:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:44293:7572":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:11152:8103":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6230:4035":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6221:7385":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46789:4715":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12082:696":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:3253:8311":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22759:4400":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4864:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"10:0:2463":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15678:5932":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:553:6210":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:48204:4776":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:687:2849":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:6670:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:3275:8134":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3579:2620":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:48353:7241":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:41497:7548":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:4518:3934":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:14341:5531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:21418:31553":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5476:2595":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4761:3941":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7386:3913":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:33932:13855":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44084:4662":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41106:7536":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:42222:4654":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6759:3908":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5759:3978":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11160:7263":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12371:3849":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13606:5390":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:0:536":{"crate_id":2,"path":["core"],"kind":"module"},"6:5212:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:4491:3933":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11051:7916":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:40:3543":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12096:1255":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6650:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2789:3893":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2496:2021":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:16223:6063":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:3113:4123":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:5485:3898":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8268:7512":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:42356:7816":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14147:5486":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:8247:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7686:3668":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13024:21214":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7869:4227":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8402:8170":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:21399:31547":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3354:8137":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15138:5765":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5588:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40981:7522":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3020:2768":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:12617:13711":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:5906:3650":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:8288:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:42242:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"7:78:20116":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42366:8283":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:883:8061":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15608:5908":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6546:7402":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3024:34192":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13526:5367":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8907:2605":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1887:2789":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:2231:7454":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:2687:8354":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:10250:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:2548:6146":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:22831:31063":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15324:5814":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41455:7545":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:40790:4632":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5653:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5376:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2271:1886":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:7389:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:44013:8117":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:46300:4694":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12494:5271":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13832:5440":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:4907:3946":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:545:6205":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45145:4315":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5014:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:149:3529":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11825:7955":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7523:3915":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:42316:2789":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1490:6233":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:6507:7545":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12399:7363":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:8341:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7452:21147":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14868:5695":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:15992:6013":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:6764:3547":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4959:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:538:6202":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3472:3576":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3017:2842":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1917:7452":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:13221:31266":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:41025:7528":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1692:6358":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:16187:6056":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6244:21141":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2835:3895":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11635:7267":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10952:3675":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:4572:3936":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2363:13871":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12328:7352":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9886:21205":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:589:5184":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:44555:7592":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:7816:8281":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:47094:4733":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5160:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:2982:3647":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3639:2848":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5897:21139":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12863:3847":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2365:13872":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:832:8066":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16069:6027":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}