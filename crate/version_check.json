{"root":"0:0:2100","crate_version":"0.9.4","includes_private":false,"index":{"0:36:2391":{"id":"0:36:2391","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1146":{"id":"0:154:1146","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31508:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:27990":{"id":"2:12934:27990","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:1880":{"id":"0:9:1880","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:465":{"id":"0:107:465","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31508:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:1938":{"id":"0:32:1938","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12938:27992":{"id":"2:12938:27992","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:1835":{"id":"2:12952:1835","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44409:7363","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:2576":{"id":"2:12999:2576","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatches":"2:13002:32812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44359:7361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:32814":{"id":"2:13008:32814","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::match_indices":"2:13005:32813"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44323:7359","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2782-0:93:1875":{"id":"b:2:2782-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2785:138","2:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:1890":{"id":"0:42:1890","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:32819":{"id":"2:13031:32819","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2246":{"id":"0:12:2246","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2785:138":{"id":"2:2785:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:6:1890":{"id":"0:6:1890","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","le","lt","gt"],"trait":{"name":"PartialOrd","id":"2:2574:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:1146"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:724":{"id":"0:57:724","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1937":{"id":"0:82:1937","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:27989":{"id":"2:12932:27989","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2472-0:140:1877":{"id":"b:2:2472-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2474:25263"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12964:2832":{"id":"2:12964:2832","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:31361":{"id":"2:12950:31361","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12951:31350"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44429:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:334":{"id":"2:12930:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12931:27993","`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:32813":{"id":"2:13005:32813","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatch_indices":"2:13008:32814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44305:7358","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13044:29162":{"id":"2:13044:29162","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5593:33516":{"id":"5:5593:33516","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2634","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2634","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13034:1848":{"id":"2:13034:1848","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1829":{"id":"0:24:1829","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:127:1876"],"is_stripped":true}}},"b:2:2772-0:140:1877":{"id":"b:2:2772-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2775:1973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12921:2795":{"id":"2:12921:2795","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:1847":{"id":"2:13017:1847","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:32817":{"id":"2:13019:32817","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12638:13536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2271":{"id":"0:14:2271","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1875":{"id":"0:93:1875","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:42397:8301-0:93:1875","a:2:2995:246-0:93:1875","a:2:32761:237-0:93:1875","a:2:42396:8103-0:93:1875","a:2:32818:2630-0:93:1875","b:2:2772-0:93:1875","b:2:2782-0:93:1875","b:2:2787-0:93:1875","b:2:2776-0:93:1875","b:2:2472-0:93:1875","b:2:3608-0:93:1875","b:2:2469-0:93:1875","b:5:5866-0:93:1875","b:5:725-0:93:1875","0:101","0:96","0:22","0:106","0:99","0:102","0:20","0:104","0:97"]}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16:2279":{"id":"0:16:2279","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:667":{"id":"0:134:667","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42397:8301-0:140:1877":{"id":"a:2:42397:8301-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42397:8301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2995:246-0:140:1877":{"id":"a:2:2995:246-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:2380":{"id":"0:33:2380","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2568:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:1888":{"id":"0:76:1888","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:882":{"id":"2:12920:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12073:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:32805":{"id":"2:12925:32805","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12923:32804"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:31350":{"id":"2:12951:31350","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12950:31361"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44438:7366","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:2363":{"id":"2:12955:2363","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:724":{"id":"0:144:724","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2778:751":{"id":"2:2778:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:1967":{"id":"2:12958:1967","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:32810":{"id":"2:12981:32810","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12613:13539","str::split":"2:12972:1839","prim@char":"1:12073:454","`DoubleEndedIterator`":"2:7994:131","str::rsplit_terminator":"2:12984:32811"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44205:7352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:28029":{"id":"2:12993:28029","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2279":{"id":"0:52:2279","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:1838":{"id":"2:13011:1838","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:29167":{"id":"2:13048:29167","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35296"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:33517":{"id":"5:5597:33517","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2100":{"id":"0:0:2100","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1875","`is_max_version`":"0:80:1919","`is_exact_version`":"0:81:1927","`is_max_date`":"0:77:1896","`is_exact_date`":"0:78:1903","`triple()`":"0:75:1874","`Date`":"0:140:1877","`Channel`":"0:127:1876"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1874","0:76:1888","0:77:1896","0:78:1903","0:79:1911","0:80:1919","0:81:1927","0:82:1937","0:84:1951","0:60-0:3:1721","0:61-0:24:1829","0:62-0:39:1830"],"is_stripped":false}}},"0:152:458":{"id":"0:152:458","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2787-0:140:1877":{"id":"b:2:2787-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:138","2:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12949:4138":{"id":"2:12949:4138","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44141:3549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1919":{"id":"0:80:1919","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1890":{"id":"0:27:1890","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32761:237-0:127:1876":{"id":"a:2:32761:237-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2790:138":{"id":"2:2790:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32689:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:42397:8301-0:93:1875":{"id":"a:2:42397:8301-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42397:8301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:2286":{"id":"0:18:2286","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1927":{"id":"0:81:1927","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2782-0:140:1877":{"id":"b:2:2782-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2785:138","2:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:1830":{"id":"0:39:1830","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:140:1877"],"is_stripped":true}}},"0:34:2384":{"id":"0:34:2384","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:32806":{"id":"2:12929:32806","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:7368":{"id":"2:12947:7368","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44125:7346","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2388":{"id":"0:35:2388","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3608-0:140:1877":{"id":"b:2:3608-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:140:1877":{"id":"b:5:725-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2852","5:728:2853","5:729:2854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:667":{"id":"0:147:667","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:32804":{"id":"2:12923:32804","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2469-0:127:1876":{"id":"b:2:2469-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2471:2562"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12968:2794":{"id":"2:12968:2794","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:1843":{"id":"2:12961:1843","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3608-0:93:1875":{"id":"b:2:3608-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13025:25480":{"id":"2:13025:25480","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13046:29164":{"id":"2:13046:29164","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5609:33520":{"id":"5:5609:33520","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2634","`String`":"5:7630:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2634","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2775:1973":{"id":"2:2775:1973","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2749:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42396:8103-0:127:1876":{"id":"a:2:42396:8103-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42396:8103","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:667":{"id":"0:98:667","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3:1721":{"id":"0:3:1721","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1875"],"is_stripped":true}}},"0:30:1880":{"id":"0:30:1880","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:724":{"id":"0:23:724","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1890","0:30:1880","0:32:1938","0:33:2380","0:34:2384","0:35:2388","0:36:2391"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:465":{"id":"0:156:465","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31508:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1874":{"id":"0:75:1874","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1875","`Version::read()`":"0:6:1890","`Channel`":"0:127:1876","crate":"0:0:2100","`Channel::read()`":"0:27:1890","`Date::read()`":"0:42:1890","`Date`":"0:140:1877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2469-0:140:1877":{"id":"b:2:2469-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2471:2562"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12953:32809":{"id":"2:12953:32809","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44419:7364","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:33518":{"id":"5:5600:33518","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:140:1877":{"id":"b:5:5866-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2782-0:127:1876":{"id":"b:2:2782-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2785:138","2:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2995:246-0:127:1876":{"id":"a:2:2995:246-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:127:1876":{"id":"b:2:2772-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2775:1973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:2271":{"id":"0:50:2271","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2786:1631":{"id":"2:2786:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:2630-0:93:1875":{"id":"a:2:32818:2630-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32818:2630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:93:1875":{"id":"b:5:725-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2852","5:728:2853","5:729:2854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2776-0:93:1875":{"id":"b:2:2776-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:1146":{"id":"0:105:1146","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31508:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1911":{"id":"0:79:1911","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1951":{"id":"0:84:1951","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:32808":{"id":"2:12941:32808","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12079:1549","crate::ops::IndexMut":"2:3270:8133","str::slice_unchecked":"2:12940:32807"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:1830":{"id":"0:62-0:39:1830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1830","glob":true}}},"a:2:32818:2630-0:127:1876":{"id":"a:2:32818:2630-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32818:2630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12928:29155":{"id":"2:12928:29155","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12159:1866"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:7378":{"id":"2:12948:7378","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44131:7347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:28024":{"id":"2:12978:28024","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split":"2:12972:1839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44173:7267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2776-0:127:1876":{"id":"b:2:2776-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12922:32803":{"id":"2:12922:32803","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13002:32812":{"id":"2:13002:32812","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::matches":"2:12999:2576"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44377:7362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:32815":{"id":"2:13013:32815","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13040:1880":{"id":"2:13040:1880","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12574:137","`FromStr`":"2:12573:8312"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12573:8312","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12573:8312","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:8095":{"id":"2:13052:8095","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4793:8095"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44463:7286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:28019":{"id":"2:12944:28019","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12945:28020"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13053:32821":{"id":"2:13053:32821","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4790:32821"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44472:7289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:29294":{"id":"5:5611:29294","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13045:29163"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2469-0:93:1875":{"id":"b:2:2469-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2471:2562"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2791:1629":{"id":"2:2791:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:127:1876":{"id":"b:5:5866-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2472-0:93:1875":{"id":"b:2:2472-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2474:25263"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12996:28030":{"id":"2:12996:28030","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:724":{"id":"0:38:724","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:29159":{"id":"2:13042:29159","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2474:25263":{"id":"2:2474:25263","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1903":{"id":"0:78:1903","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42397:8301-0:127:1876":{"id":"a:2:42397:8301-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42397:8301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42396:8103-0:93:1875":{"id":"a:2:42396:8103-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42396:8103","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103:458":{"id":"0:103:458","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32761:237-0:140:1877":{"id":"a:2:32761:237-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12940:32807":{"id":"2:12940:32807","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12079:1549","str::slice_mut_unchecked":"2:12941:32808","crate::ops::Index":"2:39891:8132"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:28022":{"id":"2:12975:28022","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12429:7266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13037:1846":{"id":"2:13037:1846","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2472-0:127:1876":{"id":"b:2:2472-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2474:25263"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5594:13674":{"id":"5:5594:13674","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:27991":{"id":"2:12936:27991","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:2852":{"id":"5:727:2852","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:3608-0:127:1876":{"id":"b:2:3608-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3610:1644":{"id":"2:3610:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40059:4773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2772-0:93:1875":{"id":"b:2:2772-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2775:1973"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13043:29160":{"id":"2:13043:29160","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40245:13615","Self::is_ascii":"2:13042:29159"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40245:13615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12945:28020":{"id":"2:12945:28020","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12944:28019"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42396:8103-0:140:1877":{"id":"a:2:42396:8103-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42396:8103","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:13:2258":{"id":"0:13:2258","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:33519":{"id":"5:5608:33519","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13050:32820":{"id":"2:13050:32820","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4792:32820"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44454:7290","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61-0:24:1829":{"id":"0:61-0:24:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1829","glob":true}}},"5:5612:29295":{"id":"5:5612:29295","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13046:29164"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:28016":{"id":"2:12943:28016","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12942:28015","str::split_at_mut_checked":"2:12945:28020"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:29166":{"id":"2:13047:29166","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35296"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1876":{"id":"0:127:1876","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:42397:8301-0:127:1876","a:2:2995:246-0:127:1876","a:2:32761:237-0:127:1876","a:2:42396:8103-0:127:1876","a:2:32818:2630-0:127:1876","b:2:2772-0:127:1876","b:2:2782-0:127:1876","b:2:2787-0:127:1876","b:2:2776-0:127:1876","b:2:2472-0:127:1876","b:2:3608-0:127:1876","b:2:2469-0:127:1876","b:5:5866-0:127:1876","b:5:725-0:127:1876","0:37","0:133","0:135","0:137","0:130","0:132","0:138"]}}},"2:13022:32818":{"id":"2:13022:32818","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:1845":{"id":"2:13018:1845","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:93:1875":{"id":"b:2:2787-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:138","2:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2568:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:724":{"id":"0:131:724","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:1877":{"id":"0:140:1877","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:42397:8301-0:140:1877","a:2:2995:246-0:140:1877","a:2:32761:237-0:140:1877","a:2:42396:8103-0:140:1877","a:2:32818:2630-0:140:1877","b:2:2772-0:140:1877","b:2:2782-0:140:1877","b:2:2787-0:140:1877","b:2:2776-0:140:1877","b:2:2472-0:140:1877","b:2:3608-0:140:1877","b:2:2469-0:140:1877","b:5:5866-0:140:1877","b:5:725-0:140:1877","0:150","0:153","0:56","0:145","0:155","0:148","0:151","0:146","0:143"]}}},"2:13045:29163":{"id":"2:13045:29163","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1721":{"id":"0:60-0:3:1721","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1721","glob":true}}},"2:12919":{"id":"2:12919","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12920:882","2:12921:2795","2:12922:32803","2:12923:32804","2:12925:32805","2:12928:29155","2:12929:32806","2:12930:334","2:12931:27993","2:12932:27989","2:12934:27990","2:12936:27991","2:12938:27992","2:12940:32807","2:12941:32808","2:12942:28015","2:12943:28016","2:12944:28019","2:12945:28020","2:12947:7368","2:12948:7378","2:12949:4138","2:12950:31361","2:12951:31350","2:12952:1835","2:12953:32809","2:12954:31363","2:12955:2363","2:12958:1967","2:12961:1843","2:12964:2832","2:12968:2794","2:12972:1839","2:12975:28022","2:12978:28024","2:12981:32810","2:12984:32811","2:12987:1852","2:12990:28027","2:12993:28029","2:12996:28030","2:12999:2576","2:13002:32812","2:13005:32813","2:13008:32814","2:13011:1838","2:13013:32815","2:13015:32816","2:13017:1847","2:13018:1845","2:13019:32817","2:13022:32818","2:13025:25480","2:13028:28031","2:13031:32819","2:13034:1848","2:13037:1846","2:13040:1880","2:13042:29159","2:13043:29160","2:13044:29162","2:13045:29163","2:13046:29164","2:13047:29166","2:13048:29167","2:13049:29168","2:13050:32820","2:13052:8095","2:13053:32821"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5610:8207":{"id":"5:5610:8207","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2776-0:140:1877":{"id":"b:2:2776-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12987:1852":{"id":"2:12987:1852","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539","str::rsplitn":"2:12990:28027"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44259:7355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592":{"id":"5:5592","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5593:33516","5:5594:13674","5:5597:33517","5:5600:33518","5:5608:33519","5:5609:33520","5:5610:8207","5:5611:29294","5:5612:29295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5868:1606":{"id":"5:5868:1606","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:32816":{"id":"2:13015:32816","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32818:2630-0:140:1877":{"id":"a:2:32818:2630-0:140:1877","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32818:2630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:458":{"id":"0:139:458","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1890","0:9:1880","0:12:2246","0:13:2258","0:14:2271","0:16:2279","0:18:2286"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32761:237-0:93:1875":{"id":"a:2:32761:237-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2995:246-0:93:1875":{"id":"a:2:2995:246-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:2854":{"id":"5:729:2854","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","le","lt","gt"],"trait":{"name":"PartialOrd","id":"2:2574:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1146"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2286":{"id":"0:54:2286","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:32811":{"id":"2:12984:32811","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12613:13539","str::split":"2:12972:1839","prim@char":"1:12073:454","str::split_terminator":"2:12981:32810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44223:7353","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:1839":{"id":"2:12972:1839","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12613:13539","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split_whitespace":"2:12950:31361","str::rsplit":"2:12978:28024"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44155:7262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:28031":{"id":"2:13028:28031","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:13539"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:127:1876":{"id":"b:2:2787-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:138","2:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:127:1876":{"id":"b:5:725-0:127:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:1876","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2852","5:728:2853","5:729:2854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12942:28015":{"id":"2:12942:28015","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12944:28019","str::split_at_mut":"2:12943:28016"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2417":{"id":"0:48:2417","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:28027":{"id":"2:12990:28027","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12073:454","str::splitn":"2:12987:1852","self::pattern":"2:12613:13539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44277:7356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:7907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:13537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1896":{"id":"0:77:1896","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:31363":{"id":"2:12954:31363","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44447:7367","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1890","0:45:1880","0:48:2417","0:50:2271","0:52:2279","0:54:2286"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:724":{"id":"0:21:724","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:93:1875":{"id":"b:5:5866-0:93:1875","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32762:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2471:2562":{"id":"2:2471:2562","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:728:2853":{"id":"5:728:2853","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1880":{"id":"0:45:1880","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:27993":{"id":"2:12931:27993","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:29168":{"id":"2:13049:29168","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35296"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43504:7340":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1671:6115":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7397:34387":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21600:8177":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:1610:7223":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11764:7120":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:13235:5073":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:11050:7267":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:364:34356":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2749:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:34390:13688":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:41519:6989":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5181:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:538:4945":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:12391:7360":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15799:5724":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:12573:8312":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6120:20975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:6381:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"10:44:5917":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5652:2603":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:48374:7008":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:6647:7254":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:39891:8132":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11419:4977":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11493:7726":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7390:7862":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:870:7218":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1699:6128":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11231:7625":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:4787:6143":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:1066:20039":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15102:5526":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13553:5141":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4971:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1555:7849":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:11157:7913":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14977:5502":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:3660:2859":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5742:7140":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:32738:7921":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:4856:3676":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11095:27050":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"9:392:19959":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6175:8186":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44585:7379":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6317:7811":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:44602:7380":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:7452:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:7279:2805":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:1107:7859":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12408:5030":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:8459:31994":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7446:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:14402:5308":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:1582:7863":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:1917:7222":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:12159:1866":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:2878:3630":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13046:3590":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:1309:7189":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7097:33973":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:10483:31896":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13211:5072":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12189:7761":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10954:21056":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:42407:2862":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:942:7853":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2017:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11291:4106":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:11121:4610":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:4305:2858":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40783:13610":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43512:7341":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2035:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:10977:7910":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11524:7729":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10728:7020":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:403:7686":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6441:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:48032:4518":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:21674:4780":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5347:3686":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1680:6121":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9222:7411":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:742:7849":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:1978:711":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5536:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9498:25534":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:1724:33937":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:2536:5910":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:299:7213":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4315:7959":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:22952:8230":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8980:4602":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:32850:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13877:5215":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:22436:13701":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:3791:4538":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10887:34397":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14575:5031":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10365:2606":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:42355:4400":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5344:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6335:7819":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12043:7754":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1692:6125":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5296:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:437:3490":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:1653:6108":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:924:8117":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2704:13614":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5306:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44903:4411":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2466:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21429:32043":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5266:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5415:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:640:7937":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:31054:31374":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:1888:3024":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43015:2879":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:48493:7017":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44899:7402":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:4830:3675":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4992:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:5039:31914":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:10047:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:7467:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10052:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:4709:8236":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1628:6089":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11537:7730":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5225:6332":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:7780:4531":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:2443:7862":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:7449:31489":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12399:7132":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8657:4599":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:0:2473":{"crate_id":17,"path":["object"],"kind":"module"},"17:12508:5039":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:43736:7005":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10317:3547":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:11143:7356":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6505:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:4073:7862":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:22344:8453":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15116:5527":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4924:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:330:5920":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:2352:7858":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:396:34358":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7379:34386":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2788:3626":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40742:7286":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:33962:13685":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44277:7356":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:4614:3669":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43755:7345":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:279:33937":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3046:8362":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10573:34394":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6597:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:6982:30090":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3276:7949":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40685:31381":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6880:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:1816:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6532:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46352:4440":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:4721:6838":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:6821:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1593:6060":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1910:7221":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:16187:5822":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:6657:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8116:8206":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4395:7960":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6665:20978":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7551:4131":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9990:4390":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:6900:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43904:7925":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:4064:8234":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44921:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7321:4400":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12362:7130":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:10515:31526":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3453:13582":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40942:7298":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:485:5935":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12328:7121":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:613:34407":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6460:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:10004:2625":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:4859:13603":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:2234:7694":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:925:7850":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5897:3699":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:643:7939":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44065:7929":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:40955:7299":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:2591:2026":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42621:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11051:7709":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2124:7189":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1565:6041":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:9984:21044":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2835:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:754:7102":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7497:5849":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8941:2858":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:8294:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39982:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:42338:2859":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4126:8239":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:597:3537":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10720:34401":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:45067:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4837:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:623:34406":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:8301:3973":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:2369:7867":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:5927:3705":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5528:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:883:7856":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:23985:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:718:4960":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14449:5322":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11293:21076":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:40052:7922":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:687:2859":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11166:4972":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:7139:26976":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:10066:2877":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14189:5273":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15206:5551":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5191:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:30709:8219":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:15376:5597":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:44101:4402":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5557:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:43273:3943":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"14:202:13552":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2303:20085":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:34736:3866":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6427:7822":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:4502:7604":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4467:7961":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7857:3930":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14246:5285":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7485:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:13302:7917":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:44463:7286":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:1896:7874":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:42504:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12353:7129":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2427:8163":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43008:2878":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6379:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14284:5290":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:4719:6836":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:10513:4990":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:839:2858":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4999:8287":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5477:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7575:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:0:2466":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:735:25231":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4828:8250":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:16235:5832":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:10044:21045":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7516:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:80:25220":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5588:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:48455:7015":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:44728:13551":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8907:2607":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2499:2025":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13972:4992":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2696:7616":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8403:7984":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12683:7777":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:6636:7257":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:4143:8186":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:261:7685":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2453:8173":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:7984:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4743:3672":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:872:7685":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:2542:5911":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3871:7874":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:46251:4436":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:7602:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:4821:7698":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:30986:2867":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6278:7792":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:896:7862":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14912:5492":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:15273:5567":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:670:7683":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7986:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8411:4581":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:47154:4479":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6524:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12264:7767":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12092:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2808:3627":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:6627:8328":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13814:5204":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2995:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:700:2799":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11662:7426":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"0:75:1874":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"16:542:4746":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:14752:5368":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:2140:7857":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:1007:7189":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:10870:2859":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5756:7783":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14986:5503":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:545:5972":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:8012:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:4468:3664":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7330:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:7731:4795":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11648:29496":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:48570:4525":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12792:3504":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:39895:4235":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13753:5192":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:1939:6982":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4909:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6629:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15222:5555":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:16223:5829":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12251:7766":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13015:5031":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:5208:7236":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2838:3628":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6714:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:1584:7862":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6398:3631":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6562:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:8175:7844":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:5584:2602":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:912:7861":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9886:21041":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:521:25233":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1829:3009":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:10060:2879":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:11400:4623":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40886:7923":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44305:7358":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:7:7591":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5376:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:6680:8330":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7355:3885":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4641:3670":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:651:4940":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6678:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4882:3677":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5112:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12078:1517":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"11:2231:7224":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:862:2799":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42094:6991":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46646:4454":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13594:5152":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:22521:8177":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11661:7111":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:2112:7876":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:102:7211":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:1207:7689":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8013:7408":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:2469:7874":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:3270:7222":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:2175:21103":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"14:160:7591":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15168:5542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:531:7086":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:6694:8331":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:5046:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40734:7289":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11557:7731":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6231:7149":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13399:5106":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:5707:13568":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:16249:5833":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:9095:7996":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4575:8262":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10256:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:10306:8180":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1043:7189":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5336:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:42463:2859":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43298:2867":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5083:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14516:5329":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6636:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41087:7317":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:5058:8186":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9916:21042":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11574:7224":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5174:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7728:4614":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12464:21170":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:11733:13533":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:16050:5086":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:44438:7366":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:21427:32038":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:46530:4451":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9204:4610":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4891:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:45139:7931":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:8030:7617":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11405:7725":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12080:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11075:4970":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:12618:7907":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:40906:2611":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46075:4429":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:13554:8118":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21446:32046":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15078:5521":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:608:7678":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:256:7684":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2441:8167":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12074:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:10978:30102":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12087:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22383:8454":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:3740:33937":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3249:33796":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4784:8288":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:11088:7912":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5352:6383":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:9115:4606":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:3220:2864":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:9091:7906":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12584:7704":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:11353:7420":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:44454:7290":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:698:7093":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5472:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:9102:7997":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12422:7133":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:46500:4450":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12127:5023":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5400:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11042:7708":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12443:5034":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:16093:5798":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:9858:21040":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6385:3770":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13344:5098":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1575:7873":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7014:20980":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:3806:7875":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:40913:7271":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13146:5049":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:7618:5851":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12278:7768":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10439:4965":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21653:8177":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10622:34395":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15138:5531":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:43315:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:4220:7898":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:5212:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13766:5194":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5546:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:8259:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40663:7287":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12824:21048":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10218:3544":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6412:20976":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:3842:3658":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14414:5310":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:42200:4393":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4682:2889":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12929:3582":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4885:6211":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8136:7204":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9181:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12949:3584":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1605:7222":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:38543:13691":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13437:5110":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:5864:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10877:7705":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"10:0:2467":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13424:5109":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5064:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:15822:5728":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:44749:7388":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5515:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:837:7850":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5479:2599":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6634:3639":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:44891:7400":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2768:3625":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9938:21043":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:2271:7944":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5598:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10095:3018":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6353:3766":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9176:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11063:7710":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40858:8148":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:10972:30061":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7570:3646":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3564:2625":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:559:5980":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5483:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:4497:33958":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2532:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"14:0:2470":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:3614:5840":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1325:7858":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:8197:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:875:7855":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:4354:7900":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15197:5550":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6782:20979":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42178:31384":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8274:8176":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7052:7824":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:3778:3656":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:2569:4130":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:2326:7857":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:31535:2768":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:7590:3647":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41471:7329":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2338:3599":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:46121:4431":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10155:3540":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42738:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:15678:5698":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:12638:13536":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:16165:5816":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11242:7718":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:4635:2888":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10473:7953":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:42012:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7775:7973":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12695:7778":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"9:238:7001":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:10757:2612":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"0:80:1919":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"16:2660:3620":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:6071:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5436:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3304:7223":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6543:3784":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:22422:8457":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:36612:3867":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:515:4943":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47078:4477":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:45148:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9755:21021":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15383:5598":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:41485:7331":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"9:178:20025":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12707:7779":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6055:4792":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6948:3641":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:4286:13585":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13485:5122":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15521:5658":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8250:7021":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:39847:13506":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:4385:4774":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5014:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1485:5998":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44535:13550":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13538:5135":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8432:6825":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:4919:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:8188:7847":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:7919:13662":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:3244:7221":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:39907:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:15418:5606":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:12096:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:42321:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11227:7717":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6300:7807":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:12887:7138":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10170:3541":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"0:78:1903":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"1:8336:7986":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7604:3648":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:13444:7275":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:5077:7903":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:8288:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:6429:8461":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:15473:5621":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:7366:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:46698:4456":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3814:7956":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:15655:5685":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2508:3613":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1559:6039":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:123:7212":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:479:5933":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:16151:5813":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:4824:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7910:20985":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13922:5221":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6621:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13774:5196":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44714:7383":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:3426:13695":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6574:3651":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8002:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43751:7344":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:42330:2858":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4264:8259":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22821:31373":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12659:7775":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13568:5147":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2990:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5361:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15569:5659":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4870:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:7671:3903":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:11656:7915":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:46389:4442":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:38598:13692":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:41285:7327":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:1025:7857":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11825:7748":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10738:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15390:5599":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:586:5994":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3849:2799":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15608:5674":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:15289:5569":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7528:7190":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:7385:13665":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5457:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:34217:13687":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:8216:7208":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11634:7109":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15010:5504":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:0:1541":{"crate_id":1,"path":["std"],"kind":"module"},"2:22213:8368":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11688:7113":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15092:5525":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7653:7603":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:484:30105":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:8300:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3270:8133":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:1098:7688":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:33903:8363":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:8006:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4952:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3507:2027":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13272:5086":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11016:7707":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14311:5292":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12076:7756":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6648:7167":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:16032:5076":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:9061:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:3475:5839":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:563:4947":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12089:5021":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5048:8293":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:9851:2868":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13526:5132":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11443:4981":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:359:7932":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9486:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5390:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6154:1876":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12494:5036":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:7501:13657":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7096:7624":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5277:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14298:5291":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46552:4452":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46600:4453":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2756:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"13:0:2463":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:689:7092":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14560:5336":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8330:7984":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9737:21023":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13375:5102":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:7561:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:40245:13615":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2985:7948":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:7546:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12300:21169":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:2403:2859":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:7461:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:25:664":{"crate_id":2,"path":["core","env"],"kind":"macro"},"5:7400:7892":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7607:4139":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:47390:4483":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6510:7331":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8963:4601":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:573:4940":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21783:4780":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14079:5241":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4464:8186":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8504:4593":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"8:0:2465":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:7994:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3207:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5320:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15992:5779":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:3231:2631":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7061:3844":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15836:5731":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:921:7849":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5385:3540":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:44883:7398":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"14:214:7209":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7813:7196":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:917:7848":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1663:6114":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22756:4141":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"14:165:20046":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2728:3623":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10769:34400":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:11689:7916":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:4864:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2279:2036":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:0:2472":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:44571:7376":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8640:2858":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:44223:7353":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44780:7392":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3235:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43234:6992":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12071:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:11636:7036":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:32752:7285":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11359:2618":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:10054:2871":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9807:21029":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5769:7144":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2369:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:41077:7316":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41126:7321":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46199:4434":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:3283:33797":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13325:5093":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6471:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46145:4432":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46407:4443":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10898:25500":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40993:7305":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:2592:3617":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13387:5103":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13738:5188":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9261:25493":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:1971:8144":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5423:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6504:3780":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12095:856":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:16269:5108":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:1503:6006":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:41500:7333":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44131:7347":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9186:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12076:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1577:2858":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5314:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:4655:2782":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10766:27052":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:30965:6986":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6670:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5160:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:2498:20035":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:2854:3629":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"14:220:5862":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4723:6840":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:1585:6055":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:30997:31376":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:39962:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12089:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:2203:7691":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1812:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6519:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:41271:7326":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9671:21024":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10350:3548":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6962:3642":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"9:502:4109":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10185:3542":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:46768:4459":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40964:7301":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:13464:7277":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:43001:2871":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6494:7155":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1676:34352":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"0:81:1927":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"17:14260:5287":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:867:7684":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:31508:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3359:7954":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22835:6985":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:578:5990":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3329:5838":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5466:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12342:7125":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3752:8218":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:6071:14003":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:113:25222":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:3669:3439":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7957:7406":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44075:7273":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43521:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:9148:4609":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:4990:8286":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7848:3028":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11510:7728":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:21781:8367":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3032:33931":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11519:7956":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3238:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6749:7171":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40713:7288":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3518:13507":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:3237:2858":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5643:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7741:3650":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8262:2612":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11496:25398":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:7370:2799":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:9202:7907":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12093:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5002:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11138:4619":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:11580:7958":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3363:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11313:7105":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5052:6291":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:22894:31389":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5665:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6763:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:4352:3662":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:12086:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4882:7962":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:44677:7382":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:16079:5794":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:8306:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5290:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16259:5103":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13064:3593":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10982:21057":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44030:7271":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:42777:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6609:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10114:8004":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:12088:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15720:5704":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1142:7860":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1153:32753":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:44556:7370":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40802:4373":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7974:4537":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6728:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"15:327:20070":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8487:8297":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:44887:7399":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2443:8168":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:2195:8080":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12040:29920":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8022:7977":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:538:5968":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:12375:7357":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5020:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:726:4963":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3130:3862":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"18:581:2768":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2752:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:22570:8447":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:22059:8177":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:6410:8460":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:11129:7355":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:39922:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22565:8449":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:44056:7272":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3030:2776":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"18:635:4959":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10710:7703":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10759:4977":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13946:5222":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:42272:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44043:7928":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41136:7322":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8259:3904":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4062:3661":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:22703:4784":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:32761:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:13228:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7686:7843":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12084:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5244:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14587:5339":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15301:5575":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5236:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12808:3578":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10018:21025":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5250:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:7915:13663":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12225:7764":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4112:8237":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10092:21046":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15734:5706":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:48403:7011":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6811:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:7956:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:706:7095":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:0:2471":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7648:7842":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3318:7951":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:9043:4605":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5565:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5260:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:2287:32718":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9493:7975":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:7412:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2137:6984":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5686:3632":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46866:4461":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3028:6979":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47314:4481":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8890:2606":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1354:7600":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"14:187:20053":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:44173:7267":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:5716:4792":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1547:6031":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6927:3840":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12851:7137":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4428:2886":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47000:4464":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:4498:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:5398:33937":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4145:2859":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5722:3637":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12094:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:8093:5856":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6409:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:6018:7248":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4235:8186":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1544:7848":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11859:27581":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:3073:13502":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:21390:2768":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11730:7116":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12024:4626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:13250:32102":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10399:3549":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:41494:7332":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:4830:724":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:4251:8258":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15426:5608":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4787:8261":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:8341:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3447:13583":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8992:8334":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:44879:7397":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:16198:5823":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:1707:6132":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46055:4428":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:0:2474":{"crate_id":18,"path":["memchr"],"kind":"module"},"14:31:7591":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14356:5301":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1599:7221":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11605:1875":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:800:7862":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5802:20972":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:10961:30103":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:570:5985":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11702:7114":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42397:8301":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:42455:2858":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:1534:7861":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7799:3638":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4965:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:41261:7325":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5636:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11743:7117":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12516:7770":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12079:1549":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"11:2548:5912":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:11015:7911":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:45164:4422":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11026:21058":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:31159:31372":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:5653:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:96:25221":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8317:7262":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12085:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:12429:7266":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5367:20971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:3597:7697":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6342:34388":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:868:8116":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:536:8084":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6758:3807":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:43533:7001":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13832:5205":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:15769:5719":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:8118:7201":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:6895:8364":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"13:226:5909":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4235:8256":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42212:7409":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14463:5323":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6442:3773":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5039:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:8247:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:8253:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7493:29918":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:1853:1200":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11324:7719":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10500:30092":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:3264:7695":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9067:7992":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11142:4977":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:624:7612":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3278:7950":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:481:7084":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:5442:13524":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6706:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14025:5233":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:8351:6977":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:6608:33937":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42699:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:1891:7862":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14111:5245":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:2304:7189":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:8454:7022":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:21458:32041":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:6813:3819":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:8265:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46722:4457":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6976:5846":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:954:7856":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:7619:7893":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:3014:20114":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44259:7355":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:22434:31673":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:6230:7275":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:6018:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12557:4970":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5370:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10284:3546":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:5837:7968":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7122:33935":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22843:4148":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1593:7220":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:6562:7862":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:10467:7949":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:22299:8452":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7567:4133":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1639:6097":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"0:84:1951":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"1:4122:8238":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:3810:3657":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:10064:2876":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7132:7188":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47360:4482":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3817:7957":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2463:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6514:7972":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6491:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6729:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:12097:1259":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:43496:7338":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45126:4419":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:7384:13664":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5677:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10470:7951":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:5006:3681":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:15176:5545":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5624:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:1828:7874":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14968:5498":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2458:3611":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3715:7862":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:3241:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48234:4521":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11547:3482":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40933:7924":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10828:34402":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10883:2602":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:844:8115":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"15:306:20066":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:1340:7857":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:5864:7969":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43336:2869":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40876:7241":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43955:7268":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:787:7219":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5102:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2998:3653":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:26385:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6756:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:40846:4375":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:12315:7349":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41509:7334":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:1823:4768":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:13277:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3592:2623":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6738:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:11071:2607":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2438:3610":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14147:5251":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12073:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1057:7857":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12572:4977":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:5392:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"9:482:19957":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7478:2799":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4976:3680":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:4560:3667":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:7580:31386":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22407:8177":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"18:643:4940":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6588:7157":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:1603:7864":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:22089:4781":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12597:5041":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:1517:6011":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:45118:4417":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:7378:7238":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2736:7947":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13308:5091":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7442:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:2703:8177":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:22810:4147":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:1925:13711":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7144:20981":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8008:7407":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2528:3614":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4050:8233":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:669:7602":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7536:8114":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2485:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:9706:31995":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42471:2799":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:15126:5528":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7863:3029":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10671:34399":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7559:7194":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:8226:20986":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:43551:7343":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:41011:7308":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12454:7135":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21412:32036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:21444:32048":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:1189:32750":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:564:5982":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:42066:8217":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:3441:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:2936:20113":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:4502:3665":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:2151:7858":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3189:13505":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:4905:8246":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3068:13501":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:11336:30097":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4072:8235":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15463:5616":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11655:7426":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1075:7600":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5415:5841":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7712:30064":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:48172:4520":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:523:5959":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6441:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:931:8115":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14503:5328":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:8415:2861":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5445:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3475:8186":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22921:7282":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8395:7987":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40700:4371":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47424:4484":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12621:5042":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15151:5537":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:42582:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6664:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:4718:3671":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7098:7185":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:21602:8370":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:8421:13661":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:30971:4167":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:553:5977":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:5909:7970":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:856:7853":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"7:31:19944":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15324:5580":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:2684:3621":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:38653:13693":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11773:3564":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:13499:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10905:7706":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:6952:13569":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:48383:7009":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"0:79:1911":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"2:3436:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:2554:34355":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40973:7302":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6098:20974":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4653:8279":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:5118:862":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:15456:5614":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:9074:25479":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22928:4160":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2425:2093":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:673:2858":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:44323:7359":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10273:25533":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:42386:7606":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14235:5283":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:32689:2610":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12478:5035":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:43964:7269":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2674:30092":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:33610:13683":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8377:7409":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11189:4974":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1535:6022":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2746:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11256:7103":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12543:7773":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:14545:5332":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:7429:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1526:6016":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7755:3640":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:7359:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6478:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:7757:4530":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"14:40:5073":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7434:2799":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10137:21022":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:8073:3966":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:948:7855":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12671:7776":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:46454:4444":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6788:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15624:5678":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6746:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:3036:33933":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:44125:7346":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:2537:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:5904:7247":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:10003:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:9239:8000":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6915:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15342:5584":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11392:7724":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:774:7218":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8646:7025":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3606:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5530:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:7712:7874":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:10062:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1490:6000":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41002:7307":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:591:8094":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:16121:5805":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:7306:34389":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12530:7772":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:13426:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1581:2799":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:42050:4380":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40723:4372":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13116:5045":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11788:7742":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8896:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2988:2773":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:46920:4463":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43289:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:42543:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11715:7115":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:40769:7292":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13455:5118":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:10895:7262":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:12127:13762":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4243:8257":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5075:3683":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5307:3685":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1062:33937":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:3899:3659":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5630:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:9022:8335":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6620:3786":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:589:4948":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:351:34360":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:1588:7874":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:15410:5605":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11115:7714":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8324:7363":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14847:5451":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7168:4606":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:765:25232":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6690:2799":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8590:8311":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:1169:32742":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:2087:4538":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5502:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:7314:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6447:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:7389:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15214:5553":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:6278:7971":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4134:8241":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:78:19951":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:725:8177":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:5283:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1463:2858":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11354:7723":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12863:3580":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1525:7219":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8106:7978":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7085:7182":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:3473:7696":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2574:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:294:2634":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:1890:3025":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:32818:2630":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"15:288:20065":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42660:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9007:8333":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13363:5099":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:513:7687":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10704:7406":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:5831:3694":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:14475:5324":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:15333:5583":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8341:8216":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40831:31386":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2101:7875":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5489:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:3525:2613":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6721:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:10056:2870":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6047:7785":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:10311:4778":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3925:3660":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13797:5201":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44004:7006":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4553:8261":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40657:7286":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:497:5939":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15748:5713":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15931:5058":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:13785:5199":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"11:2383:2858":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10534:34398":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:12045:8102":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15249:5559":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:3196:3598":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13606:5155":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:517:5956":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:21772:8177":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43244:2867":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8428:7988":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:710:7848":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5671:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:48356:4524":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6991:34383":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44472:7289":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40820:4374":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7509:7834":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12768:21026":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13986:5229":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8552:7001":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:15:2287":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:8328:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15266:5566":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:860:7782":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:41043:7313":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15760:5715":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:32745:2887":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11128:3530":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3278:7220":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:6333:4792":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12213:7763":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:8282:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:417:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:48508:7018":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:5709:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7727:3649":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14091:5242":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1510:6008":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6940:5844":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3357:7953":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:48440:7014":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:7653:7626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4985:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14066:5240":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3041:8360":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6560:3634":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40059:4773":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4571:7240":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13581:5151":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4213:26906":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:15646:5683":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:4424:3663":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11898:4986":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:46269:4437":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:16138:5807":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5122:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4940:3679":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42896:7909":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10068:21028":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:6246:30062":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:2274:1890":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11089:7712":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2394:3608":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6066:7147":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15778:5721":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44945:4414":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13999:5230":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:47236:4480":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4897:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:10417:13773":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8575:4785":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14876:5462":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11865:7752":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15701:5699":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:9519:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:10693:8177":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:1729:8186":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"5:217:7601":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:48531:7019":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2708:3622":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7549:7193":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:2562:5914":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7756:8177":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14341:5297":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12318:3584":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:32763:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:16105:5800":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:11103:4411":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:42818:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:2037:7690":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10408:30095":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:5723:7404":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6768:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"13:109:34370":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13844:5207":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:7964:7020":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:38488:13690":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:6689:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:8241:3903":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2902:20112":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:43543:7342":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:3025:2852":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:4581:2887":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:39232:13694":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3026:33932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:7470:2799":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:5655:2605":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:507:4940":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7473:3737":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44155:7262":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:32819:2780":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15356:5591":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14386:5304":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:5846:7146":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6698:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12107:4977":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6456:20977":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6435:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3243:30337":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2548:3615":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2355:3601":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:811:7874":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8311:3549":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3000:2774":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12844:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:7339:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:2205:7226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10818:7704":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:42252:4397":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:532:5965":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:1087:34363":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11153:7704":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:15814:5725":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5407:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11755:7119":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7428:20982":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13674:5159":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7633:34385":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10251:3545":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2568:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14271:5288":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:40757:13609":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12433:5031":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:8047:2632":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4531:3666":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:365:7934":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5781:3636":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:5960:3713":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2572:3616":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:11156:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:48394:7010":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5134:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:33424:3857":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:2756:4755":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13187:5058":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13899:5216":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5107:3684":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:10271:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:828:7868":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11841:7750":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:40:8134":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3647:2858":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40776:7293":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10263:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:15957:5749":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"0:0:2100":{"crate_id":0,"path":["version_check"],"kind":"module"},"1:2660:7945":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:4507:7605":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5212:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:43261:31561":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12371:3582":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6606:7165":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:41064:7315":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15445:5613":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3919:7958":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15368:5594":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8389:8260":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13855:5208":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:45187:7403":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:5828:8186":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:4626:13593":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3078:13503":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:11877:4984":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40983:7304":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:11171:7914":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:33238:3860":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:491:7085":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:21655:8366":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46099:4430":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15039:5512":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7348:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44141:3549":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:8103:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:40750:7290":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:44447:7367":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5700:3635":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:9711:32429":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8949:7989":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15023:5509":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9056:7990":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6026:3723":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:906:7874":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7828:8100":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12098:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14994:3595":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:48414:7012":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:4771:3673":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6079:3728":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1923:7223":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:7693:30059":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11467:4982":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2748:3624":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:3237:27570":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:5995:3717":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12238:7765":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:598:34408":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"2:42034:4378":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10116:8003":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:22941:4161":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13473:5119":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4020:8231":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7537:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:2307:7232":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2636:3619":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42994:2870":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2374:3607":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:6962:13570":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13412:5108":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14723:5348":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:1903:7220":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:21661:8369":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4876:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41096:7318":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8920:2608":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6895:3835":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7525:4130":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:491:5936":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12077:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11186:7032":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:32762:2629":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5400:3541":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4232:7899":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:30933:4166":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:5135:7963":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48318:4523":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12969:3585":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:44419:7364":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:42346:2799":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7006:7823":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:328:7216":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:941:2858":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1942:7613":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9107:7998":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:5733:8186":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:3240:30341":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:1948:4769":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7249:26907":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12056:5019":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6263:7152":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3320:7952":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13252:5076":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:680:7089":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14038:5235":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8111:7979":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4916:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11425:7423":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6775:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7111:3846":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"9:424:19960":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11214:7716":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13089:5043":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:6772:33937":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3402:8203":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7410:4128":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:22650:4782":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:2423:2799":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:34563:13689":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4824:8247":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:1883:2858":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6417:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:4103:33937":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:34021:13684":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11621:7107":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5382:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15635:5682":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7947:3483":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:39944:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:4986:7699":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:7642:3537":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15434:5609":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3582:2624":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:12633:13537":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5031:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:5515:2601":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11341:7722":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5581:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10661:7702":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46167:4433":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:7306:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5817:3691":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5200:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1887:2799":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:22771:7278":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:2418:3609":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:10875:3029":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:8155:7207":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:48429:7013":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7888:7197":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:1516:7218":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7656:20983":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12056:25507":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:3029:3434":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:9128:25514":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10612:7701":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14489:5325":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14325:5295":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9325:3024":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"9:447:19958":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46229:4435":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15058:5513":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:4419:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12388:7131":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:10182:2616":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:11386:4622":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10419:3551":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3396:7874":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:1496:6003":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:33844:8361":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:44377:7362":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8384:7410":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:150:4744":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6542:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7053:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8038:4538":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:1160:7600":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15190:5548":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:22859:31377":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14788:5399":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13497:5123":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:8412:2860":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11595:4983":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:2525:4758":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4265:8186":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11497:7727":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2379:13701":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:10699:7414":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6160:20084":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4913:3678":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1066:7858":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47574:4485":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9781:21039":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43993:7927":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6480:3633":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:1494:2799":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46676:4455":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:32727:7920":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:4826:8249":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14177:5270":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13509:5124":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12647:7774":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:12030:7753":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12289:5026":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11915:21145":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:659:7679":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6532:7156":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4959:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:12627:7095":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:8317:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:5329:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15400:5602":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:44114:4405":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"15:394:20076":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44650:7381":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8957:2799":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15616:5677":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15281:5568":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10915:2609":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:41112:3876":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:44409:7363":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:10938:7266":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2743:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:41025:7311":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:14131:5246":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8630:4787":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:0:2468":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:32731:3904":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:5018:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:41055:7314":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14868:5461":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:3481:13504":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1449:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:47124:4478":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4811:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"0:82:1937":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"17:13173:5057":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6433:7154":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:2234:7229":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7584:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:8029:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:465:5925":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14855:5454":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:47780:4516":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42398:13754":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7952:7975":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11567:7732":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12091:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:12143:7610":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"12:0:2469":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:6650:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:5446:13525":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5617:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14372:5302":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:7450:4129":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4979:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:6447:7249":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44875:7396":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:48280:4522":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6849:3832":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11431:7424":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:7965:2633":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:832:7861":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22879:31379":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:42234:4394":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22211:8177":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6466:3777":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14051:5237":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:4434:33958":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:3466:31551":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7420:32720":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:852:2859":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11367:4970":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7595:4136":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14529:5330":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11414:4625":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10675:8012":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11674:7112":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1865:3018":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15313:5576":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46744:4458":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8933:2609":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7842:8101":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5166:7963":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"10:36:5916":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2876:7897":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:44762:4408":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16176:5821":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:726:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12150:5024":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"9:53:19976":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:726:8220":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:46330:4439":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:22064:8372":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:560:7936":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"9:357:19973":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6802:7172":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10058:2878":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:8202:3652":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:42857:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:45175:4054":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7361:3238":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48110:4519":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11559:7957":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4587:3668":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:4244:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5146:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43983:7270":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5914:3704":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:6550:4794":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:6642:7256":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:883:7219":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8304:7325":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"11:1566:20040":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:9171:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4078:8236":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11084:2608":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:648:8097":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4932:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7823:20984":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:15582:5665":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:1478:2859":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10717:4611":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:2381:13702":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:13292:5087":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11583:7737":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44205:7352":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44956:13806":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:15944:5072":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:45064:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:41034:7312":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"0:77:1896":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"6:5219:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14436:5321":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10997:4967":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6050:7236":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10747:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:2824:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:44739:7384":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4267:13500":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40002:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10775:27048":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12485:21171":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12072:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:44429:7365":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6874:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2323:20111":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14599:5346":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12993:21049":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:12090:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:10846:2858":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:0:2464":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2612:3618":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4800:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12900:3581":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:12352:7354":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7580:7195":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2740:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44871:7395":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13959:5225":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:34080:13686":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5830:7965":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"0:76:1888":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"2:46897:4462":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:7952:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:16069:5793":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:45077:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:6624:7620":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7643:4140":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:14933:5497":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46300:4438":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:506:8080":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12201:7762":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1621:6085":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:10694:7412":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:5465:2598":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:44085:7930":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:40022:8108":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:9524:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6872:3834":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:1686:6124":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:32848:2779":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10915:34396":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3037:2778":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:3445:7333":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:15596:5671":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44359:7361":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:22787:4142":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:12613:13539":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:10022:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:430:34364":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:5934:7862":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:6929:13568":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11799:7743":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1580:6053":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1723:6137":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:10703:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:1051:7858":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:12684:13544":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:434:34365":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13723:5184":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:40815:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14212:5282":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7769:3922":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:48478:7016":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11647:7110":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12175:7757":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5037:3682":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:47922:4517":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11102:7713":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5863:20973":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7800:4990":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44895:7401":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:42396:8103":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21400:32036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41527:7335":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:8271:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11853:7751":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7630:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46819:4460":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40674:4368":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45085:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:42415:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:7695:3920":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14012:5232":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4014:8232":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11269:21075":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4942:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:473:5930":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8294:7298":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12724:21047":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41478:7330":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43973:7926":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40072:6988":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10524:7700":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:22101:32044":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3573:26975":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:22476:8458":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7539:3645":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11812:7746":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:22490:13701":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:13024:21050":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:22536:8448":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:42480:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:5499:2600":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:3056:3861":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4802:3674":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:39811:2863":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46370:4441":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:16212:5827":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:1827:3008":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:2478:3612":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44867:7394":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}