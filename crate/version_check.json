{"root":"0:0:2286","crate_version":"0.9.4","includes_private":false,"index":{"2:13239:27735":{"id":"2:13239:27735","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2063":{"id":"0:140:2063","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:41633:8546-0:140:2063","a:2:31974:236-0:140:2063","a:2:41632:8351-0:140:2063","a:2:32031:2819-0:140:2063","a:2:3133:2965-0:140:2063","a:2:3098:246-0:140:2063","b:2:2885-0:140:2063","b:2:2879-0:140:2063","b:2:2890-0:140:2063","b:2:2605-0:140:2063","b:2:2875-0:140:2063","b:2:2602-0:140:2063","b:2:3714-0:140:2063","b:5:5854-0:140:2063","b:5:727-0:140:2063","0:151","0:145","0:146","0:148","0:56","0:155","0:150","0:153","0:143"]}}},"a:2:41633:8546-0:140:2063":{"id":"a:2:41633:8546-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:8546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13117:33547":{"id":"2:13117:33547","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:787":{"id":"0:23:787","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2435":{"id":"0:12:2435","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:2060":{"id":"0:75:2060","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:2061","`Version::read()`":"0:6:2076","`Channel`":"0:127:2062","crate":"0:0:2286","`Channel::read()`":"0:27:2076","`Date::read()`":"0:42:2076","`Date`":"0:140:2063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:93:2061":{"id":"a:2:31974:236-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80:2105":{"id":"0:80:2105","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2881:817":{"id":"2:2881:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:2984":{"id":"2:13115:2984","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:26494":{"id":"2:13132:26494","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:8351-0:140:2063":{"id":"a:2:41632:8351-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2894:1782":{"id":"2:2894:1782","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:127:2062":{"id":"a:2:31974:236-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54:2475":{"id":"0:54:2475","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5854-0:127:2062":{"id":"b:5:5854-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:134:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:2062":{"id":"0:127:2062","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:41633:8546-0:127:2062","a:2:31974:236-0:127:2062","a:2:41632:8351-0:127:2062","a:2:32031:2819-0:127:2062","a:2:3133:2965-0:127:2062","a:2:3098:246-0:127:2062","b:2:2885-0:127:2062","b:2:2879-0:127:2062","b:2:2890-0:127:2062","b:2:2605-0:127:2062","b:2:2875-0:127:2062","b:2:2602-0:127:2062","b:2:3714-0:127:2062","b:5:5854-0:127:2062","b:5:727-0:127:2062","0:137","0:133","0:138","0:37","0:132","0:135","0:130"]}}},"0:52:2468":{"id":"0:52:2468","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:140:2063":{"id":"b:2:2602-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31902:2800","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:57:787":{"id":"0:57:787","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2694:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:1278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13149:2552":{"id":"2:13149:2552","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:3021":{"id":"2:13158:3021","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:13915":{"id":"5:5605:13915","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:27734":{"id":"2:13238:27734","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31976:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:1278":{"id":"0:105:1278","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30814:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2076":{"id":"0:42:2076","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:2286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:2029":{"id":"2:13155:2029","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:140:2063":{"id":"b:2:3714-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13190:26533":{"id":"2:13190:26533","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:2034":{"id":"2:13228:2034","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:127:2062":{"id":"b:2:2602-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13122:26441":{"id":"2:13122:26441","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:2052"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:93:2061":{"id":"b:2:2885-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31976:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32031:2819-0:140:2063":{"id":"a:2:32031:2819-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:2819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13139:26523":{"id":"2:13139:26523","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:26522"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2460":{"id":"0:50:2460","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2688:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13169:26525":{"id":"2:13169:26525","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:7497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:27786":{"id":"5:5622:27786","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:27735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:2016":{"id":"0:62-0:39:2016","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:2016","glob":true}}},"b:2:2875-0:127:2062":{"id":"b:2:2875-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2159"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13193:2765":{"id":"2:13193:2765","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:33555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:7590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1278":{"id":"0:154:1278","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30814:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:462":{"id":"0:139:462","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:93:2061":{"id":"b:2:2890-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13134:33550":{"id":"2:13134:33550","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:33551","crate::ops::Index":"2:39104:8380"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:33551":{"id":"2:13135:33551","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:8381","str::slice_unchecked":"2:13134:33550"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:127:2062":{"id":"b:2:2885-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13175:33553":{"id":"2:13175:33553","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:13782","str::split":"2:13166:2025","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:33554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:7581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:34260":{"id":"5:5608:34260","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:13:2447":{"id":"0:13:2447","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2066":{"id":"0:45:2066","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31974:236-0:140:2063":{"id":"a:2:31974:236-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2879-0:140:2063":{"id":"b:2:2879-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2879-0:127:2062":{"id":"b:2:2879-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:469":{"id":"0:156:469","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30814:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:2153":{"id":"2:13152:2153","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:33559":{"id":"2:13209:33559","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:34263":{"id":"5:5620:34263","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2823","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2823","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2016":{"id":"0:39:2016","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:140:2063"],"is_stripped":true}}},"0:32:2124":{"id":"0:32:2124","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:31367":{"id":"2:13144:31367","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:31368"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:7594","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:2038":{"id":"2:13181:2038","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782","str::rsplitn":"2:13184:26530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:7584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2580":{"id":"0:36:2580","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:2015":{"id":"0:24:2015","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:127:2062"],"is_stripped":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:787":{"id":"0:144:787","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2607:25513":{"id":"2:2607:25513","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:8351-0:93:2061":{"id":"a:2:41632:8351-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5854-0:140:2063":{"id":"b:5:5854-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2875-0:93:2061":{"id":"b:2:2875-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2159"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3098:246-0:127:2062":{"id":"a:2:3098:246-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2889:1784":{"id":"2:2889:1784","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:127:2062":{"id":"b:5:727-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3041","5:730:3042","5:731:3043"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:2577":{"id":"0:35:2577","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:140:2063":{"id":"b:2:2875-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2159"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:139:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:462":{"id":"0:152:462","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:33560":{"id":"2:13213:33560","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:13779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2076","0:30:2066","0:32:2124","0:33:2569","0:34:2573","0:35:2577","0:36:2580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:469":{"id":"0:107:469","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30814:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:685":{"id":"0:134:685","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:2965-0:93:2061":{"id":"a:2:3133:2965-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3098:246-0:93:2061":{"id":"a:2:3098:246-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:2137":{"id":"0:84:2137","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:2123"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:8351-0:127:2062":{"id":"a:2:41632:8351-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:8351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3133:2965-0:127:2062":{"id":"a:2:3133:2965-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3714-0:127:2062":{"id":"b:2:3714-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2286":{"id":"0:0:2286","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:2061","`is_max_version`":"0:80:2105","`is_exact_version`":"0:81:2113","`is_max_date`":"0:77:2082","`is_exact_date`":"0:78:2089","`triple()`":"0:75:2060","`Date`":"0:140:2063","`Channel`":"0:127:2062"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:2060","0:76:2074","0:77:2082","0:78:2089","0:79:2097","0:80:2105","0:81:2113","0:82:2123","0:84:2137","0:60-0:3:1906","0:61-0:24:2015","0:62-0:39:2016"],"is_stripped":false}}},"2:13125:26495":{"id":"2:13125:26495","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13126:26491":{"id":"2:13126:26491","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:4319":{"id":"2:13143:4319","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:3730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2569":{"id":"0:33:2569","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:462":{"id":"0:103:462","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:26522":{"id":"2:13138:26522","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:26523"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31976:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:144:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13148:31369":{"id":"2:13148:31369","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:7596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2460":{"id":"0:14:2460","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:33554":{"id":"2:13178:33554","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:13782","str::split":"2:13166:2025","prim@char":"1:12325:458","str::split_terminator":"2:13175:33553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:7582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:2021":{"id":"2:13146:2021","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:7592","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13142:7607":{"id":"2:13142:7607","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:7576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2066":{"id":"0:30:2066","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:31368":{"id":"2:13145:31368","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:31367"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:7595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:33555":{"id":"2:13196:33555","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2765"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:7591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:26534":{"id":"2:13222:26534","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2573":{"id":"0:34:2573","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:25724":{"id":"2:13219:25724","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:27740":{"id":"2:13243:27740","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38359"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:34259":{"id":"5:5604:34259","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2823","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2823","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:34261":{"id":"5:5611:34261","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2076":{"id":"0:27:2076","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:2286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:3041":{"id":"5:729:3041","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:5:727-0:93:2061":{"id":"b:5:727-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3041","5:730:3042","5:731:3043"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13130:26493":{"id":"2:13130:26493","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:34262":{"id":"5:5619:34262","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2888:136":{"id":"2:2888:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:34259","5:5605:13915","5:5608:34260","5:5611:34261","5:5619:34262","5:5620:34263","5:5621:8454","5:5622:27786","5:5623:27787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13184:26530":{"id":"2:13184:26530","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:2038","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:7585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:33563":{"id":"2:13244:33563","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:33563"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:7521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5854-0:93:2061":{"id":"b:5:5854-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32031:2819-0:93:2061":{"id":"a:2:32031:2819-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:2819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:81:2113":{"id":"0:81:2113","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:33561":{"id":"2:13216:33561","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:27787":{"id":"5:5623:27787","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:27736"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2878:2159":{"id":"2:2878:2159","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:787":{"id":"0:38:787","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:140:2063":{"id":"b:2:2890-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:2984","2:13116:33546","2:13117:33547","2:13119:33548","2:13122:26441","2:13123:33549","2:13124:334","2:13125:26495","2:13126:26491","2:13128:26492","2:13130:26493","2:13132:26494","2:13134:33550","2:13135:33551","2:13136:26518","2:13137:26519","2:13138:26522","2:13139:26523","2:13141:7597","2:13142:7607","2:13143:4319","2:13144:31367","2:13145:31368","2:13146:2021","2:13147:33552","2:13148:31369","2:13149:2552","2:13152:2153","2:13155:2029","2:13158:3021","2:13162:2983","2:13166:2025","2:13169:26525","2:13172:26527","2:13175:33553","2:13178:33554","2:13181:2038","2:13184:26530","2:13187:26532","2:13190:26533","2:13193:2765","2:13196:33555","2:13199:33556","2:13202:33557","2:13205:2024","2:13207:33558","2:13209:33559","2:13211:2033","2:13212:2031","2:13213:33560","2:13216:33561","2:13219:25724","2:13222:26534","2:13225:33562","2:13228:2034","2:13231:2032","2:13234:2066","2:13236:27731","2:13237:27732","2:13238:27734","2:13239:27735","2:13240:27736","2:13241:27738","2:13242:27739","2:13243:27740","2:13244:33563","2:13246:8343","2:13247:33564"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13147:33552":{"id":"2:13147:33552","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:7593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2468":{"id":"0:16:2468","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:27739":{"id":"2:13242:27739","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38359"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:127:2062":{"id":"b:2:2605-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:25513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13162:2983":{"id":"2:13162:2983","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:127:2062":{"id":"b:2:2890-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3:1906":{"id":"0:3:1906","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:2061"],"is_stripped":true}}},"0:131:787":{"id":"0:131:787","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-0:3:1906":{"id":"0:60-0:3:1906","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1906","glob":true}}},"2:13202:33557":{"id":"2:13202:33557","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:33556"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:7588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13234:2066":{"id":"2:13234:2066","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:8408"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:8408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:8408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:3042":{"id":"5:730:3042","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9:2066":{"id":"0:9:2066","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2606":{"id":"0:48:2606","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:33558":{"id":"2:13207:33558","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:2024":{"id":"2:13205:2024","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:33562":{"id":"2:13225:33562","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:2089":{"id":"0:78:2089","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3716:1797":{"id":"2:3716:1797","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39273:4983","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:2032":{"id":"2:13231:2032","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:13782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:140:2063":{"id":"b:5:727-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:3041","5:730:3042","5:731:3043"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"name":"Ord","id":"2:2688:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13240:27736":{"id":"2:13240:27736","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5856:1757":{"id":"5:5856:1757","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2475":{"id":"0:18:2475","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:2076":{"id":"0:6:2076","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:2286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:2965-0:140:2063":{"id":"a:2:3133:2965-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:2965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13123:33549":{"id":"2:13123:33549","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:26527":{"id":"2:13172:26527","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:2025"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:7498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:13780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13116:33546":{"id":"2:13116:33546","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:27731":{"id":"2:13236:27731","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:27732":{"id":"2:13237:27732","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:13859","Self::is_ascii":"2:13236:27731"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:13859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:2819-0:127:2062":{"id":"a:2:32031:2819-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:2819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:2074":{"id":"0:76:2074","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82:2123":{"id":"0:82:2123","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:2137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:33564":{"id":"2:13247:33564","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:33564"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:7520","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:140:2063":{"id":"b:2:2885-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:26495","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13136:26518":{"id":"2:13136:26518","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13138:26522","str::split_at_mut":"2:13137:26519"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:2076","0:9:2066","0:12:2435","0:13:2447","0:14:2460","0:16:2468","0:18:2475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13211:2033":{"id":"2:13211:2033","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:26492":{"id":"2:13128:26492","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:8454":{"id":"5:5621:8454","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:2751":{"id":"2:2604:2751","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:26519":{"id":"2:13137:26519","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13136:26518","str::split_at_mut_checked":"2:13139:26523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2694:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:731:3043":{"id":"5:731:3043","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2082":{"id":"0:77:2082","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:93:2061":{"id":"b:2:2602-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:93:2061":{"id":"0:93:2061","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:41633:8546-0:93:2061","a:2:31974:236-0:93:2061","a:2:41632:8351-0:93:2061","a:2:32031:2819-0:93:2061","a:2:3133:2965-0:93:2061","a:2:3098:246-0:93:2061","b:2:2885-0:93:2061","b:2:2879-0:93:2061","b:2:2890-0:93:2061","b:2:2605-0:93:2061","b:2:2875-0:93:2061","b:2:2602-0:93:2061","b:2:3714-0:93:2061","b:5:5854-0:93:2061","b:5:727-0:93:2061","0:97","0:104","0:102","0:20","0:99","0:101","0:106","0:96","0:22"]}}},"0:147:685":{"id":"0:147:685","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:33556":{"id":"2:13199:33556","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:33557"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:7587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:8546-0:127:2062":{"id":"a:2:41633:8546-0:127:2062","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:8546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:127:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2097":{"id":"0:79:2097","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:140:2063":{"id":"b:2:2605-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:25513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:93:2061":{"id":"b:2:2605-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:25513"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61-0:24:2015":{"id":"0:61-0:24:2015","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:2015","glob":true}}},"2:13119:33548":{"id":"2:13119:33548","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13117:33547"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:27738":{"id":"2:13241:27738","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:38359"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:7597":{"id":"2:13141:7597","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:7575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:26532":{"id":"2:13187:26532","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:685":{"id":"0:98:685","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:93:2061":{"id":"b:2:2879-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41633:8546-0:93:2061":{"id":"a:2:41633:8546-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:8546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:787":{"id":"0:21:787","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:2076","0:45:2066","0:48:2606","0:50:2460","0:52:2468","0:54:2475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3714-0:93:2061":{"id":"b:2:3714-0:93:2061","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:2061","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13212:2031":{"id":"2:13212:2031","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:140:2063":{"id":"a:2:3098:246-0:140:2063","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:140:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13166:2025":{"id":"2:13166:2025","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:13782","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:31367","str::rsplit":"2:13172:26527"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:7493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:8343":{"id":"2:13246:8343","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:8343"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:7517","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11443:5191":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:42992:7219":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:7436:2988":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5037:3863":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5039:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6655:5004":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14111:5455":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14516:5539":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5160:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13814:5414":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5722:3818":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3590:2814":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:40259:7534":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:7650:31568":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4891:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:7841:3718":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15102:5736":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15778:5931":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10573:34675":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:896:8111":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:1098:7938":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:7586:13856":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:8167:2822":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12443:5244":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:33430:13928":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:40208:7527":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:5307:3866":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7813:7427":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15760:5925":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:2562:6125":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:8288:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:33776:13930":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:10315:8255":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4959:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15635:5892":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8304:8232":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7539:3826":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14503:5538":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:43166:8175":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8162:7251":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:43703:7595":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2026:13955":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7769:4103":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:39947:7520":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21558:8610":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:523:6170":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:8175:8093":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14051:5447":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6342:34668":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5031:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:33949:4047":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10612:7951":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:1917:7453":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:4986:7949":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:12454:7366":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12572:5187":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15058:5723":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8685:8542":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7823:21237":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3571:31958":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11040:3046":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3159:4042":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:3614:6050":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5831:3875":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:256:7934":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:39926:7519":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44158:7629":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:43366:4595":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:3669:3620":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6066:7378":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:765:25485":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40343:7545":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:45504:4640":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3925:3841":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7954:8425":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:30190:8466":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:5457:13767":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6714:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6678:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5415:6051":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6746:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12308:26230":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13211:5282":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7621:8143":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:9220:8576":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:4614:3850":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:2197:8330":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:1692:6336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14284:5500":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:3661:3047":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:31975:2818":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40291:7540":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:15836:5941":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:7655:7846":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:30841:2957":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13877:5425":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7497:6059":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:4856:3857":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:9326:26093":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:12825:13780":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46590:7229":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11510:7977":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:536:8334":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10185:3723":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5846:7377":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1580:6264":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6730:8571":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15814:5935":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7538:8362":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:6838:7488":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:883:7450":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:4149:3047":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2878:3811":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2040:7194":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:680:7320":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:7081:8605":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11877:5194":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12929:3763":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:5540:2789":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:14876:5672":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6749:7402":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44458:7632":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40362:7547":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7559:7425":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"9:0:2655":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5367:21224":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11715:7346":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12107:5187":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7452:4310":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:521:25486":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11571:8269":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:10248:3057":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8206:7636":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:5006:3862":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:7412:4309":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:8702:4803":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44047:7621":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14235:5493":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8172:4747":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:40402:7551":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4281:8509":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11537:7979":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:4784:3076":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:11132:7497":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6335:8068":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11730:7347":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:46119:4693":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8788:8556":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4992:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:22107:8425":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:710:8097":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5370:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21499:8611":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10524:7950":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4979:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15206:5761":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"0:84:2137":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"11:0:2657":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"0:0:2286":{"crate_id":0,"path":["version_check"],"kind":"module"},"16:2708:3803":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:9139:3046":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:15151:5747":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6606:7396":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:43470:7581":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10982:21310":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:6784:8223":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:12878:13787":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14449:5532":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10609:14021":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:37701:13931":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1565:6252":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43570:7587":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:545:6183":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6670:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1510:6219":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:44138:7624":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:42529:4124":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:5853:7640":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:45401:4630":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46450:4732":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11089:7961":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6231:7380":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2788:3807":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3558:13825":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44150:7627":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:4468:7640":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43995:13794":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:43838:7605":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"15:394:20329":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:12111:26408":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11574:7455":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14189:5483":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2450:8416":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:2285:2076":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12225:8013":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:392:20212":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15521:5868":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4800:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22905:4346":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:40785:7201":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:8351:7189":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45842:4666":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15214:5763":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:6311:26433":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:0:2661":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:9105:2797":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:9427:4820":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:14986:5713":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40744:7559":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:2443:8111":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:7955:4740":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:2526:4968":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:4531:3847":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13832:5415":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:7998:5200":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:8660:32447":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22651:4322":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1559:6250":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11853:8000":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15023:5719":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4243:30524":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:598:34688":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:570:6196":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:2418:3790":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15434:5819":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1890:3208":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5445:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:5107:3865":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5423:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4909:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:8282:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:22738:4329":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40527:7554":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:39286:7200":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:45322:4621":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:44223:14054":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:39887:4561":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1671:6326":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43488:7582":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11392:7973":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7480:2988":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5191:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"14:187:20306":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11086:26414":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:4335:8149":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7575:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45821:4665":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4246:7640":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14475:5534":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13785:5409":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1896:8123":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12768:21279":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:23015:4356":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:1557:8098":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:15596:5881":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15799:5934":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:15678:5908":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6562:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:7873:4084":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42760:7569":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9382:7640":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:5700:3816":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2979:8147":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:11089:7493":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45608:4654":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12863:3761":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"9:178:20278":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:4487:4984":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:2175:21356":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12189:8010":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6821:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13797:5411":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:4771:3854":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5624:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11227:7966":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2666:8195":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:22982:4353":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:22816:7513":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11665:4835":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2748:3805":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:573:5150":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11016:7957":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13344:5308":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:7452:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7584:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10187:4583":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:8155:7438":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7888:7428":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12494:5246":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15769:5929":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11583:7986":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9272:25719":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"14:0:2659":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6650:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8259:4085":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1490:6211":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12213:8012":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11075:26418":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6940:6054":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11242:7967":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22774:31397":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:787:7450":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6300:8056":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:742:8098":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:482:20210":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14994:3776":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:4743:3853":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:581:2957":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:926:8365":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5064:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:670:7933":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5244:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:40277:7537":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:22545:4992":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5716:2795":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:2236:7460":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:403:7936":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11012:26229":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1342:8106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:15168:5752":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8515:7493":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:2231:7455":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14855:5664":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11605:2061":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:6872:4015":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:22335:13945":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:15608:5884":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:1356:7843":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9858:21293":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4835:787":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:12810:8157":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:43823:7599":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3551:2803":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:7933:5005":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3844:8206":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:3171:13742":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:7359:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5376:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11102:7962":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7306:34669":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5502:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2151:8107":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13235:5283":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:7094:33460":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7144:21234":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:538:5155":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:10256:3063":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:12582:7589":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6758:3988":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:33234:13925":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:830:8117":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5677:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15126:5738":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:883:8105":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15748:5923":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14977:5712":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:22789:31407":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5653:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"12:0:2658":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:2352:8107":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12597:5251":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:12464:21423":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9265:8246":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7014:21233":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:10503:4988":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6409:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40102:4568":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"6:4942:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:563:5157":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10419:3732":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15313:5786":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45760:4662":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:1066:20292":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40009:7523":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5336:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13497:5333":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1465:3046":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43396:7576":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4641:3851":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:8012:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22949:4350":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:942:8102":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2823:13858":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22682:4323":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5630:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:3608:2813":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12030:8002":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3029:3615":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1582:8112":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10828:34681":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13986:5439":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9938:21296":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:5052:8533":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9300:8251":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:4712:8530":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9781:21292":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13844:5417":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:45711:4659":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5020:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1496:2988":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"15:0:2660":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7111:4027":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:8259:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43712:7596":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6664:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:6957:13813":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:10250:3065":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:4913:3859":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:16105:6010":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:14912:5702":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4346:8209":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6480:3814":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12289:5236":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2497:13945":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4952:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6621:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4885:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6460:6796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:2458:3792":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44170:4604":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:1518:7449":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8652:7253":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:23004:4355":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:1051:8107":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3374:8381":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11688:7344":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6560:3815":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6811:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4971:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3382:8204":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:9695:8229":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:608:7928":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:32451:4041":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5713:2793":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10622:34680":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2506:2211":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5225:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9178:4812":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:43245:7501":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:2304:7420":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:12566:7586":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:9313:4816":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9445:7641":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12851:7368":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:875:8104":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:44389:4610":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4104:33418":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:564:6193":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8439:4084":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13485:5332":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11621:7338":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11351:8163":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7461:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12478:5245":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44435:4615":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13424:5319":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10317:3728":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7098:7416":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7379:34665":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7266:26430":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40249:7533":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15655:5895":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6385:3951":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3026:3041":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10607:26427":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5598:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:43542:7585":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8528:8238":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:45565:4644":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3029:7191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15957:5959":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:30407:4359":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"15:288:20318":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:729:8467":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:40076:4567":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:11064:3047":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8093:6066":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:589:5158":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46549:7226":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:1535:6233":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:39104:8380":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13187:5268":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:31951:8171":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"11:1676:34640":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"9:447:20211":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2528:3795":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:21976:4991":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15342:5794":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5277:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5489:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:39459:13859":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:5974:8220":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:41500:4587":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12792:3685":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43802:13793":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12371:3763":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:44142:7625":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11634:7340":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:4609:7848":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:44397:4612":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:3397:8123":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:45948:4686":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5526:2788":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:515:5153":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:23026:4357":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:11171:8160":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6466:3958":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5643:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3899:3840":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10498:8428":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11142:5187":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:3847:8207":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5102:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11354:7972":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:2369:8116":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:1628:6300":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1653:6319":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11153:7954":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1075:7843":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:586:6205":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:4438:33428":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11595:5193":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1883:3046":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11198:2798":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10350:3729":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11092:26429":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:6140:7479":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:102:7442":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:15569:5869":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:42799:7571":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44166:7631":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5200:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10666:8199":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:497:6150":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12089:5231":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10092:21299":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:3238:3046":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:41332:8464":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:7372:2988":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15092:5735":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1942:7856":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:15646:5893":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:13748:8366":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21465:32598":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13723:5394":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10905:7956":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:8328:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22938:4349":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:7851:7876":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12342:7356":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4870:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11313:7336":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6543:3965":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46705:4735":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:948:8104":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15473:5831":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9755:21274":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12422:7364":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22705:4328":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5083:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1526:6227":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:1888:3207":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:6026:7478":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:351:34631":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:16121:6015":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11405:7974":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:8197:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15249:5769":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1971:8392":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7648:8091":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:8294:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2236:7196":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:862:2988":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6948:3822":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:560:8186":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9374:7864":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:517:6167":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11467:5192":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15426:5818":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:45483:4639":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12647:8023":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6609:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42752:7567":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:6649:7480":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10155:3721":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3289:8200":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:1726:33418":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:40353:7546":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11214:7965":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13089:5253":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:954:8105":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8838:3046":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7910:26412":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4370:13741":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6441:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:7978:4741":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5250:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22419:8425":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:852:3047":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:16223:6039":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:7553:4312":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:4108:8486":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6698:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:25:682":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:12362:7361":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:39024:3050":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6398:5002":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:364:34636":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5122:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8211:7637":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:11850:8165":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:4944:8496":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10907:7635":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:44162:7630":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:7446:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"14:220:6072":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6574:3832":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:6763:33418":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9161:4811":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45690:4658":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6524:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:15190:5758":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5212:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2680:26424":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11345:7875":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:9902:32162":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:687:3047":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4940:3860":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:4821:7948":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"11:2383:3046":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:38445:13935":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:11337:7585":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4142:8487":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:6402:8701":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14147:5461":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8220:8231":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:37866:13934":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5515:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"9:330:6131":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:4050:8481":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8145:3664":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43217:7499":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:39871:7517":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45369:4628":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:15400:5812":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:5895:8215":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12808:3759":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:2554:34639":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14847:5661":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:8265:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5472:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:22916:4347":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:40321:7543":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:41316:4573":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6927:4021":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13766:5404":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"2:46529:7224":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:3284:34604":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9737:21276":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:4604:7847":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11029:2799":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2854:3810":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4811:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10920:4821":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6738:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12516:8019":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:8029:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22868:8425":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:5217:7467":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1707:6343":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7397:34667":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2838:3809":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:6120:5002":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10887:34677":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6398:3812":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:31902:2800":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:870:8364":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12543:8022":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:4802:3855":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11026:21311":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15266:5776":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43235:8176":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11075:5180":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8582:7639":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"0:79:2097":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"6:7537:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:40239:7531":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1327:8107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:11209:8161":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41632:8351":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:2469:8123":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:5817:3872":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7695:4101":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5002:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5046:6500":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7618:6061":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:2757:4965":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40172:2801":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:4882:3858":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:8226:21239":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:40199:8174":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11497:26409":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"10:0:2656":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11898:5196":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14066:5450":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:31965:7516":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6494:7386":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6491:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"13:0:2652":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:16176:6031":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12300:21422":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:0:2662":{"crate_id":17,"path":["object"],"kind":"module"},"6:5134:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:42807:7572":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7549:7424":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:1007:7420":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15383:5808":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1581:2988":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:430:34642":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5260:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11810:8207":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:4673:7471":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:7472:2988":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:295:2823":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11906:7656":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:10246:3058":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:43728:7517":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6665:21231":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45629:4655":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6657:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46031:4689":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12695:8027":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:359:8182":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13173:5267":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5466:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:21678:4990":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15992:5989":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"18:0:2663":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:16069:6003":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:3244:29015":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10137:21275":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40751:7560":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9155:2988":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:40142:7472":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7338:25943":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:1547:6242":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11557:7980":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"14:160:7834":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:14311:5502":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9807:21282":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:623:34687":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:13024:21303":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8607:4791":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:15944:5282":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:14386:5514":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:40537:7555":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10068:21281":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7656:21236":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:4273:8508":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:800:8111":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:40330:7544":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:22927:4348":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:11924:13775":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:8601:8238":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4921:8212":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8492:7527":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1699:6339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5671:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:22666:7509":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11367:5180":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2598:2212":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:14298:5501":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4102:8485":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11743:7348":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:21448:32601":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:8306:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10194:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:3091:2962":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:1191:34586":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8750:7215":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10251:3726":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:2203:7941":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15116:5737":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14545:5542":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6915:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13292:5297":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6721:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2636:3800":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46613:7235":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2936:20366":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13946:5432":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:21988:32603":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11788:7991":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9147:8243":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:6600:33418":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5038:8532":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:21411:2957":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:7585:13855":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:718:5170":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:635:5169":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8828:4997":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"0:77:2082":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:925:8099":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:45775:4663":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:1923:7454":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43347:8180":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2548:3796":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2355:3782":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:2207:7457":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12530:8021":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:8249:2821":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:45579:4645":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7597:4317":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:860:8031":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:40179:7502":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:45469:4638":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21949:8425":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10218:3725":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5665:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:45728:4660":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40775:7563":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5108:8538":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:9088:2796":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1577:3046":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:30445:4360":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7561:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12251:8015":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:4323:8148":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:113:25475":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5960:3894":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14560:5546":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12297:8350":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:15376:5807":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11189:5184":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2572:3797":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2309:7463":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15463:5826":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46273:4727":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:3027:33545":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44154:7628":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5863:21226":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:613:34690":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:41466:4586":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:4587:3849":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:3037:33538":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:3174:13743":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:11764:7351":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:46318:4728":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6219:2062":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:43944:7611":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15301:5785":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7609:4320":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46363:4729":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11166:5182":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:4080:8483":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4924:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21421:32596":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:30460:3054":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:7582:13987":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:4309:3046":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5436:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:689:7323":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5306:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6976:6056":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13412:5318":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:7480:2994":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:698:7324":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22201:8693":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:6505:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8855:4809":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:41360:7203":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:30471:31404":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"11:2498:20288":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:15039:5722":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:43588:7588":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:2234:7944":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5112:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:8253:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3552:13826":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:6844:7487":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:22433:8689":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:9346:4819":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1496:6214":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:3475:6049":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4062:3842":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14038:5445":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5995:3898":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21954:8613":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15931:5268":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:45550:4643":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11256:7334":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:11293:21329":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11341:7971":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2374:3788":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:640:8187":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13855:5418":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13015:5241":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"0:82:2123":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"17:16032:5286":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:5314:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10960:2802":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:11209:26288":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:4389:13828":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:6295:7506":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14414:5520":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:42554:3054":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:7485:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5686:3813":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3586:13745":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"14:40:5283":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:4530:3073":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9671:21277":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:10714:5200":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:40793:7564":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11676:7653":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:8317:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7295:7874":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:10692:26424":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12557:5180":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:41663:3049":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12043:8003":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2499:13946":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:1043:7420":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6727:7867":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:774:7449":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1142:8109":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10534:34674":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40378:4057":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5415:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3380:8203":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14463:5533":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6895:4016":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:1155:34588":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:39273:4983":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:280:33418":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:839:3046":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:1025:8106":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7389:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6278:8041":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:912:8110":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:2536:6121":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:844:8363":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1830:8123":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:328:7447":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10897:7642":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:2403:3047":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:3329:6048":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:7973:8227":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"10:36:6127":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13399:5316":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2808:3808":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:43011:7574":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7799:3819":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1593:7451":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:6615:7560":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:21550:8425":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1585:6266":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10707:31507":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:7339:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:41654:14001":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4787:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:10885:8425":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:11770:8206":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:7467:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12127:5233":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6763:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:6991:34664":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10672:8203":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:10661:7952":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11493:7975":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8026:8348":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5146:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6442:3954":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46471:4733":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7132:7419":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:12506:7578":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:1566:20293":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:37811:13933":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:3305:7454":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44134:7623":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8509:3730":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6417:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9886:21294":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:10258:3064":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43674:7592":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:3264:7945":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11269:21328":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:8309:8233":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11547:3663":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6588:7388":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46518:7223":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:22109:8609":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8236:4748":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4761:7052":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:2448:8415":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:7119:33426":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21450:32590":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:43007:7573":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:78:2089":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"5:2089:4748":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:5196:8153":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:8472:8424":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3287:8199":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4294:8510":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22754:31406":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:31940:8170":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10759:5187":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:7602:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13738:5398":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14868:5671":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:2569:4311":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7402:8142":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"0:76:2074":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"11:434:34643":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:1546:8097":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5236:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12949:3765":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6164:7640":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4867:8500":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:6343:8221":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:4456:8150":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4683:3074":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7730:4824":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:15368:5804":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11914:7656":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:8136:7435":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6435:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11637:4832":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:3245:7452":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14575:5241":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:3271:7453":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:5064:7640":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13387:5313":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:8622:13905":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:45661:4657":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:591:8342":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:4239:7640":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8502:7554":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:2289:34581":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:13636:7506":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:35825:4048":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:8006:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42250:3057":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:872:7935":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:8271:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:12292:26256":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43226:7500":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:21479:32593":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:5483:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:42257:3058":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:3810:3838":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:22971:4352":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:13753:5402":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:16198:6033":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"7:31:20197":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2902:20365":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:2394:3789":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7984:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8630:7037":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:559:6191":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:485:6146":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:43624:7590":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:1891:8111":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11682:7654":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:30439:7198":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9293:8250":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43737:7520":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13046:3771":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15624:5888":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7355:4066":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11647:7341":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:484:26420":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5347:3867":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7910:21238":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:15445:5823":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13972:5202":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2998:3834":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:1887:2988":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6802:7403":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:1603:8113":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:7714:8123":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12076:8005":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:33603:13929":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5565:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12318:3765":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6962:3823":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14325:5505":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4560:3848":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2702:7860":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:40221:7528":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:16259:5313":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:5902:8218":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:11365:8164":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13674:5369":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15734:5916":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15390:5809":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:40268:7536":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9190:8575":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:553:6188":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:6849:7485":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:7645:4321":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:16151:6023":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11773:3745":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4830:3856":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10044:21298":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:706:7326":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10878:8264":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:3842:3839":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22388:13945":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:4863:8497":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6849:4013":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7168:4816":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:2103:8124":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:10675:31499":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:3033:33541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1686:6335":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46060:4690":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12264:8016":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42152:8159":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8228:7861":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3533:2213":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:15418:5816":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:22716:31405":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15289:5779":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11887:7267":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11300:7260":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5181:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:16165:6026":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7580:7426":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:39108:4428":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13774:5406":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:15582:5875":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:7516:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:45536:4642":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:479:6144":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:8448:7252":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45646:4656":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2768:3806":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:13656:7508":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:5914:3885":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1865:3201":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40114:3730":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11063:7960":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6353:3947":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:33057:8602":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:15:2476":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:3952:2988":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"8:0:2654":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7570:3827":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:43420:7493":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3250:34605":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:6619:8222":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:1593:6271":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15720:5914":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8040:8349":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:2114:8125":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"18:507:5150":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3335:2820":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:3778:3837":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:43379:4598":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:16138:6017":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:1057:8106":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10710:7953":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:5453:13766":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4864:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6880:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:3250:31133":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2432:2279":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39877:7518":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:8300:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:16212:6037":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:13473:5329":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:123:7443":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:33175:13926":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6263:7383":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13272:5296":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:8216:7439":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12993:21302":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6782:21232":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6427:8071":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:12819:7326":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:16093:6008":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:2612:3799":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2660:3801":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:5409:33418":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5588:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5219:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:597:3718":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4876:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:7366:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:671:7845":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:16235:6042":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:7689:26265":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11185:2797":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6648:7398":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7755:3821":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11825:7997":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46628:7236":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:21570:4990":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1485:6209":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6120:21228":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:491:7316":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5290:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13308:5301":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:40:8382":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:42592:3056":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:37756:13932":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:16079:6004":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:700:2988":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:44006:7613":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4837:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13375:5312":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9527:3207":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12278:8017":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8593:8241":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7085:7413":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10564:2796":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5756:8032":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:1536:8110":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5781:5002":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4759:7050":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:3149:8603":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15701:5909":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45352:4625":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:1066:8107":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39266:8172":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7604:3829":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7429:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14212:5492":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:7412:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"0:81:2113":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7727:3830":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5536:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6098:21227":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15010:5714":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11051:7959":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40766:7562":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10399:3730":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22245:8694":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:39955:7517":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:45416:4631":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5382:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6542:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8534:8240":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2289:2222":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4757:2971":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14012:5442":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6620:3967":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:44146:7626":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:2140:8106":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45986:4688":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"15:327:20323":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6597:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3949:8208":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5227:8213":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16249:6043":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11042:7958":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:917:8097":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40230:7530":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10439:5175":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11674:7343":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:22461:8690":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:7701:13901":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:12830:13779":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:5769:7375":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:46564:7227":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:643:5150":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7509:8083":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6047:8034":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46666:7238":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:3473:7946":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:31944:4085":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:13581:5361":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15138:5741":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40043:7524":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:12764:8408":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2478:3793":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14372:5512":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15356:5801":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11115:7963":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:8247:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:4468:3845":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:21666:8425":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7006:8072":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10472:26453":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:16050:5296":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:43390:7575":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10931:7251":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:3597:7947":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:41711:3046":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:45969:4687":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:39970:13852":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43406:3730":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41574:3047":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3741:33418":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5344:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:7527:4311":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:6471:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10671:34679":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8522:7592":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12724:21300":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:22598:4994":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11217:4604":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:856:8102":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11755:7350":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4826:8512":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:41444:31394":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5283:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:532:6176":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:165:20299":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:3196:3779":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6775:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:10284:3727":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11865:8001":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12485:21424":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:1933:4978":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:32032:2969":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:13494:8167":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:9897:32448":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:12620:7497":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6317:8060":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3229:4043":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7428:21235":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:22847:8480":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:5949:7640":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:44016:7617":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:42490:7204":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12201:8011":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11841:7999":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1107:8108":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12408:5240":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9118:2798":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5385:3721":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14529:5540":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11324:7968":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13606:5365":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12584:7954":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:43327:8179":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:7348:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:2592:3798":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"14:214:7440":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:9283:8156":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8314:8453":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2338:3780":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11567:7981":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10877:7955":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8575:7638":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41622:7849":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10720:34678":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15176:5755":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6729:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:5929:8219":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6900:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3531:13936":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11747:25775":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13325:5303":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13899:5426":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1910:7452":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5897:3880":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12887:7369":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46643:7237":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:754:7333":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46421:4731":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10294:3201":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:6788:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:6039:7467":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4424:3844":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:5029:8531":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22836:4342":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5557:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3819:8111":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11524:7978":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:150:4954":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:578:6201":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10902:7644":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4269:7640":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:39913:4564":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4156:8489":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6412:21229":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:3339:8202":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:2542:6122":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6504:3961":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11128:3711":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3014:20367":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:4427:8210":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1723:6348":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40300:7541":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1829:3192":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12659:8024":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10954:21309":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:6421:8702":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"0:75:2060":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"6:8341:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10969:26290":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5296:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:1503:6217":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3648:3046":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:16187:6032":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12824:21301":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6636:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40087:13987":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45521:4641":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:11593:26268":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3337:8201":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:6768:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5174:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40551:7556":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:39936:4565":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7473:3918":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14968:5708":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:1584:8111":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:1827:3191":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:261:7935":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5266:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5576:2791":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13437:5320":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46538:7225":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12150:5234":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"14:202:13795":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:624:7855":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:41633:8546":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:8616:3048":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21497:8425":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:15822:5938":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:3792:4748":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:14752:5578":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1588:8123":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:3288:13746":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:14587:5549":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:12804:13782":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:11323:7584":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15273:5777":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7741:3831":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6689:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:45859:4667":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8121:13906":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:22466:8688":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:6447:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1680:6332":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7633:34662":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:42768:7570":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"15:306:20319":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"11:299:7444":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4352:3843":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5781:3817":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2049:4979":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5617:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6478:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46509:7222":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:4728:13836":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13064:3774":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14091:5452":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:40058:4566":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4965:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4823:8534":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6532:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14356:5511":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:5158:31603":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9984:21297":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12508:5249":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44212:4607":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7590:3828":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4152:8488":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:1903:7451":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10381:2805":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12900:3762":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12388:7362":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:491:6147":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:8188:8096":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4612:8512":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6629:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:22321:8698":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:921:8098":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1480:3047":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6456:21230":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43981:7612":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:867:7934":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:1663:6325":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:931:8363":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5788:7633":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1599:7452":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:14341:5507":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10915:34676":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:2989:8198":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1160:7843":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43694:7594":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13538:5345":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10978:26286":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6706:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:643:8189":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5361:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5927:3886":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1517:6222":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44029:4601":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5320:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11407:4287":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:12276:4836":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"13:110:34649":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:531:7317":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:33293:13927":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7314:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43292:7502":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40392:7550":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1171:33537":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:40737:7558":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:40760:7561":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9700:26432":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44410:8181":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:14246:5495":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6026:3904":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6079:3909":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:837:8099":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7321:4593":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12056:5229":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8046:3211":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:8118:7432":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:424:20213":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39963:7521":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42271:3066":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5528:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8773:4995":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:651:5150":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"14:7:7834":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15222:5765":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:21467:32602":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11831:8208":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7569:4314":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:7891:26422":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:648:8345":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:2124:7420":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:42517:31609":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13252:5286":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3599:30687":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14079:5451":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11419:5187":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5400:3722":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41582:2988":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:9394:8157":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:8073:4147":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6813:4000":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:5075:3864":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:4501:8211":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7857:4111":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:22283:8695":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"7:78:20204":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2434:8411":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14177:5480":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5052:6502":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14402:5518":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5742:7371":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4985:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4757:7048":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:365:8184":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13553:5351":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11899:30914":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44446:4235":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9916:21295":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4094:8484":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3618:2812":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15281:5778":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6532:7387":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5457:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7306:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9254:8244":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:3247:31135":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:43869:7609":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45743:4661":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3807:8124":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11604:7650":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:43318:7503":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2303:20338":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:11244:7498":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:7546:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8844:7256":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:3279:7451":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14489:5535":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13526:5342":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15333:5793":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:16269:5318":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13146:5259":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:9131:2799":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3144:8601":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:5922:8111":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1639:6308":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8539:8463":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:9305:8252":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:43337:7504":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:538:6179":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6924:13811":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2282:8194":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:506:8330":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:7422:34579":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1527:7450":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14131:5456":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46098:4692":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6433:7385":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21676:8608":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5329:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:6681:2988":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11915:21398":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:4502:33428":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14933:5707":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:41727:2988":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13594:5362":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6634:3820":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:9205:8574":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:41591:4593":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"18:735:25484":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:1207:7939":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15616:5887":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:437:3671":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"0:80:2105":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"11:811:8123":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:10769:34673":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:5352:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:39236:8356":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2460:8421":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:3872:8123":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3782:8465":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6874:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10997:5177":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:0:2653":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11497:7976":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5581:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:22730:7197":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:4737:3075":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39060:13747":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13363:5309":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:3133:2965":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6756:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:22823:4341":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41300:4571":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15324:5790":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11883:8166":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:42264:3065":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45437:4636":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14260:5497":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2728:3804":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:96:25474":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3140:2967":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5546:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45337:4624":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:12543:7583":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15078:5731":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:832:8110":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:31958:3074":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:45919:4685":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2822:8425":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:43305:8178":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5560:2790":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12707:8028":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:1610:7454":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:673:3046":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12238:8014":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3472:7562":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:41719:3047":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:22374:8699":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6798:7870":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:10818:7954":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:6947:13812":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:1087:34647":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10989:3212":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:3623:13749":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13959:5435":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14436:5531":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13999:5440":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:6554:8111":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2438:3791":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14271:5498":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:2423:2988":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:43684:7593":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14599:5556":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12175:8006":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:542:4956":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43266:7220":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7380:7469":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:32061:2968":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5390:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7061:4025":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7363:3419":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4265:8507":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10313:8256":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:1064:33418":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:80:25473":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:45454:4637":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:39898:31391":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:11282:8162":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:32823:13924":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:481:7315":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11702:7345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:3324:13748":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:5645:2792":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:40309:7542":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:2037:7940":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:4044:8482":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12353:7360":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11661:7342":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:726:5173":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42500:3054":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46081:4691":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43719:7521":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:6060:14252":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:4634:8513":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7444:30526":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10042:3055":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:8587:8511":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:8117:13907":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:21552:8607":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4916:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43438:7498":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4976:3861":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:1850:7640":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:8061:3212":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4932:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11651:4833":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5014:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:2326:8106":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:43255:8177":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:9401:7873":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:40152:8173":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4164:8491":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6160:20337":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8460:2802":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:3179:13744":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13455:5328":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"13:229:6120":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:218:7844":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:46196:4726":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13568:5357":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:53:20229":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"14:31:7834":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12621:5252":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:41478:7638":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12433:5241":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:3319:3051":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6519:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11252:4829":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:513:7937":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:473:6141":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1311:7420":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7330:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6379:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:5717:13811":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:45792:4664":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:33116:8604":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1605:7453":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13116:5255":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"9:238:7215":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43917:7610":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:4502:3846":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:15197:5760":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11610:2807":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5400:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:2548:6123":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:45874:4668":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8150:8229":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:14723:5558":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:8202:3833":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:45384:4629":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10997:2792":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"9:357:20226":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:943:3046":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:22993:4354":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:4824:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5477:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:22960:4351":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:4718:3852":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22333:31980":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:32031:2819":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2684:3802":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:906:8123":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4897:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"10:44:6128":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:659:7929":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5636:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15456:5824":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10669:8201":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:12352:2052":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:12336:7853":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5802:21225":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:870:7449":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2741:8197":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:32637:4038":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46575:7228":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11235:4820":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:7528:7421":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13922:5431":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10018:21278":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12671:8025":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:9396:7872":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:43852:7608":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:3103:2963":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7052:8073":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:10252:3066":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40124:8395":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:13509:5334":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21433:32596":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:40050:7525":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:12683:8026":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12399:7363":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46492:4734":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3429:8450":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:14025:5443":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10170:3722":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8155:7635":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4747:8486":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:4074:8111":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:13442:31243":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14788:5609":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2323:20364":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12328:7352":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"9:502:4290":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2508:3794":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11812:7995":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1621:6296":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:5196:8213":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3502:7640":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:43524:7584":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:41518:4590":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12969:3766":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11799:7992":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15410:5815":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4964:13846":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4865:8499":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46392:4730":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42789:7215":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10195:2814":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:7392:8111":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:41566:3046":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:8301:4154":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:396:34634":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7686:8092":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:12320:14009":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:43642:7591":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8626:8242":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:9241:4815":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:465:6136":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1577:8122":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:22307:8425":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}