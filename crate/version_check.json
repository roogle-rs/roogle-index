{"root":"0:0:1951","crate_version":"0.9.4","includes_private":false,"index":{"0:30:1731":{"id":"0:30:1731","crate_id":0,"name":"parse","span":{"filename":"src/channel.rs","begin":[56,4],"end":[69,5]},"visibility":"public","docs":"Parse a Rust release channel from a Rust release version string (of the\nform `major[.minor[.patch[-channel]]]`). Returns `None` if `version` is\nnot a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(stable.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1741":{"id":"0:42:1741","crate_id":0,"name":"read","span":{"filename":"src/date.rs","begin":[22,4],"end":[26,5]},"visibility":"public","docs":"Reads the release date of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nmatch Date::read() {\n    Some(d) => format!(\"The release date is: {}\", d),\n    None => format!(\"Failed to read the release date.\")\n};\n```","links":{"crate":"0:0:1951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2228":{"id":"0:33:2228","crate_id":0,"name":"is_dev","span":{"filename":"src/channel.rs","begin":[121,4],"end":[126,5]},"visibility":"public","docs":"Returns `true` if this channel is `dev` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.is_dev());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_dev());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:33504":{"id":"2:12201:33504","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:33504"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43857:6798","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1741":{"id":"0:6:1741","crate_id":0,"name":"read","span":{"filename":"src/version.rs","begin":[21,4],"end":[25,5]},"visibility":"public","docs":"Reads the version of the running compiler. If it cannot be determined\n(see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nmatch Version::read() {\n    Some(d) => format!(\"Version is: {}\", d),\n    None => format!(\"Failed to read the version.\")\n};\n```","links":{"crate":"0:0:1951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,24],"end":[4,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108:429":{"id":"0:108:429","crate_id":0,"name":"cmp","span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30915:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[191,0],"end":[196,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:21:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12078:2629":{"id":"2:12078:2629","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2473-0:143:1728":{"id":"a:2:2740:2473-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:143:1728":{"id":"b:2:3319-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12112:1817":{"id":"2:12112:1817","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:34155":{"id":"5:5425:34155","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2480","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2480","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1498":{"id":"2:3321:1498","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39420:4465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:93:1726":{"id":"b:2:2547-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:150:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:104:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12153:2424":{"id":"2:12153:2424","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:2424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43762:6869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[198,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8316:7704-0:93:1726":{"id":"a:2:8316:7704-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:7704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1951":{"id":"0:0:1951","crate_id":0,"name":"version_check","span":{"filename":"src/lib.rs","begin":[1,0],"end":[493,1]},"visibility":"public","docs":"This tiny crate checks that the running or installed `rustc` meets some\nversion requirements. The version is queried by calling the Rust compiler\nwith `--version`. The path to the compiler is determined first via the\n`RUSTC` environment variable. If it is not set, then `rustc` is used. If\nthat fails, no determination is made, and calls return `None`.\n\n# Examples\n\n* Set a `cfg` flag in `build.rs` if the running compiler was determined to\n  be at least version `1.13.0`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if rustc::is_min_version(\"1.13.0\").unwrap_or(false) {\n      println!(\"cargo:rustc-cfg=question_mark_operator\");\n  }\n  ```\n\n  See [`is_max_version`] or [`is_exact_version`] to check if the compiler\n  is _at most_ or _exactly_ a certain version.\n\n* Check that the running compiler was released on or after `2018-12-18`:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_min_date(\"2018-12-18\") {\n      Some(true) => \"Yep! It's recent!\",\n      Some(false) => \"No, it's older.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n  See [`is_max_date`] or [`is_exact_date`] to check if the compiler was\n  released _prior to_ or _exactly on_ a certain date.\n\n* Check that the running compiler supports feature flags:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::is_feature_flaggable() {\n      Some(true) => \"Yes! It's a dev or nightly release!\",\n      Some(false) => \"No, it's stable or beta.\",\n      None => \"Couldn't determine the rustc version.\"\n  };\n  ```\n\n* Check that the running compiler supports a specific feature:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  if let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n     println!(\"cargo:rustc-cfg=has_doc_cfg\");\n  }\n  ```\n\n* Check that the running compiler is on the stable channel:\n\n  ```rust\n  extern crate version_check as rustc;\n\n  match rustc::Channel::read() {\n      Some(c) if c.is_stable() => format!(\"Yes! It's stable.\"),\n      Some(c) => format!(\"No, the channel {} is not stable.\", c),\n      None => format!(\"Couldn't determine the rustc version.\")\n  };\n  ```\n\nTo interact with the version, release date, and release channel as structs,\nuse [`Version`], [`Date`], and [`Channel`], respectively. The [`triple()`]\nfunction returns all three values efficiently.\n\n# Alternatives\n\nThis crate is dead simple with no dependencies. If you need something more\nand don't care about panicking if the version cannot be obtained, or if you\ndon't mind adding dependencies, see\n[rustc_version](https://crates.io/crates/rustc_version).","links":{"`Version`":"0:93:1726","`is_max_version`":"0:80:1770","`is_exact_version`":"0:81:1778","`is_max_date`":"0:77:1747","`is_exact_date`":"0:78:1754","`triple()`":"0:75:1725","`Date`":"0:143:1728","`Channel`":"0:129:1727"},"attrs":["#![allow(deprecated)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:75:1725","0:76:1739","0:77:1747","0:78:1754","0:79:1762","0:80:1770","0:81:1778","0:82:1788","0:84:1802","0:60-0:3:1575","0:61-0:24:1678","0:62-0:39:1679"],"is_stripped":false}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5442:7620":{"id":"5:5442:7620","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:93:1726":{"id":"a:2:2683:220-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3319-0:129:1727":{"id":"b:2:3319-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:681:2687":{"id":"5:681:2687","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:129:1727":{"id":"a:2:2683:220-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:677-0:129:1727":{"id":"b:5:677-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:2685","5:680:2686","5:681:2687"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:1762":{"id":"0:79:1762","crate_id":0,"name":"is_min_version","span":{"filename":"src/lib.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at least** some minimum\nversion.\n\nThe format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `min_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at least `min_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1802":{"id":"0:84:1802","crate_id":0,"name":"supports_feature","span":{"filename":"src/lib.rs","begin":[289,0],"end":[317,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports `feature`.\n\nReturns _true_ _iff_ [`is_feature_flaggable()`] returns `true` _and_ the\nfeature is not disabled via exclusion in `allow-features` via `RUSTFLAGS` or\n`CARGO_ENCODED_RUSTFLAGS`. If the version could not be determined, returns\n`None`.\n\n# Example\n\n```rust\nuse version_check as rustc;\n\nif let Some(true) = rustc::supports_feature(\"doc_cfg\") {\n   println!(\"cargo:rustc-cfg=has_doc_cfg\");\n}\n```","links":{"`is_feature_flaggable()`":"0:82:1788"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["feature",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5686-0:93:1726":{"id":"b:5:5686-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1462"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12088:24886":{"id":"2:12088:24886","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:6876":{"id":"2:12101:6876","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43528:6854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31212":{"id":"2:12105:31212","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:31209"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43841:6874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,31],"end":[12,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2537-0:129:1727":{"id":"b:2:2537-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12118:2666":{"id":"2:12118:2666","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3:1575":{"id":"0:3:1575","crate_id":0,"name":"version","span":{"filename":"src/version.rs","begin":[1,0],"end":[316,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:93:1726"],"is_stripped":true}}},"0:13:2106":{"id":"0:13:2106","crate_id":0,"name":"to_mmp","span":{"filename":"src/version.rs","begin":[104,4],"end":[109,5]},"visibility":"public","docs":"Returns the `(major, minor, patch)` version components of `self`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert_eq!(Version::parse(\"1.35.0\").unwrap().to_mmp(), (1, 35, 0));\nassert_eq!(Version::parse(\"1.33.0\").unwrap().to_mmp(), (1, 33, 0));\nassert_eq!(Version::parse(\"1.35.1\").unwrap().to_mmp(), (1, 35, 1));\nassert_eq!(Version::parse(\"1.13.2\").unwrap().to_mmp(), (1, 13, 2));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u16"},{"primitive":"u16"},{"primitive":"u16"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[177,0],"end":[182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12138:33493":{"id":"2:12138:33493","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:12942","str::split":"2:12126:1689","prim@char":"1:11945:418","str::split_terminator":"2:12135:33492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43626:6861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1484":{"id":"2:2556:1484","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5686-0:143:1728":{"id":"b:5:5686-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1462"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11945:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:33496":{"id":"2:12156:33496","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:2424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43780:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1728":{"id":"0:143:1728","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[6,0],"end":[6,21]},"visibility":"public","docs":"Release date including year, month, and day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:41","a:2:2683:220-0:143:1728","a:2:8316:7704-0:143:1728","a:2:2700:228-0:143:1728","a:2:2740:2473-0:143:1728","a:2:8315:7705-0:143:1728","b:2:2541-0:143:1728","b:2:3319-0:143:1728","b:2:2537-0:143:1728","b:2:2250-0:143:1728","b:2:2547-0:143:1728","b:2:2247-0:143:1728","b:2:2552-0:143:1728","b:5:677-0:143:1728","b:5:5686-0:143:1728","0:152","0:155","0:151","0:159","0:157","0:148","0:149","0:56","0:154","0:146"]}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:143:1728":{"id":"b:2:2247-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12197:26087":{"id":"2:12197:26087","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:26056","Self::is_ascii":"2:12196:26086"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:26056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:143:1728":{"id":"b:2:2537-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5441:34159":{"id":"5:5441:34159","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2480","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2480","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1741":{"id":"0:27:1741","crate_id":0,"name":"read","span":{"filename":"src/channel.rs","begin":[29,4],"end":[33,5]},"visibility":"public","docs":"Reads the release channel of the running compiler. If it cannot be\ndetermined (see the [top-level documentation](crate)), returns `None`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nmatch Channel::read() {\n    Some(c) => format!(\"The channel is: {}\", c),\n    None => format!(\"Failed to read the release channel.\")\n};\n```","links":{"crate":"0:0:1951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:26091":{"id":"2:12200:26091","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:1731":{"id":"2:12194:1731","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:7716"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:7716","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:7716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:422":{"id":"0:156:422","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[5,37],"end":[5,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5686-0:129:1727":{"id":"b:5:5686-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1462"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:677-0:143:1728":{"id":"b:5:677-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:2685","5:680:2686","5:681:2687"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:147:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2134":{"id":"0:54:2134","crate_id":0,"name":"exactly","span":{"filename":"src/date.rs","begin":[170,4],"end":[174,5]},"visibility":"public","docs":"Returns `true` if `self` occurs exactly on `date`.\n\nIf `date` is not exactly `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.exactly(\"2020-01-01\"));\n\nassert!(!date.exactly(\"2019-12-31\"));\nassert!(!date.exactly(\"2014-04-31\"));\nassert!(!date.exactly(\"2020-01-02\"));\nassert!(!date.exactly(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:429":{"id":"0:160:429","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[5,56],"end":[5,59]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30915:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:671":{"id":"0:57:671","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[178,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:613":{"id":"0:150:613","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[5,16],"end":[5,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:680:2686":{"id":"5:680:2686","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,31],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12165:1688":{"id":"2:12165:1688","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:33498":{"id":"2:12162:33498","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::match_indices":"2:12159:33497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43726:6867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:26226":{"id":"5:5443:26226","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:26090"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:1685":{"id":"2:12106:1685","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43812:6871","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:1689":{"id":"2:12126:1689","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split_whitespace":"2:12104:31209","str::rsplit":"2:12132:24920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43558:6774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:93:1726":{"id":"b:5:677-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:2685","5:680:2686","5:681:2687"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","ge","lt"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:158:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:9:1731":{"id":"0:9:1731","crate_id":0,"name":"parse","span":{"filename":"src/version.rs","begin":[57,4],"end":[74,5]},"visibility":"public","docs":"Parse a Rust release version (of the form\n`major[.minor[.patch[-channel]]]`), ignoring the release channel, if\nany. Returns `None` if `version` is not a valid Rust version string.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.18.0\").unwrap();\nassert!(version.exactly(\"1.18.0\"));\n\nlet version = Version::parse(\"1.20.0-nightly\").unwrap();\nassert!(version.exactly(\"1.20.0\"));\nassert!(version.exactly(\"1.20.0-beta\"));\n\nlet version = Version::parse(\"1.3\").unwrap();\nassert!(version.exactly(\"1.3.0\"));\n\nlet version = Version::parse(\"1\").unwrap();\nassert!(version.exactly(\"1.0.0\"));\n\nassert!(Version::parse(\"one.two.three\").is_none());\nassert!(Version::parse(\"1.65536.2\").is_none());\nassert!(Version::parse(\"1. 2\").is_none());\nassert!(Version::parse(\"\").is_none());\nassert!(Version::parse(\"1.\").is_none());\nassert!(Version::parse(\"1.2.3.4\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[5,27],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8316:7704-0:143:1728":{"id":"a:2:8316:7704-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:7704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:1747":{"id":"0:77:1747","crate_id":0,"name":"is_max_date","span":{"filename":"src/lib.rs","begin":[187,0],"end":[192,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or before**\nsome date.\n\nThe format of `max_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `max_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or before `max_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:33488":{"id":"2:12086:33488","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:422":{"id":"0:142:422","crate_id":0,"name":"clone","span":{"filename":"src/channel.rs","begin":[12,37],"end":[12,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:33500":{"id":"2:12169:33500","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1726":{"id":"0:93:1726","crate_id":0,"name":"Version","span":{"filename":"src/version.rs","begin":[5,0],"end":[5,24]},"visibility":"public","docs":"Version number: `major.minor.patch`, ignoring release channel.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:5","a:2:2683:220-0:93:1726","a:2:8316:7704-0:93:1726","a:2:2700:228-0:93:1726","a:2:2740:2473-0:93:1726","a:2:8315:7705-0:93:1726","b:2:2541-0:93:1726","b:2:3319-0:93:1726","b:2:2537-0:93:1726","b:2:2250-0:93:1726","b:2:2547-0:93:1726","b:2:2247-0:93:1726","b:2:2552-0:93:1726","b:5:677-0:93:1726","b:5:5686-0:93:1726","0:103","0:20","0:102","0:107","0:97","0:100","0:99","0:96","0:105","0:22"]}}},"b:2:2547-0:129:1727":{"id":"b:2:2547-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:1770":{"id":"0:80:1770","crate_id":0,"name":"is_max_version","span":{"filename":"src/lib.rs","begin":[235,0],"end":[240,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **at most** some maximum\nversion.\n\nThe format of `max_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `max_version` could not\nbe parsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nis at most `max_version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["max_version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:6886":{"id":"2:12102:6886","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43534:6855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:93:1726":{"id":"b:2:2250-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:24070"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2252:24070":{"id":"2:2252:24070","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[12,27],"end":[12,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12097:33489":{"id":"2:12097:33489","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11951:1404","str::slice_mut_unchecked":"2:12098:33490","crate::ops::Index":"2:2980:7552"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32099:2455","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2537-0:93:1726":{"id":"b:2:2537-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106:1040":{"id":"0:106:1040","crate_id":0,"name":"partial_cmp","span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30915:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[15,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1741","0:30:1731","0:32:1789","0:33:2228","0:34:2232","0:35:2236","0:36:2239"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50:2119":{"id":"0:50:2119","crate_id":0,"name":"at_least","span":{"filename":"src/date.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or after `date`.\n\nIf `date` occurs before `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_least(\"2019-12-31\"));\nassert!(date.at_least(\"2020-01-01\"));\nassert!(date.at_least(\"2014-04-31\"));\n\nassert!(!date.at_least(\"2020-01-02\"));\nassert!(!date.at_least(\"2024-08-18\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:1789":{"id":"0:32:1789","crate_id":0,"name":"supports_features","span":{"filename":"src/channel.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns `true` if this channel supports feature flags. In other words,\nreturns `true` if the channel is either `dev` or `nightly`.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet dev = Channel::parse(\"1.3.0-dev\").unwrap();\nassert!(dev.supports_features());\n\nlet nightly = Channel::parse(\"1.42.2-nightly\").unwrap();\nassert!(nightly.supports_features());\n\nlet beta = Channel::parse(\"1.32.0-beta\").unwrap();\nassert!(!beta.supports_features());\n\nlet stable = Channel::parse(\"1.4.0\").unwrap();\nassert!(!stable.supports_features());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:24884":{"id":"2:12093:24884","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:33494":{"id":"2:12147:33494","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:26086":{"id":"2:12196:26086","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:26227":{"id":"5:5444:26227","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:26091"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:7705-0:143:1728":{"id":"a:2:8315:7705-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:7705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8315:7705-0:93:1726":{"id":"a:2:8315:7705-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:7705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:18:2134":{"id":"0:18:2134","crate_id":0,"name":"exactly","span":{"filename":"src/version.rs","begin":[184,4],"end":[188,5]},"visibility":"public","docs":"Returns `true` if `self` is exactly equal to `version`.\n\nIf `version` is not equal to `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.exactly(\"1.35.0\"));\n\nassert!(!version.exactly(\"1.33.0\"));\nassert!(!version.exactly(\"1.35.1\"));\nassert!(!version.exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:33486":{"id":"2:12080:33486","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:671":{"id":"0:147:671","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[5,9],"end":[5,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2232":{"id":"0:34:2232","crate_id":0,"name":"is_nightly","span":{"filename":"src/channel.rs","begin":[141,4],"end":[146,5]},"visibility":"public","docs":"Returns `true` if this channel is `nightly` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet nightly = Channel::parse(\"1.3.0-nightly\").unwrap();\nassert!(nightly.is_nightly());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_nightly());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:31209":{"id":"2:12104:31209","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:31212"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43832:6873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:1731":{"id":"0:45:1731","crate_id":0,"name":"parse","span":{"filename":"src/date.rs","begin":[51,4],"end":[66,5]},"visibility":"public","docs":"Parse a release date of the form `%Y-%m-%d`. Returns `None` if `date` is\nnot in `%Y-%m-%d` format.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2016-04-20\").unwrap();\n\nassert!(date.at_least(\"2016-01-10\"));\nassert!(date.at_most(\"2016-04-20\"));\nassert!(date.exactly(\"2016-04-20\"));\n\nassert!(Date::parse(\"2021-12-31\").unwrap().exactly(\"2021-12-31\"));\n\nassert!(Date::parse(\"March 13, 2018\").is_none());\nassert!(Date::parse(\"1-2-3-4-5\").is_none());\nassert!(Date::parse(\"2020-300-23120\").is_none());\nassert!(Date::parse(\"2020-12-12 1\").is_none());\nassert!(Date::parse(\"2020-10\").is_none());\nassert!(Date::parse(\"2020\").is_none());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:24920":{"id":"2:12132:24920","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split":"2:12126:1689"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43576:6777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:422":{"id":"0:104:422","crate_id":0,"name":"clone","span":{"filename":"src/version.rs","begin":[4,30],"end":[4,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1679":{"id":"0:39:1679","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[203,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:143:1728"],"is_stripped":true}}},"b:2:2250-0:143:1728":{"id":"b:2:2250-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:24070"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12135:33492":{"id":"2:12135:33492","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:12942","str::split":"2:12126:1689","prim@char":"1:11945:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:33493"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43608:6860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1678":{"id":"0:24:1678","crate_id":0,"name":"channel","span":{"filename":"src/channel.rs","begin":[1,0],"end":[193,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:129:1727"],"is_stripped":true}}},"b:2:2247-0:129:1727":{"id":"b:2:2247-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60-0:3:1575":{"id":"0:60-0:3:1575","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,15],"end":[92,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"version","name":"version","id":"0:3:1575","glob":true}}},"2:12079:33485":{"id":"2:12079:33485","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1788":{"id":"0:82:1788","crate_id":0,"name":"is_feature_flaggable","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Checks whether the running or installed `rustc` supports feature flags.\n\nIn other words, if the channel is either \"nightly\" or \"dev\".\n\nNote that support for specific `rustc` features can be enabled or disabled\nvia the `allow-features` compiler flag, which this function _does not_\ncheck. That is, this function _does not_ check whether a _specific_ feature\nis supported, but instead whether features are supported at all. To check\nfor support for a specific feature, use [`supports_feature()`].\n\nIf the version could not be determined, returns `None`. Otherwise returns\n`true` if the running version supports feature flags and `false` otherwise.","links":{"`supports_feature()`":"0:84:1802"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:24883":{"id":"2:12091:24883","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:33490":{"id":"2:12098:33490","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11951:1404","crate::ops::IndexMut":"2:2984:7553","str::slice_unchecked":"2:12097:33489"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:26089":{"id":"2:12198:26089","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:2628":{"id":"2:12122:2628","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:2629","2:12079:33485","2:12080:33486","2:12082:33487","2:12085:26057","2:12086:33488","2:12087:314","2:12088:24886","2:12089:24882","2:12091:24883","2:12093:24884","2:12095:24885","2:12097:33489","2:12098:33490","2:12099:24909","2:12100:24910","2:12101:6876","2:12102:6886","2:12103:3860","2:12104:31209","2:12105:31212","2:12106:1685","2:12107:33491","2:12108:31243","2:12109:2211","2:12112:1817","2:12115:1694","2:12118:2666","2:12122:2628","2:12126:1689","2:12129:24918","2:12132:24920","2:12135:33492","2:12138:33493","2:12141:1703","2:12144:24923","2:12147:33494","2:12150:33495","2:12153:2424","2:12156:33496","2:12159:33497","2:12162:33498","2:12165:1688","2:12167:33499","2:12169:33500","2:12171:1698","2:12172:1696","2:12173:33501","2:12176:33502","2:12179:24158","2:12182:24925","2:12185:33503","2:12188:1699","2:12191:1697","2:12194:1731","2:12196:26086","2:12197:26087","2:12198:26089","2:12199:26090","2:12200:26091","2:12201:33504","2:12203:7520","2:12204:33505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2551:1485":{"id":"2:2551:1485","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:34156":{"id":"5:5429:34156","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:34158":{"id":"5:5440:34158","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:613":{"id":"0:136:613","crate_id":0,"name":"eq","span":{"filename":"src/channel.rs","begin":[12,16],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2473-0:93:1726":{"id":"a:2:2740:2473-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:12:2094":{"id":"0:12:2094","crate_id":0,"name":"from_mmp","span":{"filename":"src/version.rs","begin":[88,4],"end":[90,5]},"visibility":"public","docs":"Creates a `Version` from `(major, minor, patch)` version components.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nassert!(Version::from_mmp(1, 35, 0).exactly(\"1.35.0\"));\nassert!(Version::from_mmp(1, 33, 0).exactly(\"1.33.0\"));\nassert!(Version::from_mmp(1, 35, 1).exactly(\"1.35.1\"));\nassert!(Version::from_mmp(1, 13, 2).exactly(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["major",{"primitive":"u16"}],["minor",{"primitive":"u16"}],["patch",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:129:1727":{"id":"b:2:2541-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:671":{"id":"0:23:671","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[199,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:93:1726":{"id":"a:2:2700:228-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12108:31243":{"id":"2:12108:31243","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43850:6875","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:1697":{"id":"2:12191:1697","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:24158":{"id":"2:12179:24158","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:7705-0:129:1727":{"id":"a:2:8315:7705-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:7705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2683:220-0:143:1728":{"id":"a:2:2683:220-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2700:228-0:129:1727":{"id":"a:2:2700:228-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12089:24882":{"id":"2:12089:24882","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2249:2411":{"id":"2:2249:2411","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:143:1728":{"id":"b:2:2552-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1484"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12182:24925":{"id":"2:12182:24925","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:7520":{"id":"2:12203:7520","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:7520"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43866:6794","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:1703":{"id":"2:12141:1703","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942","str::rsplitn":"2:12144:24923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43662:6863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:613":{"id":"0:98:613","crate_id":0,"name":"eq","span":{"filename":"src/version.rs","begin":[4,9],"end":[4,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/channel.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:38:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158:1040":{"id":"0:158:1040","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[5,44],"end":[5,54]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30915:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:24886","`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:2211":{"id":"2:12109:2211","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:93:1726":{"id":"b:2:2247-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12150:33495":{"id":"2:12150:33495","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:33505":{"id":"2:12204:33505","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:33505"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43875:6797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:26057":{"id":"2:12085:26057","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:1717"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:33502":{"id":"2:12176:33502","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:143:1728":{"id":"b:2:2541-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:35:2236":{"id":"0:35:2236","crate_id":0,"name":"is_beta","span":{"filename":"src/channel.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Returns `true` if this channel is `beta` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(beta.is_beta());\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(!stable.is_beta());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,20],"end":[4,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:21:671":{"id":"0:21:671","crate_id":0,"name":"fmt","span":{"filename":"src/version.rs","begin":[192,4],"end":[195,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:33497":{"id":"2:12159:33497","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:12942","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::rmatch_indices":"2:12162:33498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43708:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2473-0:129:1727":{"id":"a:2:2740:2473-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12100:24910":{"id":"2:12100:24910","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12099:24909"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1778":{"id":"0:81:1778","crate_id":0,"name":"is_exact_version","span":{"filename":"src/lib.rs","begin":[250,0],"end":[255,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` is **exactly** some version.\n\nThe format of `version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n`1.14.0`, `1.16.0-nightly`, etc.\n\nIf the version cannot be retrieved or parsed, or if `version` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc` is\nexactly `version` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:93:1726":{"id":"b:2:2552-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1484"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12095:24885":{"id":"2:12095:24885","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:1696":{"id":"2:12172:1696","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:33501":{"id":"2:12173:33501","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:12939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2127":{"id":"0:16:2127","crate_id":0,"name":"at_most","span":{"filename":"src/version.rs","begin":[160,4],"end":[164,5]},"visibility":"public","docs":"Returns `true` if `self` is less than or equal to `version`.\n\nIf `version` is less than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_most(\"1.35.1\"));\nassert!(version.at_most(\"1.55.0\"));\nassert!(version.at_most(\"1.35.0\"));\n\nassert!(!version.at_most(\"1.33.0\"));\nassert!(!version.at_most(\"1.13.2\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:93:1726":{"id":"b:2:3319-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5688:1462":{"id":"5:5688:1462","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,49],"end":[4,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:1727":{"id":"0:129:1727","crate_id":0,"name":"Channel","span":{"filename":"src/channel.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":"Release channel: \"dev\", \"nightly\", \"beta\", or \"stable\".","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:26","a:2:2683:220-0:129:1727","a:2:8316:7704-0:129:1727","a:2:2700:228-0:129:1727","a:2:2740:2473-0:129:1727","a:2:8315:7705-0:129:1727","b:2:2541-0:129:1727","b:2:3319-0:129:1727","b:2:2537-0:129:1727","b:2:2250-0:129:1727","b:2:2547-0:129:1727","b:2:2247-0:129:1727","b:2:2552-0:129:1727","b:5:677-0:129:1727","b:5:5686-0:129:1727","0:37","0:138","0:140","0:134","0:137","0:132","0:141","0:135"]}}},"0:52:2127":{"id":"0:52:2127","crate_id":0,"name":"at_most","span":{"filename":"src/date.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Returns `true` if `self` occurs on or before `date`.\n\nIf `date` occurs after `self`, or if `date` is not in `%Y-%m-%d`\nformat, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Date;\n\nlet date = Date::parse(\"2020-01-01\").unwrap();\n\nassert!(date.at_most(\"2020-01-01\"));\nassert!(date.at_most(\"2020-01-02\"));\nassert!(date.at_most(\"2024-08-18\"));\n\nassert!(!date.at_most(\"2019-12-31\"));\nassert!(!date.at_most(\"2014-04-31\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:143:1728":{"id":"a:2:2700:228-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:1739":{"id":"0:76:1739","crate_id":0,"name":"is_min_date","span":{"filename":"src/lib.rs","begin":[171,0],"end":[176,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **on or after**\nsome date.\n\nThe format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `min_date` could not be\nparsed, returns `None`. Otherwise returns `true` if the installed `rustc`\nwas release on or after `min_date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["min_date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:671":{"id":"0:38:671","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1754":{"id":"0:78:1754","crate_id":0,"name":"is_exact_date","span":{"filename":"src/lib.rs","begin":[203,0],"end":[208,1]},"visibility":"public","docs":"Checks that the running or installed `rustc` was released **exactly** on\nsome date.\n\nThe format of `date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n`2017-01-09`.\n\nIf the date cannot be retrieved or parsed, or if `date` could not be parsed,\nreturns `None`. Otherwise returns `true` if the installed `rustc` was\nrelease on `date` and `false` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[7,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6:1741","0:9:1731","0:12:2094","0:13:2106","0:14:2119","0:16:2127","0:18:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61-0:24:1678":{"id":"0:61-0:24:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,15],"end":[93,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"channel","name":"channel","id":"0:24:1678","glob":true}}},"2:12107:33491":{"id":"2:12107:33491","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43822:6872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:24918":{"id":"2:12129:24918","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:6776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:7704-0:129:1727":{"id":"a:2:8316:7704-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:7704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12144:24923":{"id":"2:12144:24923","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11945:418","str::splitn":"2:12141:1703","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43680:6864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:1698":{"id":"2:12171:1698","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:129:1727":{"id":"b:2:2250-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:24070"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2540:1823":{"id":"2:2540:1823","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:13066":{"id":"5:5426:13066","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:34157":{"id":"5:5432:34157","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:34155","5:5426:13066","5:5429:34156","5:5432:34157","5:5440:34158","5:5441:34159","5:5442:7620","5:5443:26226","5:5444:26227"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12199:26090":{"id":"2:12199:26090","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:24909":{"id":"2:12099:24909","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12100:24910"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:33499":{"id":"2:12167:33499","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:679:2685":{"id":"5:679:2685","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12188:1699":{"id":"2:12188:1699","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:33503":{"id":"2:12185:33503","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:1694":{"id":"2:12115:1694","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:12942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:7365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:12940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2239":{"id":"0:36:2239","crate_id":0,"name":"is_stable","span":{"filename":"src/channel.rs","begin":[181,4],"end":[186,5]},"visibility":"public","docs":"Returns `true` if this channel is `stable` and `false` otherwise.\n\n# Example\n\n```rust\nuse version_check::Channel;\n\nlet stable = Channel::parse(\"1.0.0\").unwrap();\nassert!(stable.is_stable());\n\nlet beta = Channel::parse(\"1.3.0-beta\").unwrap();\nassert!(!beta.is_stable());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:671":{"id":"0:133:671","crate_id":0,"name":"fmt","span":{"filename":"src/channel.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:93:1726":{"id":"b:2:2541-0:93:1726","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[8,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:1741","0:45:1731","0:48:2265","0:50:2119","0:52:2127","0:54:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2547-0:143:1728":{"id":"b:2:2547-0:143:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12103:3860":{"id":"2:12103:3860","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43544:3293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/version.rs","begin":[4,37],"end":[4,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","ge","lt"],"trait":{"name":"PartialOrd","id":"2:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2552-0:129:1727":{"id":"b:2:2552-0:129:1727","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1484"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2265":{"id":"0:48:2265","crate_id":0,"name":"from_ymd","span":{"filename":"src/date.rs","begin":[86,4],"end":[91,5]},"visibility":"public","docs":"Creates a `Date` from `(year, month, day)` date components.\n\nDoes not check the validity of `year`, `month`, or `day`, but `year` is\ntruncated to 23 bits (% 8,388,608), `month` to 4 bits (% 16), and `day`\nto 5 bits (% 32).\n\n# Example\n\n```rust\nuse version_check::Date;\n\nassert!(Date::from_ymd(2021, 7, 30).exactly(\"2021-07-30\"));\nassert!(Date::from_ymd(2010, 3, 23).exactly(\"2010-03-23\"));\nassert!(Date::from_ymd(2090, 1, 31).exactly(\"2090-01-31\"));\n\n// Truncation: 33 % 32 == 0x21 & 0x1F == 1.\nassert!(Date::from_ymd(2090, 1, 33).exactly(\"2090-01-01\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"u16"}],["month",{"primitive":"u8"}],["day",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1725":{"id":"0:75:1725","crate_id":0,"name":"triple","span":{"filename":"src/lib.rs","begin":[143,0],"end":[160,1]},"visibility":"public","docs":"Reads the triple of [`Version`], [`Channel`], and [`Date`] of the installed\nor running `rustc`.\n\nIf any attribute cannot be determined (see the [top-level\ndocumentation](crate)), returns `None`.\n\nTo obtain only one of three attributes, use [`Version::read()`],\n[`Channel::read()`], or [`Date::read()`].","links":{"`Version`":"0:93:1726","`Version::read()`":"0:6:1741","`Channel`":"0:129:1727","crate":"0:0:1951","`Channel::read()`":"0:27:1741","`Date::read()`":"0:42:1741","`Date`":"0:143:1728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Version","id":"0:93:1726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Channel","id":"0:129:1727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Date","id":"0:143:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-0:39:1679":{"id":"0:62-0:39:1679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,15],"end":[94,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"date","name":"date","id":"0:39:1679","glob":true}}},"0:14:2119":{"id":"0:14:2119","crate_id":0,"name":"at_least","span":{"filename":"src/version.rs","begin":[135,4],"end":[139,5]},"visibility":"public","docs":"Returns `true` if `self` is greater than or equal to `version`.\n\nIf `version` is greater than `self`, or if `version` is not a valid Rust\nversion string, returns `false`.\n\n# Example\n\n```rust\nuse version_check::Version;\n\nlet version = Version::parse(\"1.35.0\").unwrap();\n\nassert!(version.at_least(\"1.33.0\"));\nassert!(version.at_least(\"1.35.0\"));\nassert!(version.at_least(\"1.13.2\"));\n\nassert!(!version.at_least(\"1.35.1\"));\nassert!(!version.at_least(\"1.55.0\"));\n\nlet version = Version::parse(\"1.12.5\").unwrap();\n\nassert!(version.at_least(\"1.12.0\"));\nassert!(!version.at_least(\"1.35.0\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["version",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:33487":{"id":"2:12082:33487","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12080:33486"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:3998:7359":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8831:2634":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10458:6645":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44565:4149":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10812:4728":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2348:1944":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:494:5549":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7539:3383":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:3272:7409":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:736:23828":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:1636:4460":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4973:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9219:2706":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:9690:3114":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14205:5386":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:46023:4176":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3962:7639":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:62:13420":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4810:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4877:7690":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1931:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45823:4164":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:40872:6838":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6841:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:4144:4466":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11642:3330":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"14:7:7088":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:47849:4249":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13096:5037":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4483:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13683:5234":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40921:6843":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4605:13007":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41640:2633":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9093:4337":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9806:19881":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40074:4098":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12840:4995":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41665:2634":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7517:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:875:6748":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6239:35065":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12851:4996":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:20609:2604":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47933:6566":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4908:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41527:4121":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"13:226:5523":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:21792:4473":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2931:2477":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:4698:3406":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6915:35059":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14403:5436":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13923:5292":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4564:3403":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10529:3303":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11949:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:8138:7327":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11500:6584":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13991:5313":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4781:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41707:7101":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11428:3317":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5994:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4938:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:43374:7385":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1285:7337":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11728:3165":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12161:4860":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:644:4650":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:10870:7375":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:7602:4257":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2926:18940":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:9221:2707":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:4941:3063":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:11957:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3948:7637":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40465:6824":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:40400:6816":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:6137:7867":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14163:5373":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:5787:3134":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:2174:5525":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:80:23817":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3235:6753":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13937:5299":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4006:7641":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40322:7382":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3155:24819":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13659:5229":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:3395:7187":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1603:5674":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7511:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11963:1504":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:45793:4163":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:2032:4265":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:42908:6851":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:20669:32185":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2468:7596":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:11345:1717":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40031:6794":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10799:7245":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:44136:12954":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8155:6806":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6820:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2215:1741":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13697:5235":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9344:35073":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:21675:7779":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:39381:7530":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:0:2320":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:14236:5393":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4456:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12769:4981":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4496:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:10854:2858":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1545:5636":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40913:6541":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2350:7582":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8185:6871":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:5933:3132":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7621:7427":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2857:3363":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11969:1132":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11272:7261":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:5277:12927":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:507:3834":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"15:288:18894":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:635:7392":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11123:4336":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10161:7214":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8807:2454":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4992:6083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:1543:3063":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9706:7194":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2767:3583":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7515:6726":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11532:6932":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:55:3682":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:13964:5306":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:488:5547":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9409:35069":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:44281:6903":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10786:7244":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:9361:7368":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11227:4348":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:7654:2692":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11832:4785":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1673:5728":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:3867:3394":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:30545:30917":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:21210:7777":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9840:7196":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:4263:7100":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12659:4950":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4650:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:45692:4159":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11454:6669":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:2133:7182":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9188:3291":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10883:4732":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46359:4186":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4794:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11498:3319":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1513:5620":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:8316:7704":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:47887:6562":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:1915:6536":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3231:7406":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7499:7117":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:10196:7370":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"0:80:1770":{"crate_id":0,"path":["version_check","is_max_version"],"kind":"function"},"16:6763:3559":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10076:6774":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4949:6063":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45548:4153":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21229:7596":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44085:6890":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7213:3855":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40654:6833":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4193:3063":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8823:7444":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:1500:7329":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13620:5220":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6834:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8291:7442":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:6468:3034":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4396:3398":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:5013:7417":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6355:7425":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:8125:7324":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:6935:3147":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4380:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5829:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40209:30937":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5920:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6705:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42362:2706":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:1755:4461":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:3580:2690":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:836:7335":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:21551:4472":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1270:7339":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:45947:4169":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43822:6872":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:6644:7425":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:573:5595":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40452:6823":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10038:7205":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13639:5221":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:40682:6835":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4032:3396":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:41986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13870:5277":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8134:7595":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7701:6913":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12377:4910":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1520:7347":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:8841:19865":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:41674:4127":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2791:13076":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:3635:3189":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6648:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40145:6800":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:6983:3629":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8257:7441":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:3463:2469":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:43726:6867":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:568:5593":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5890:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11894:4352":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8113:6573":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12757:4979":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7973:7619":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40514:6829":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"10:36:5530":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4315:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43093:6557":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:119:13474":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:554:7391":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39628:26056":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:41540:6915":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40382:6813":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:6651:2640":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:1075:7179":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6484:6688":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21027:7781":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:10158:7369":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47603:4244":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6775:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5948:3063":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:8317:7364":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13707:5236":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:3744:3391":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6540:3374":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10486:6647":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7753:6727":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:149:3016":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2421:3345":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:45845:4165":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4325:3095":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43626:6861":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:45900:4168":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42588:6544":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:2168:5524":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:11059:27610":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:32139:6793":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9614:35071":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12921:5005":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5972:3459":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2855:3129":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:11527:6862":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:3295:5452":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:585:7519":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4601:6390":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8191:7438":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4506:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5363:19798":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6625:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10963:3156":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8441:4476":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41504:30921":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10253:7216":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14380:5432":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2781:3360":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2846:13083":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9821:4677":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9399:7189":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:5233:3034":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8500:4478":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11388:19872":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:614:35077":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:4045:12906":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40133:13013":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6044:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:5527:3074":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:9716:35070":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1611:3027":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7505:3381":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:47811:4248":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7568:35060":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10313:7221":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:5553:3367":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1495:5612":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5818:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5377:2445":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10734:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11924:4807":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5940:7266":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:875:3042":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4944:6061":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9485:35075":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:9227:2705":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1121:7096":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11945:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:42671:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:44590:6911":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14329:5421":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:953:7335":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"9:330:5534":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6598:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:9069:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1500:5614":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:1008:3034":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4441:3399":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:0:2312":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:3647:2634":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12148:4856":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:6396:7426":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5882:6205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4917:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12004:4818":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"0:84:1802":{"crate_id":0,"path":["version_check","supports_feature"],"kind":"function"},"1:8516:6576":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:7022:2634":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46883:4208":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:1846:2854":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:8899:19867":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:21989:3870":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6575:3144":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11493:27767":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12479:4925":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:4620:3405":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6214:7292":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6505:7112":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4599:6388":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10451:7406":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:723:6748":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:1732:13105":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13719:5239":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10660:7465":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:8909:31688":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1773:3076":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12878:4999":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41657:2691":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10724:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10969:7254":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:867:2634":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4127:7660":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:42900:6850":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:20974:7785":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2962:18941":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:45993:4175":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9048:3286":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10702:4338":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:8510:2690":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12691:4954":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4872:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9083:3288":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2984:7553":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:177:18855":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13862:5276":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:11778:12942":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13847:5274":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1663:5722":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8632:19859":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4550:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11210:6666":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8924:4331":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5044:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10110:7212":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:2194:5528":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1520:5622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:21104:7596":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12526:4931":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:2799:13077":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8986:7452":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12254:4868":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:11490:6857":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11084:6652":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12065:4831":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41792:2634":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6531:3019":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21126:4470":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11155:6663":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11967:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40272:3097":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11189:4742":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:936:7537":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:21205:7596":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11956:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45592:4155":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6057:18913":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10080:7208":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:501:3054":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7601:7596":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:538:4655":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:2049:7337":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:3519:7188":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:660:7170":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12646:4949":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14216:5390":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2773:13074":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5651:3371":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8043:5470":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:11798:12940":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12711:4955":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12982:5016":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7474:3380":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1561:2690":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14007:5316":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8122:2457":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:14102:5366":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:10879:26813":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7558:3151":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1911:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4704:7652":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7525:3382":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41484:6543":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:500:5550":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5673:19799":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14037:5322":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3058:3185":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22027:30922":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:2497:3348":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:2957:34444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:5408:1681":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6720:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13914:5291":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4389:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8210:3630":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11144:6662":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:6316:3034":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5100:3419":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4323:3397":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13882:5283":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4753:3408":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13083:5036":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9216:2853":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:11803:12939":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:9112:6917":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8943:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43979:6884":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7529:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7376:3080":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:3186:7186":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10339:7228":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9887:7199":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40037:6795":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10170:2460":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:10051:2691":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47727:4246":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47907:6564":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:123:13475":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46093:4178":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10269:7371":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5080:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11250:4747":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13803:5263":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11967:4812":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:45568:4154":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2752:7770":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13957:5305":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12053:4828":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:204:3032":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:506:5553":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:2519:3349":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9318:4675":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46807:4206":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6900:5460":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:46647:4204":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1709:5742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2580:7110":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:11849:12947":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8273:4307":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11852:4795":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:798:7330":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:10346:2451":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:8176:19812":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12457:4924":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5357:2444":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:10744:2457":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"0:77:1747":{"crate_id":0,"path":["version_check","is_max_date"],"kind":"function"},"11:1822:2634":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13591:5212":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:695:7329":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:10754:27608":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1557:5645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4854:6006":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11329:19871":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13905:5288":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:434:3237":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7494:6725":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5626:7264":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:47067:4210":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6015:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8021:3692":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6671:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9296:3295":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7062:34528":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1594:6753":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:40088:6796":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:3898:7635":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:9476:4469":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47948:6567":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11056:19992":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:3193:7405":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:44484:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:7657:2693":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6438:3511":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11164:4741":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:311:6746":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7546:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43385:6558":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8901:7738":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14350:5427":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:44157:6896":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:21454:7783":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:7855:19811":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8368:4319":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:22717:3888":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12174:4861":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:40865:6837":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2293:18914":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3481:2468":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:624:35076":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6250:3495":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:43285:7383":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:32:18774":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4770:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5709:7419":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4489:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3373:12973":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:48024:6571":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8793:2453":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43857:6798":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8418:6553":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22079:3882":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11955:4811":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10310:6863":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4887:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4833:5995":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10863:4687":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1461:6748":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:7558:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43780:6870":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46045:4177":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:30943:2604":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7609:6529":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7256:3861":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:9866:7197":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:35:3030":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12077:4832":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10323:7222":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:7099:4332":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10494:3155":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:14026:5321":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2589:3352":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44309:6910":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:0:2322":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:14189:5382":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4524:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4568:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8991:7453":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11696:4754":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5742:7423":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43544:3293":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:12579:3119":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:10082:7116":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6815:3562":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4163:3063":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:9173:2469":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:43108:6852":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12815:4991":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:21954:3869":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4695:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:426:18790":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9064:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6713:6703":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5807:3438":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43516:4132":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10609:7242":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:21898:3863":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12966:5012":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:47415:4242":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:8605:19846":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43850:6875":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12792:4990":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43942:12953":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12106:4841":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11034:7259":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8178:6774":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:2220:34540":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43558:6774":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6667:3534":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5525:2450":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:11738:7716":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42226:7367":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:1696:5738":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13732:5245":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:9151:27454":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10013:2847":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:47922:6565":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11199:4745":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3996:7640":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:8711:19861":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6128:6680":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44527:4144":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:7243:3858":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:42693:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6067:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:6761:3088":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4535:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2160:13094":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:9406:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4842:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7488:3281":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6977:7305":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7484:6724":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13179:5054":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11591:4742":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46617:4203":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2611:3353":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:41906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2826:3592":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:4425:3065":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7073:19807":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2443:3346":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:4531:7682":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7833:6728":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9909:4118":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10403:6641":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13787:5259":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:10324:6864":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4010:7360":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:6629:3087":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:2164:7185":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:1517:7343":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:258:3034":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1638:5703":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11952:1488":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:2544:3126":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:43993:6887":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2212:7399":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:40391:6815":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11109:6660":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4704:5936":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12186:4864":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4862:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10581:7239":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4729:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4996:3416":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:3734:7348":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9875:7198":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"12:0:2317":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5028:3417":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9059:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"0:0:1951":{"crate_id":0,"path":["version_check"],"kind":"module"},"17:10293:7219":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:46191:4181":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11264:4750":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12365:4908":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:644:2691":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8350:7700":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:892:2690":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13771:5256":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"14:0:2318":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:4001:3057":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:7817:7429":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"9:486:18787":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10621:7243":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:43456:6784":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:507:4650":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:526:5570":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:817:7333":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6036:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9118:3289":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6864:5458":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:30381:30935":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:638:7394":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:7272:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3956:7638":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12579:4939":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5704:3428":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7626:4258":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9734:7195":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:681:6624":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:40225:4102":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:3385:7358":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2967:34446":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:42878:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:40668:6834":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4678:5923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:1012:7339":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1423:2691":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13981:5310":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9129:7455":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:12412:4914":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:805:7537":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14282:5407":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:8794:19864":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:1826:3057":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11331:7104":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"0:82:1788":{"crate_id":0,"path":["version_check","is_feature_flaggable"],"kind":"function"},"1:11960:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"14:165:18875":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5067:3418":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3638:7631":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:6865:3146":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:749:3057":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:6032:1727":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4351:7416":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14177:5379":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11965:1506":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:2180:5526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:40414:6819":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9518:7191":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11257:4351":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11127:3319":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11927:26802":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:14:2135":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:5522:2448":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5877:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:1080:7096":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:9413:7429":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10066:7207":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:48063:4250":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21060:7776":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:39413:7379":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13778:5258":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:3934:3063":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9850:19882":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:7586:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7707:3648":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:14227:5391":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:46493:4189":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:365:3025":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5863:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13167:5047":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7278:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8938:7445":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43446:7387":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:8771:19863":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6565:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10430:6643":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1048:6720":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:3719:4265":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:968:6720":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10175:4687":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:653:13831":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1631:5699":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12394:4913":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12727:4960":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10931:7248":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:7269:3072":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:7331:35063":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40331:6806":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:45638:4157":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2832:3593":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:4113:7361":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9571:35068":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14015:5317":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13456:5170":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:474:5539":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12618:4944":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4587:7639":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:6389:2634":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11275:6930":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:7180:7536":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:719:4670":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7763:19810":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8837:4327":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5015:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44332:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:20941:7790":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40894:6842":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:554:5585":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44289:6905":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11404:7412":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2921:2474":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:579:5598":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:4814:3410":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42853:6846":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"15:0:2319":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5342:3421":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:20667:32181":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"14:31:7088":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7523:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:8949:19869":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:671:7174":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2825:3362":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40524:6830":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12566:4938":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13109:5038":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2900:3365":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10832:7247":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:1135:34853":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4895:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2465:3347":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13492:5200":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12424:4916":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:1746:6534":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:7113:2634":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10957:7253":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"17:8542:19848":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9966:4687":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11241:19994":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44122:6891":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44301:6908":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:690:6627":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:7728:7378":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:12502:4930":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:40239:7567":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:8956:24156":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40098:4099":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4368:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:562:5590":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:3810:3393":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21459:7791":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21563:31895":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4233:2690":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:3201:6752":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10280:7218":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3220:5451":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5793:3437":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7631:3646":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:1538:7344":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6392:6839":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:4097:29659":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7584:7322":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:626:7097":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:4335:2715":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:541:5579":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6396:3507":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7013:4114":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5301:3420":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11242:4349":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44353:4141":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11220:19993":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12354:4905":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43354:7384":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:43534:6855":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:4010:7642":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11177:3159":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40197:4101":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2558:3109":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:930:7330":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:45722:4160":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4740:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44548:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12539:4934":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3152:29947":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13427:5159":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2910:2695":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47525:4243":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:4031:3034":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:361:7390":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3378:3063":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10032:27134":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:12448:7376":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:1027:18869":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:643:7522":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12435:4917":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:4148:7662":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10974:3157":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8078:2456":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7289:3611":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:215:6740":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2391:1876":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10858:3831":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7061:6719":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10897:2454":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49869:7793":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8239:6915":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:20652:32183":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11086:4337":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4420:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5025:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:2620:7400":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6986:3571":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10390:6640":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:14395:5433":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4606:5917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4597:6386":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:41438:4107":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:43680:6864":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4984:6081":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7839:4264":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9952:3274":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2637:3354":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3348:6842":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2762:3586":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11943:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:2138:6755":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7885:7111":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6850:3567":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43964:6878":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6130:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:12396:32523":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43576:6777":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:357:18803":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11726:4758":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4963:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"14:187:18882":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6939:19806":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:4868:3412":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:5612:6671":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43411:6782":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14341:5423":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12552:4701":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1821:2847":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10266:7217":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10994:7256":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8265:7438":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3141:13086":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11979:4815":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:609:7169":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13854:5275":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7042:3057":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13548:5206":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:4392:3063":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10867:2447":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10389:3154":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11888:4800":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13155:4742":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:42355:2698":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46853:4207":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13604:5217":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:6432:3143":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:42628:3669":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5916:3455":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40432:6821":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7030:6764":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2925:2475":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"14:160:7088":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4135:7661":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9034:4335":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:986:7337":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11669:4752":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:20855:13094":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8856:4328":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:42369:2707":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:5471:3063":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:1973:7181":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9475:7190":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6502:6696":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4785:31257":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45863:4166":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5900:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1569:5653":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11371:3315":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:6270:3057":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12936:5009":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12864:4998":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2314:3334":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8246:6916":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46413:4188":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6156:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12118:4844":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:22072:6790":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3158:24821":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:6740:13056":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:3042:18942":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5775:3433":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13368:5107":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6850:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13435:5162":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"9:0:2314":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:7963:7432":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13016:5029":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:7698:33433":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3315:7616":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8172:3293":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9777:19880":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:44305:6909":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:7661:13052":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2469:13018":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2842:13082":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43762:6869":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6160:6683":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6136:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41776:2690":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4685:5924":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7433:5463":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1489:7328":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1844:2853":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7877:7431":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:43502:4129":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7553:5465":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:42869:6849":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6805:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:3805:7413":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5393:2446":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41455:7630":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13303:5056":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6789:3561":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1669:3034":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4626:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:7231:13053":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:44535:4146":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3196:12907":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:41784:2691":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5462:2447":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2757:7772":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:0:2321":{"crate_id":17,"path":["object"],"kind":"module"},"6:5967:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10511:6650":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:4785:3409":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2962:12909":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"11:2130:18864":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:20841:7784":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12891:5000":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4506:3401":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:11792:6630":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8979:7451":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:2376:7592":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48001:6570":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9665:35074":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:44577:3780":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21981:6537":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8761:2451":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4428:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:1572:3076":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:42653:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:7592:19809":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1062:7337":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43528:6854":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:530:4446":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10377:6638":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:47876:6561":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:587:5603":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11363:7411":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:10231:6777":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:20637:31892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:8086:6735":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5987:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:2167:6757":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5058:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:917:7342":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6600:3074":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4475:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:21966:30924":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4716:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4463:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11520:3321":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6323:6685":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:755:6637":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11542:3322":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9223:3292":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13566:5211":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:1068:7340":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9977:7193":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:7463:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10499:6648":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8197:7440":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40423:6820":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5398:3285":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:10684:6920":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2737:3358":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7622:7323":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6470:3386":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:844:2690":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5737:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7739:3373":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:12671:7538":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:4724:3407":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:3327:3076":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4955:6064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11020:7258":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9442:35067":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1690:5735":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10199:4691":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2399:3344":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12035:4827":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:44147:6892":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4409:2618":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:43424:7386":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"0:76:1739":{"crate_id":0,"path":["version_check","is_min_date"],"kind":"function"},"15:306:18895":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11950:1374":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11290:19870":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13574:3331":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:21106:7778":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13795:5261":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:676:7523":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:5414:5455":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6872:3376":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:0:1396":{"crate_id":1,"path":["std"],"kind":"module"},"6:6796:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5737:19800":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6077:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43866:6794":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2219:1887":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4291:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:30351:3894":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14259:5406":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10361:1726":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11067:4138":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:6156:7424":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:8252:3699":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:24:610":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:47896:6563":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12346:4903":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11964:1505":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10679:6918":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:43364:6781":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:7690:7525":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:7043:3135":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:3181:32158":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9561:7192":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8767:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6868:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3513:3057":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:44474:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:7829:6572":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12671:4951":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10013:4684":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9658:3108":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44277:6902":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:6022:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:10837:7374":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:2240:6760":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10351:4693":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9274:3293":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:7227:30937":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14359:5429":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:1184:7180":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5959:6678":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6171:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2804:3588":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6427:6687":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2821:13080":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42616:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:2046:7348":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2759:3359":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"9:393:18789":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4800:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:531:6621":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:2956:2685":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:20805:7782":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10671:19967":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:5343:2443":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4459:7665":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10258:27131":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12333:4901":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:40888:6840":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1590:5667":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14417:5439":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9016:3284":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10241:1681":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:11566:6868":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:22105:7633":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7708:2857":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13894:5284":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:5593:3133":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11959:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6175:7273":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6607:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:699:6628":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:736:6749":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:1783:2837":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:1568:3057":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7313:35062":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:6780:7774":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4446:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9990:4682":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10051:7206":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:6787:32147":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8458:7715":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:44285:6904":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:1818:2690":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:47867:6560":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47273:4241":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14315:5414":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11047:2453":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:4436:2717":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:9592:3105":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5775:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10330:7225":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:11550:6865":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:42348:2697":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4748:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"13:0:2311":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11269:6929":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:10338:7372":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11767:4767":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40058:30939":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:10119:6776":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40475:6825":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4018:7644":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2715:3357":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1048:35041":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10689:6914":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10520:6651":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:4758:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:11958:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21930:3864":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13830:5267":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:237:6553":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4664:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:11315:13156":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:481:6619":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4395:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14197:5385":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:657:2634":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12592:4941":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10945:7252":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:40302:6782":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2366:7587":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:5858:3071":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:8105:6738":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:959:7336":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13673:5233":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10417:6642":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1470:6749":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6618:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13557:5210":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:273:2480":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:45744:4161":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:11601:6776":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:2737:2612":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:5843:3445":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:7285:30288":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"18:590:4658":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7575:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7539:3149":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6619:3086":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:40046:4095":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:5754:3057":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5051:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13999:5314":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44190:6900":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:45660:4158":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7869:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:707:6630":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12826:4993":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11943:4808":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:14054:5329":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43708:6866":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2690:2472":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:39448:2715":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:14150:5367":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46917:4209":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12318:4897":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:20988:13094":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8779:2452":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:45882:4167":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6658:6702":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40443:6822":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5849:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8885:7736":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11340:3161":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3083:7401":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:1254:6720":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:793:7342":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6516:3513":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:399:35042":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4929:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11178:6664":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13448:5169":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:2811:13078":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5720:6677":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8166:6739":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1299:7096":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11905:4802":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:3441:5453":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43812:6871":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:636:4669":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11791:4781":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:30345:6538":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:20622:31892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"7:79:18781":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11354:3251":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:482:5544":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11074:3321":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10249:7215":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6886:3377":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:911:3076":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"13:110:35048":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40118:6794":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:30120:7632":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11007:7257":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6386:6686":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12905:5003":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11944:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:1785:2838":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43466:7388":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:5990:6767":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11961:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4436:5848":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7025:6716":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7679:3385":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:3233:7407":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5994:19801":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40282:7381":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8295:6375":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5008:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6317:7303":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:23164:3889":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13749:5250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5586:3132":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:40110:6797":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1506:5617":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:9655:7193":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3214:34522":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:1820:4464":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13125:5040":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:5567:3370":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:595:5608":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"0:81:1778":{"crate_id":0,"path":["version_check","is_exact_version"],"kind":"function"},"17:11568:19873":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:9013:26807":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:42598:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:47971:6568":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11600:19874":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:7043:29660":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:256:7175":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4199:7414":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4328:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:7505:6506":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:1838:6750":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13029:5030":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:6786:3091":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13140:5044":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:652:4650":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6028:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:947:7333":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2783:7771":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4926:7696":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:504:7178":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40152:6801":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6456:3369":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6571:19804":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10714:6572":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4754:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:491:6620":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5793:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8815:2690":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:4186:2714":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6372:3368":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:521:23830":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1565:2634":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"0:79:1762":{"crate_id":0,"path":["version_check","is_min_version"],"kind":"function"},"17:14301:5412":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6711:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:4783:7649":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10471:6646":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:7227:13054":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1527:5625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3406:1878":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10654:4696":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:480:3121":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:43437:6783":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11951:1404":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4518:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6124:3139":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:7822:6914":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3191:7404":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4476:3400":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11968:1561":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2567:3351":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:2458:4453":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"10:0:2315":{"crate_id":10,"path":["adler"],"kind":"module"},"5:5281:12928":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2748:2616":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:32226:2617":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4702:7650":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:7852:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4374:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9225:2704":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:22043:30923":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11425:7413":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2541:3350":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:3703:7412":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:7968:7433":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13055:5032":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:332:3023":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4304:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3472:30092":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6332:3500":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1717:5746":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2795:13075":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10845:4730":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3168:2690":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2980:7552":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:22519:3887":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:3175:6751":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46139:4179":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:5531:6765":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:6561:7734":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:400:7177":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:25974:3890":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40126:6798":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1924:7565":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:7812:3230":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11467:3318":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11955:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:8422:7365":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:7277:2479":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3593:2691":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:4279:7415":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10906:4733":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:4380:3096":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2779:3587":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11966:1503":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:564:4657":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:4706:7653":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:403:35043":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7599:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8999:4332":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:1852:6752":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2162:13095":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:43841:6874":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4469:5862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4848:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7012:6713":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1733:5751":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:844:7336":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6931:7304":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6508:7732":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4536:3402":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10444:6644":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:7092:3853":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:9471:13022":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3777:3392":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7463:6721":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2838:13081":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11948:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:9418:3153":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"9:450:18788":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9074:4336":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:2033:6720":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:727:4673":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:8068:6732":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:47773:4247":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5044:7417":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7255:4127":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40372:6812":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:32135:7378":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11045:4735":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7250:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4900:3413":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7445:7315":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46312:4185":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9153:3290":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11118:6661":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10555:7234":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7362:19808":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6573:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:113:23819":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1589:6752":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:2687:4451":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4841:3411":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2963:34447":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:39441:7380":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8527:4325":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44492:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9899:4680":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:10454:7408":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9913:7201":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3700:7411":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:766:23829":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:760:3076":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44297:6907":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:3078:7554":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2186:35040":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9604:4687":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1702:5739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2855:13085":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:7564:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"15:327:18899":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11815:4782":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:21112:7780":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:9215:2698":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:11104:4345":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5836:6183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43345:6779":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:39434:3630":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:5955:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7799:3656":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4787:5978":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41716:13149":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13513:5205":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12952:5010":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1103:7341":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"15:394:18905":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:7407:3468":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:819:3040":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:1858:6753":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:530:3122":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11753:4766":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1439:2634":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:2874:3364":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42644:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:0:2316":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:3180:34526":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11194:6926":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11970:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:1895:7107":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6303:3366":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1099:34855":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:30439:30940":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:2332:3336":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"14:221:5476":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5068:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:2803:3361":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40178:4100":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:7724:2858":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2743:2614":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13043:5031":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11098:6656":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:96:23818":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12994:5018":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:4592:3404":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4638:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:32099:2455":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:574:4650":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:667:7328":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6197:7288":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1583:6751":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10597:7241":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1845:6751":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1536:5630":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:20650:32186":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3934:7636":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3424:2458":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:20803:7596":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:4824:5992":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12017:4819":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:7893:4265":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5716:7422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4258:7099":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11234:4746":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40362:6810":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:5062:3071":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10981:7255":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7540:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3162:12991":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7305:7098":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8317:6574":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:901:3057":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2787:7773":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:44293:6906":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46261:4184":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4818:5991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:7295:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21845:4475":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:8872:19866":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:9528:35072":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:21673:7596":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:20897:7789":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:30311:3893":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4543:5902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:2060:7339":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46169:4180":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:515:4653":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:97:6742":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:926:7329":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21236:7786":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:8315:7705":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41649:2690":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:11200:2462":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43608:6860":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2928:2476":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6347:19803":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:2201:3854":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13949:5302":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14044:5324":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"9:52:18806":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:5689:3425":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44365:13196":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:857:2691":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:41563:4122":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7552:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:582:2604":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:8904:33435":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13757:5253":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10633:4694":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40344:6807":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:39154:2694":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4723:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11481:6583":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6289:3499":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:44313:4138":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:7294:3862":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:1577:6750":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21044:7596":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:40500:3602":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2481:1877":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5382:3284":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:5639:6675":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:261:7176":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45762:4162":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11946:1523":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43336:6778":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12089:4833":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:46729:4205":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11992:4817":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11623:3327":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:40484:6826":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9744:35066":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42890:6553":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11872:4796":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:2689:3356":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7693:3375":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22006:30929":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:5767:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6018:19802":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7168:3854":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1681:5729":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:3580:5454":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40903:3103":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:3799:3076":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:9926:7202":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:44170:4135":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:46215:4182":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:630:2690":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:42861:6848":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43875:6797":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4616:5918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8165:6833":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7038:3572":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:1649:5711":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9939:7203":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"14:202:12955":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6692:19805":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1831:3076":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:355:7389":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:41946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4760:3130":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:922:7328":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1479:7342":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8202:7629":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:8659:19860":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"14:40:4782":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8152:3387":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:9675:3109":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3488:2467":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21238:4470":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2816:13079":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:599:35079":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4868:7689":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:40879:6839":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10568:7237":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3904:7634":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"8:0:2313":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3168:12990":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:7696:6912":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2691:2609":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:9217:2697":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39193:12910":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5979:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:10027:2690":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7052:3046":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40159:13014":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6554:6698":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7240:35064":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7360:3076":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:11035:2452":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3233:12908":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:43832:6873":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46237:4183":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10544:7233":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:779:3037":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13332:5076":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:119:3021":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:2105:19925":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1115:34438":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6589:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:39455:6540":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13069:5033":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11962:1507":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:3270:7408":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:46390:4187":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2850:13084":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4341:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10123:4680":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:1408:2690":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10980:3158":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6726:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13971:5307":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:10352:7373":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:22093:3883":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10097:7211":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2705:2610":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:3894:3395":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:888:6749":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40353:6809":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4437:7664":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6108:3119":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43662:6863":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10448:7404":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11916:7526":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:4119:7659":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10148:7213":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2364:7586":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:41575:4124":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:8740:19862":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1501:18870":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8251:7663":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7647:3155":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:532:5573":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4764:5964":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:5383:3063":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:43112:6853":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8997:19847":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1595:5669":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:2128:3054":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12303:4893":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:618:7106":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6211:3132":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:0:1551":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5882:3449":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10303:3229":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:5589:6766":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7665:3384":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:7121:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4587:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8949:7447":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8106:3629":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11416:6668":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6724:3546":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2352:3342":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:11783:7365":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2663:3355":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6008:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:20853:31144":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:4965:3415":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7076:2634":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:7329:2478":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1071:7339":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1575:5655":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:4362:3065":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9032:3285":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5799:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47665:4245":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:582:3281":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:45614:4156":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:547:5582":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"10:44:5531":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12605:4942":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6744:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46571:4202":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3209:6750":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:39420:4465":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:285:6743":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6232:7300":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5805:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4662:7691":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11911:30286":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4401:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10223:4692":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:5874:13394":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4556:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:9869:7596":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:3668:3034":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3025:3388":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:47986:6569":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:2959:6531":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:41421:4105":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6688:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"0:78:1754":{"crate_id":0,"path":["version_check","is_exact_date"],"kind":"function"},"6:4413:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:5590:3372":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:4073:2691":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5074:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12631:4946":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11525:6932":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6357:3504":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44010:6888":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2740:2473":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:21914:6786":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44058:6889":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:4928:3414":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:6893:7115":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8869:7737":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:39240:3962":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:4665:7664":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:2373:3343":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:6834:13048":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12133:4850":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:4389:2716":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:8924:19868":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"0:75:1725":{"crate_id":0,"path":["version_check","triple"],"kind":"function"},"1:7675:7524":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}